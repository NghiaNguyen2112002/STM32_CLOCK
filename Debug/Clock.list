
Clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006de0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08006eec  08006eec  00016eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ff8  08006ff8  000200c0  2**0
                  CONTENTS
  4 .ARM          00000000  08006ff8  08006ff8  000200c0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006ff8  08006ff8  000200c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ff8  08006ff8  00016ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ffc  08006ffc  00016ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c0  20000000  08007000  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  200000c0  080070c0  000200c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000238  080070c0  00020238  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e706  00000000  00000000  000200e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002705  00000000  00000000  0002e7ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea0  00000000  00000000  00030ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d78  00000000  00000000  00031d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018f49  00000000  00000000  00032b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012755  00000000  00000000  0004ba59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a7be  00000000  00000000  0005e1ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e896c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f24  00000000  00000000  000e89bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000c0 	.word	0x200000c0
 8000128:	00000000 	.word	0x00000000
 800012c:	08006ed4 	.word	0x08006ed4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000c4 	.word	0x200000c4
 8000148:	08006ed4 	.word	0x08006ed4

0800014c <__aeabi_fmul>:
 800014c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000150:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000154:	bf1e      	ittt	ne
 8000156:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015a:	ea92 0f0c 	teqne	r2, ip
 800015e:	ea93 0f0c 	teqne	r3, ip
 8000162:	d06f      	beq.n	8000244 <__aeabi_fmul+0xf8>
 8000164:	441a      	add	r2, r3
 8000166:	ea80 0c01 	eor.w	ip, r0, r1
 800016a:	0240      	lsls	r0, r0, #9
 800016c:	bf18      	it	ne
 800016e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000172:	d01e      	beq.n	80001b2 <__aeabi_fmul+0x66>
 8000174:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000178:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800017c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000180:	fba0 3101 	umull	r3, r1, r0, r1
 8000184:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000188:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800018c:	bf3e      	ittt	cc
 800018e:	0049      	lslcc	r1, r1, #1
 8000190:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000194:	005b      	lslcc	r3, r3, #1
 8000196:	ea40 0001 	orr.w	r0, r0, r1
 800019a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800019e:	2afd      	cmp	r2, #253	; 0xfd
 80001a0:	d81d      	bhi.n	80001de <__aeabi_fmul+0x92>
 80001a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001aa:	bf08      	it	eq
 80001ac:	f020 0001 	biceq.w	r0, r0, #1
 80001b0:	4770      	bx	lr
 80001b2:	f090 0f00 	teq	r0, #0
 80001b6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ba:	bf08      	it	eq
 80001bc:	0249      	lsleq	r1, r1, #9
 80001be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001c6:	3a7f      	subs	r2, #127	; 0x7f
 80001c8:	bfc2      	ittt	gt
 80001ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d2:	4770      	bxgt	lr
 80001d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001d8:	f04f 0300 	mov.w	r3, #0
 80001dc:	3a01      	subs	r2, #1
 80001de:	dc5d      	bgt.n	800029c <__aeabi_fmul+0x150>
 80001e0:	f112 0f19 	cmn.w	r2, #25
 80001e4:	bfdc      	itt	le
 80001e6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ea:	4770      	bxle	lr
 80001ec:	f1c2 0200 	rsb	r2, r2, #0
 80001f0:	0041      	lsls	r1, r0, #1
 80001f2:	fa21 f102 	lsr.w	r1, r1, r2
 80001f6:	f1c2 0220 	rsb	r2, r2, #32
 80001fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80001fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000202:	f140 0000 	adc.w	r0, r0, #0
 8000206:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020a:	bf08      	it	eq
 800020c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000210:	4770      	bx	lr
 8000212:	f092 0f00 	teq	r2, #0
 8000216:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021a:	bf02      	ittt	eq
 800021c:	0040      	lsleq	r0, r0, #1
 800021e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000222:	3a01      	subeq	r2, #1
 8000224:	d0f9      	beq.n	800021a <__aeabi_fmul+0xce>
 8000226:	ea40 000c 	orr.w	r0, r0, ip
 800022a:	f093 0f00 	teq	r3, #0
 800022e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000232:	bf02      	ittt	eq
 8000234:	0049      	lsleq	r1, r1, #1
 8000236:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023a:	3b01      	subeq	r3, #1
 800023c:	d0f9      	beq.n	8000232 <__aeabi_fmul+0xe6>
 800023e:	ea41 010c 	orr.w	r1, r1, ip
 8000242:	e78f      	b.n	8000164 <__aeabi_fmul+0x18>
 8000244:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000248:	ea92 0f0c 	teq	r2, ip
 800024c:	bf18      	it	ne
 800024e:	ea93 0f0c 	teqne	r3, ip
 8000252:	d00a      	beq.n	800026a <__aeabi_fmul+0x11e>
 8000254:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000258:	bf18      	it	ne
 800025a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800025e:	d1d8      	bne.n	8000212 <__aeabi_fmul+0xc6>
 8000260:	ea80 0001 	eor.w	r0, r0, r1
 8000264:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000268:	4770      	bx	lr
 800026a:	f090 0f00 	teq	r0, #0
 800026e:	bf17      	itett	ne
 8000270:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000274:	4608      	moveq	r0, r1
 8000276:	f091 0f00 	teqne	r1, #0
 800027a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800027e:	d014      	beq.n	80002aa <__aeabi_fmul+0x15e>
 8000280:	ea92 0f0c 	teq	r2, ip
 8000284:	d101      	bne.n	800028a <__aeabi_fmul+0x13e>
 8000286:	0242      	lsls	r2, r0, #9
 8000288:	d10f      	bne.n	80002aa <__aeabi_fmul+0x15e>
 800028a:	ea93 0f0c 	teq	r3, ip
 800028e:	d103      	bne.n	8000298 <__aeabi_fmul+0x14c>
 8000290:	024b      	lsls	r3, r1, #9
 8000292:	bf18      	it	ne
 8000294:	4608      	movne	r0, r1
 8000296:	d108      	bne.n	80002aa <__aeabi_fmul+0x15e>
 8000298:	ea80 0001 	eor.w	r0, r0, r1
 800029c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a8:	4770      	bx	lr
 80002aa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002ae:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_frsub>:
 80002b4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80002b8:	e002      	b.n	80002c0 <__addsf3>
 80002ba:	bf00      	nop

080002bc <__aeabi_fsub>:
 80002bc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080002c0 <__addsf3>:
 80002c0:	0042      	lsls	r2, r0, #1
 80002c2:	bf1f      	itttt	ne
 80002c4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002c8:	ea92 0f03 	teqne	r2, r3
 80002cc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002d0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002d4:	d06a      	beq.n	80003ac <__addsf3+0xec>
 80002d6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002da:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002de:	bfc1      	itttt	gt
 80002e0:	18d2      	addgt	r2, r2, r3
 80002e2:	4041      	eorgt	r1, r0
 80002e4:	4048      	eorgt	r0, r1
 80002e6:	4041      	eorgt	r1, r0
 80002e8:	bfb8      	it	lt
 80002ea:	425b      	neglt	r3, r3
 80002ec:	2b19      	cmp	r3, #25
 80002ee:	bf88      	it	hi
 80002f0:	4770      	bxhi	lr
 80002f2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80002f6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002fa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80002fe:	bf18      	it	ne
 8000300:	4240      	negne	r0, r0
 8000302:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000306:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800030a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800030e:	bf18      	it	ne
 8000310:	4249      	negne	r1, r1
 8000312:	ea92 0f03 	teq	r2, r3
 8000316:	d03f      	beq.n	8000398 <__addsf3+0xd8>
 8000318:	f1a2 0201 	sub.w	r2, r2, #1
 800031c:	fa41 fc03 	asr.w	ip, r1, r3
 8000320:	eb10 000c 	adds.w	r0, r0, ip
 8000324:	f1c3 0320 	rsb	r3, r3, #32
 8000328:	fa01 f103 	lsl.w	r1, r1, r3
 800032c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000330:	d502      	bpl.n	8000338 <__addsf3+0x78>
 8000332:	4249      	negs	r1, r1
 8000334:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000338:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800033c:	d313      	bcc.n	8000366 <__addsf3+0xa6>
 800033e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000342:	d306      	bcc.n	8000352 <__addsf3+0x92>
 8000344:	0840      	lsrs	r0, r0, #1
 8000346:	ea4f 0131 	mov.w	r1, r1, rrx
 800034a:	f102 0201 	add.w	r2, r2, #1
 800034e:	2afe      	cmp	r2, #254	; 0xfe
 8000350:	d251      	bcs.n	80003f6 <__addsf3+0x136>
 8000352:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000356:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800035a:	bf08      	it	eq
 800035c:	f020 0001 	biceq.w	r0, r0, #1
 8000360:	ea40 0003 	orr.w	r0, r0, r3
 8000364:	4770      	bx	lr
 8000366:	0049      	lsls	r1, r1, #1
 8000368:	eb40 0000 	adc.w	r0, r0, r0
 800036c:	3a01      	subs	r2, #1
 800036e:	bf28      	it	cs
 8000370:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000374:	d2ed      	bcs.n	8000352 <__addsf3+0x92>
 8000376:	fab0 fc80 	clz	ip, r0
 800037a:	f1ac 0c08 	sub.w	ip, ip, #8
 800037e:	ebb2 020c 	subs.w	r2, r2, ip
 8000382:	fa00 f00c 	lsl.w	r0, r0, ip
 8000386:	bfaa      	itet	ge
 8000388:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800038c:	4252      	neglt	r2, r2
 800038e:	4318      	orrge	r0, r3
 8000390:	bfbc      	itt	lt
 8000392:	40d0      	lsrlt	r0, r2
 8000394:	4318      	orrlt	r0, r3
 8000396:	4770      	bx	lr
 8000398:	f092 0f00 	teq	r2, #0
 800039c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80003a0:	bf06      	itte	eq
 80003a2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80003a6:	3201      	addeq	r2, #1
 80003a8:	3b01      	subne	r3, #1
 80003aa:	e7b5      	b.n	8000318 <__addsf3+0x58>
 80003ac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003b0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003b4:	bf18      	it	ne
 80003b6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ba:	d021      	beq.n	8000400 <__addsf3+0x140>
 80003bc:	ea92 0f03 	teq	r2, r3
 80003c0:	d004      	beq.n	80003cc <__addsf3+0x10c>
 80003c2:	f092 0f00 	teq	r2, #0
 80003c6:	bf08      	it	eq
 80003c8:	4608      	moveq	r0, r1
 80003ca:	4770      	bx	lr
 80003cc:	ea90 0f01 	teq	r0, r1
 80003d0:	bf1c      	itt	ne
 80003d2:	2000      	movne	r0, #0
 80003d4:	4770      	bxne	lr
 80003d6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80003da:	d104      	bne.n	80003e6 <__addsf3+0x126>
 80003dc:	0040      	lsls	r0, r0, #1
 80003de:	bf28      	it	cs
 80003e0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80003e4:	4770      	bx	lr
 80003e6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80003ea:	bf3c      	itt	cc
 80003ec:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80003f0:	4770      	bxcc	lr
 80003f2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80003f6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80003fa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003fe:	4770      	bx	lr
 8000400:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000404:	bf16      	itet	ne
 8000406:	4608      	movne	r0, r1
 8000408:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800040c:	4601      	movne	r1, r0
 800040e:	0242      	lsls	r2, r0, #9
 8000410:	bf06      	itte	eq
 8000412:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000416:	ea90 0f01 	teqeq	r0, r1
 800041a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800041e:	4770      	bx	lr

08000420 <__aeabi_ui2f>:
 8000420:	f04f 0300 	mov.w	r3, #0
 8000424:	e004      	b.n	8000430 <__aeabi_i2f+0x8>
 8000426:	bf00      	nop

08000428 <__aeabi_i2f>:
 8000428:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	ea5f 0c00 	movs.w	ip, r0
 8000434:	bf08      	it	eq
 8000436:	4770      	bxeq	lr
 8000438:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 800043c:	4601      	mov	r1, r0
 800043e:	f04f 0000 	mov.w	r0, #0
 8000442:	e01c      	b.n	800047e <__aeabi_l2f+0x2a>

08000444 <__aeabi_ul2f>:
 8000444:	ea50 0201 	orrs.w	r2, r0, r1
 8000448:	bf08      	it	eq
 800044a:	4770      	bxeq	lr
 800044c:	f04f 0300 	mov.w	r3, #0
 8000450:	e00a      	b.n	8000468 <__aeabi_l2f+0x14>
 8000452:	bf00      	nop

08000454 <__aeabi_l2f>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000460:	d502      	bpl.n	8000468 <__aeabi_l2f+0x14>
 8000462:	4240      	negs	r0, r0
 8000464:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000468:	ea5f 0c01 	movs.w	ip, r1
 800046c:	bf02      	ittt	eq
 800046e:	4684      	moveq	ip, r0
 8000470:	4601      	moveq	r1, r0
 8000472:	2000      	moveq	r0, #0
 8000474:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000478:	bf08      	it	eq
 800047a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800047e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000482:	fabc f28c 	clz	r2, ip
 8000486:	3a08      	subs	r2, #8
 8000488:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800048c:	db10      	blt.n	80004b0 <__aeabi_l2f+0x5c>
 800048e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000492:	4463      	add	r3, ip
 8000494:	fa00 fc02 	lsl.w	ip, r0, r2
 8000498:	f1c2 0220 	rsb	r2, r2, #32
 800049c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004a0:	fa20 f202 	lsr.w	r2, r0, r2
 80004a4:	eb43 0002 	adc.w	r0, r3, r2
 80004a8:	bf08      	it	eq
 80004aa:	f020 0001 	biceq.w	r0, r0, #1
 80004ae:	4770      	bx	lr
 80004b0:	f102 0220 	add.w	r2, r2, #32
 80004b4:	fa01 fc02 	lsl.w	ip, r1, r2
 80004b8:	f1c2 0220 	rsb	r2, r2, #32
 80004bc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004c0:	fa21 f202 	lsr.w	r2, r1, r2
 80004c4:	eb43 0002 	adc.w	r0, r3, r2
 80004c8:	bf08      	it	eq
 80004ca:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004ce:	4770      	bx	lr

080004d0 <__gesf2>:
 80004d0:	f04f 3cff 	mov.w	ip, #4294967295
 80004d4:	e006      	b.n	80004e4 <__cmpsf2+0x4>
 80004d6:	bf00      	nop

080004d8 <__lesf2>:
 80004d8:	f04f 0c01 	mov.w	ip, #1
 80004dc:	e002      	b.n	80004e4 <__cmpsf2+0x4>
 80004de:	bf00      	nop

080004e0 <__cmpsf2>:
 80004e0:	f04f 0c01 	mov.w	ip, #1
 80004e4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80004e8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80004ec:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80004f0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80004f4:	bf18      	it	ne
 80004f6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80004fa:	d011      	beq.n	8000520 <__cmpsf2+0x40>
 80004fc:	b001      	add	sp, #4
 80004fe:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000502:	bf18      	it	ne
 8000504:	ea90 0f01 	teqne	r0, r1
 8000508:	bf58      	it	pl
 800050a:	ebb2 0003 	subspl.w	r0, r2, r3
 800050e:	bf88      	it	hi
 8000510:	17c8      	asrhi	r0, r1, #31
 8000512:	bf38      	it	cc
 8000514:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000518:	bf18      	it	ne
 800051a:	f040 0001 	orrne.w	r0, r0, #1
 800051e:	4770      	bx	lr
 8000520:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000524:	d102      	bne.n	800052c <__cmpsf2+0x4c>
 8000526:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800052a:	d105      	bne.n	8000538 <__cmpsf2+0x58>
 800052c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000530:	d1e4      	bne.n	80004fc <__cmpsf2+0x1c>
 8000532:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000536:	d0e1      	beq.n	80004fc <__cmpsf2+0x1c>
 8000538:	f85d 0b04 	ldr.w	r0, [sp], #4
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <__aeabi_cfrcmple>:
 8000540:	4684      	mov	ip, r0
 8000542:	4608      	mov	r0, r1
 8000544:	4661      	mov	r1, ip
 8000546:	e7ff      	b.n	8000548 <__aeabi_cfcmpeq>

08000548 <__aeabi_cfcmpeq>:
 8000548:	b50f      	push	{r0, r1, r2, r3, lr}
 800054a:	f7ff ffc9 	bl	80004e0 <__cmpsf2>
 800054e:	2800      	cmp	r0, #0
 8000550:	bf48      	it	mi
 8000552:	f110 0f00 	cmnmi.w	r0, #0
 8000556:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000558 <__aeabi_fcmpeq>:
 8000558:	f84d ed08 	str.w	lr, [sp, #-8]!
 800055c:	f7ff fff4 	bl	8000548 <__aeabi_cfcmpeq>
 8000560:	bf0c      	ite	eq
 8000562:	2001      	moveq	r0, #1
 8000564:	2000      	movne	r0, #0
 8000566:	f85d fb08 	ldr.w	pc, [sp], #8
 800056a:	bf00      	nop

0800056c <__aeabi_fcmplt>:
 800056c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000570:	f7ff ffea 	bl	8000548 <__aeabi_cfcmpeq>
 8000574:	bf34      	ite	cc
 8000576:	2001      	movcc	r0, #1
 8000578:	2000      	movcs	r0, #0
 800057a:	f85d fb08 	ldr.w	pc, [sp], #8
 800057e:	bf00      	nop

08000580 <__aeabi_fcmple>:
 8000580:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000584:	f7ff ffe0 	bl	8000548 <__aeabi_cfcmpeq>
 8000588:	bf94      	ite	ls
 800058a:	2001      	movls	r0, #1
 800058c:	2000      	movhi	r0, #0
 800058e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000592:	bf00      	nop

08000594 <__aeabi_fcmpge>:
 8000594:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000598:	f7ff ffd2 	bl	8000540 <__aeabi_cfrcmple>
 800059c:	bf94      	ite	ls
 800059e:	2001      	movls	r0, #1
 80005a0:	2000      	movhi	r0, #0
 80005a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005a6:	bf00      	nop

080005a8 <__aeabi_fcmpgt>:
 80005a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005ac:	f7ff ffc8 	bl	8000540 <__aeabi_cfrcmple>
 80005b0:	bf34      	ite	cc
 80005b2:	2001      	movcc	r0, #1
 80005b4:	2000      	movcs	r0, #0
 80005b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005ba:	bf00      	nop

080005bc <__aeabi_f2uiz>:
 80005bc:	0042      	lsls	r2, r0, #1
 80005be:	d20e      	bcs.n	80005de <__aeabi_f2uiz+0x22>
 80005c0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80005c4:	d30b      	bcc.n	80005de <__aeabi_f2uiz+0x22>
 80005c6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80005ca:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80005ce:	d409      	bmi.n	80005e4 <__aeabi_f2uiz+0x28>
 80005d0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80005d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80005d8:	fa23 f002 	lsr.w	r0, r3, r2
 80005dc:	4770      	bx	lr
 80005de:	f04f 0000 	mov.w	r0, #0
 80005e2:	4770      	bx	lr
 80005e4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80005e8:	d101      	bne.n	80005ee <__aeabi_f2uiz+0x32>
 80005ea:	0242      	lsls	r2, r0, #9
 80005ec:	d102      	bne.n	80005f4 <__aeabi_f2uiz+0x38>
 80005ee:	f04f 30ff 	mov.w	r0, #4294967295
 80005f2:	4770      	bx	lr
 80005f4:	f04f 0000 	mov.w	r0, #0
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <SetPinOut>:
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
	  HAL_GPIO_Init(dht11.DHT_port, &GPIO_InitStruct);
}

void SetPinOut(void){
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000602:	463b      	mov	r3, r7
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]

	  /*Configure GPIO pin*/
	  GPIO_InitStruct.Pin = dht11.DHT_pin;
 800060e:	4b0a      	ldr	r3, [pc, #40]	; (8000638 <SetPinOut+0x3c>)
 8000610:	889b      	ldrh	r3, [r3, #4]
 8000612:	603b      	str	r3, [r7, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000614:	2301      	movs	r3, #1
 8000616:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000618:	2301      	movs	r3, #1
 800061a:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061c:	2302      	movs	r3, #2
 800061e:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(dht11.DHT_port, &GPIO_InitStruct);
 8000620:	4b05      	ldr	r3, [pc, #20]	; (8000638 <SetPinOut+0x3c>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	463a      	mov	r2, r7
 8000626:	4611      	mov	r1, r2
 8000628:	4618      	mov	r0, r3
 800062a:	f002 fbb1 	bl	8002d90 <HAL_GPIO_Init>
}
 800062e:	bf00      	nop
 8000630:	3710      	adds	r7, #16
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	200000dc 	.word	0x200000dc

0800063c <WritePin>:

static void WritePin(uint8_t value){
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	4603      	mov	r3, r0
 8000644:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(dht11.DHT_port, dht11.DHT_pin, value);
 8000646:	4b06      	ldr	r3, [pc, #24]	; (8000660 <WritePin+0x24>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4a05      	ldr	r2, [pc, #20]	; (8000660 <WritePin+0x24>)
 800064c:	8891      	ldrh	r1, [r2, #4]
 800064e:	79fa      	ldrb	r2, [r7, #7]
 8000650:	4618      	mov	r0, r3
 8000652:	f002 fd38 	bl	80030c6 <HAL_GPIO_WritePin>
}
 8000656:	bf00      	nop
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	200000dc 	.word	0x200000dc

08000664 <DHT_Init>:
static uint8_t ReadPin(void){
	return HAL_GPIO_ReadPin(dht11.DHT_port, dht11.DHT_pin);
}

//===========================HIGH LEVEL FUNCTION===========================//
void DHT_Init(GPIO_TypeDef* DHT_port, uint16_t DHT_pin, TIM_HandleTypeDef* timer){
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	60f8      	str	r0, [r7, #12]
 800066c:	460b      	mov	r3, r1
 800066e:	607a      	str	r2, [r7, #4]
 8000670:	817b      	strh	r3, [r7, #10]
	dht11.DHT_port = DHT_port;
 8000672:	4a0d      	ldr	r2, [pc, #52]	; (80006a8 <DHT_Init+0x44>)
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	6013      	str	r3, [r2, #0]
	dht11.DHT_pin = DHT_pin;
 8000678:	4a0b      	ldr	r2, [pc, #44]	; (80006a8 <DHT_Init+0x44>)
 800067a:	897b      	ldrh	r3, [r7, #10]
 800067c:	8093      	strh	r3, [r2, #4]
	dht11.timer = timer;
 800067e:	4a0a      	ldr	r2, [pc, #40]	; (80006a8 <DHT_Init+0x44>)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	6093      	str	r3, [r2, #8]

	dht11.humi = dht11.temp = 0;
 8000684:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <DHT_Init+0x44>)
 8000686:	f04f 0200 	mov.w	r2, #0
 800068a:	60da      	str	r2, [r3, #12]
 800068c:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <DHT_Init+0x44>)
 800068e:	68db      	ldr	r3, [r3, #12]
 8000690:	4a05      	ldr	r2, [pc, #20]	; (80006a8 <DHT_Init+0x44>)
 8000692:	6113      	str	r3, [r2, #16]

	SetPinOut();
 8000694:	f7ff ffb2 	bl	80005fc <SetPinOut>
//	SetPinIn();
	WritePin(0);
 8000698:	2000      	movs	r0, #0
 800069a:	f7ff ffcf 	bl	800063c <WritePin>
}
 800069e:	bf00      	nop
 80006a0:	3710      	adds	r7, #16
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	200000dc 	.word	0x200000dc

080006ac <DHT_Read>:


void DHT_Read(void){
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
//	if(check_sum != (humi_integral + humi_decimal + temp_integral + temp_decimal))
//		return 0;

//	dht11.humi = (float)( ((humi_integral << 8)|humi_decimal) / 10.0);
//	dht11.temp = (float)( ((temp_integral << 8)|temp_decimal) / 10.0);
}
 80006b2:	370c      	adds	r7, #12
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bc80      	pop	{r7}
 80006b8:	4770      	bx	lr
	...

080006bc <DHT_GetTemp>:

float DHT_GetTemp(void){
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
	return 30.3;
 80006c0:	4b02      	ldr	r3, [pc, #8]	; (80006cc <DHT_GetTemp+0x10>)
//	return dht11.temp;
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bc80      	pop	{r7}
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	41f26666 	.word	0x41f26666

080006d0 <DHT_GetHumi>:

float DHT_GetHumi(void){
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
	return 50.5;
 80006d4:	4b02      	ldr	r3, [pc, #8]	; (80006e0 <DHT_GetHumi+0x10>)
//	return dht11.humi;
}
 80006d6:	4618      	mov	r0, r3
 80006d8:	46bd      	mov	sp, r7
 80006da:	bc80      	pop	{r7}
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	424a0000 	.word	0x424a0000

080006e4 <BCD2DEC>:
#include "ds130x.h"


I2C_HandleTypeDef *i2c_ds;

uint8_t BCD2DEC(uint8_t bcd){
 80006e4:	b480      	push	{r7}
 80006e6:	b085      	sub	sp, #20
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	4603      	mov	r3, r0
 80006ec:	71fb      	strb	r3, [r7, #7]
	uint8_t low, high;
	low = bcd & 0x0F;
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	f003 030f 	and.w	r3, r3, #15
 80006f4:	73fb      	strb	r3, [r7, #15]
	high = (bcd >> 4) * 10;
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	091b      	lsrs	r3, r3, #4
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	461a      	mov	r2, r3
 80006fe:	0092      	lsls	r2, r2, #2
 8000700:	4413      	add	r3, r2
 8000702:	005b      	lsls	r3, r3, #1
 8000704:	73bb      	strb	r3, [r7, #14]

	return (low + high);
 8000706:	7bfa      	ldrb	r2, [r7, #15]
 8000708:	7bbb      	ldrb	r3, [r7, #14]
 800070a:	4413      	add	r3, r2
 800070c:	b2db      	uxtb	r3, r3
}
 800070e:	4618      	mov	r0, r3
 8000710:	3714      	adds	r7, #20
 8000712:	46bd      	mov	sp, r7
 8000714:	bc80      	pop	{r7}
 8000716:	4770      	bx	lr

08000718 <DS_Init>:
	high = (dec / 10) << 4;

	return (low + high);
}

void DS_Init(I2C_HandleTypeDef* hi2c){
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
	i2c_ds = hi2c;
 8000720:	4a03      	ldr	r2, [pc, #12]	; (8000730 <DS_Init+0x18>)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	6013      	str	r3, [r2, #0]
}
 8000726:	bf00      	nop
 8000728:	370c      	adds	r7, #12
 800072a:	46bd      	mov	sp, r7
 800072c:	bc80      	pop	{r7}
 800072e:	4770      	bx	lr
 8000730:	200000f0 	.word	0x200000f0

08000734 <DS_Write>:


void DS_Write(uint8_t address, uint8_t data){
 8000734:	b580      	push	{r7, lr}
 8000736:	b086      	sub	sp, #24
 8000738:	af02      	add	r7, sp, #8
 800073a:	4603      	mov	r3, r0
 800073c:	460a      	mov	r2, r1
 800073e:	71fb      	strb	r3, [r7, #7]
 8000740:	4613      	mov	r3, r2
 8000742:	71bb      	strb	r3, [r7, #6]
	uint8_t byte[2] = { address, data };
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	733b      	strb	r3, [r7, #12]
 8000748:	79bb      	ldrb	r3, [r7, #6]
 800074a:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(i2c_ds, ADDRESS_DS130X << 1, byte, 2, 1000);
 800074c:	4b07      	ldr	r3, [pc, #28]	; (800076c <DS_Write+0x38>)
 800074e:	6818      	ldr	r0, [r3, #0]
 8000750:	f107 020c 	add.w	r2, r7, #12
 8000754:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000758:	9300      	str	r3, [sp, #0]
 800075a:	2302      	movs	r3, #2
 800075c:	21d0      	movs	r1, #208	; 0xd0
 800075e:	f002 fe0f 	bl	8003380 <HAL_I2C_Master_Transmit>
}
 8000762:	bf00      	nop
 8000764:	3710      	adds	r7, #16
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	200000f0 	.word	0x200000f0

08000770 <DS_Read>:

uint8_t DS_Read(uint8_t address){
 8000770:	b580      	push	{r7, lr}
 8000772:	b086      	sub	sp, #24
 8000774:	af02      	add	r7, sp, #8
 8000776:	4603      	mov	r3, r0
 8000778:	71fb      	strb	r3, [r7, #7]
	uint8_t value = 0;
 800077a:	2300      	movs	r3, #0
 800077c:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(i2c_ds, ADDRESS_DS130X << 1, &address, 1, 1000);
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <DS_Read+0x4c>)
 8000780:	6818      	ldr	r0, [r3, #0]
 8000782:	1dfa      	adds	r2, r7, #7
 8000784:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000788:	9300      	str	r3, [sp, #0]
 800078a:	2301      	movs	r3, #1
 800078c:	21d0      	movs	r1, #208	; 0xd0
 800078e:	f002 fdf7 	bl	8003380 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(i2c_ds, ADDRESS_DS130X << 1, &value, 1, 1000);
 8000792:	4b0a      	ldr	r3, [pc, #40]	; (80007bc <DS_Read+0x4c>)
 8000794:	6818      	ldr	r0, [r3, #0]
 8000796:	f107 020f 	add.w	r2, r7, #15
 800079a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800079e:	9300      	str	r3, [sp, #0]
 80007a0:	2301      	movs	r3, #1
 80007a2:	21d0      	movs	r1, #208	; 0xd0
 80007a4:	f002 feea 	bl	800357c <HAL_I2C_Master_Receive>

	return BCD2DEC(value);
 80007a8:	7bfb      	ldrb	r3, [r7, #15]
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff ff9a 	bl	80006e4 <BCD2DEC>
 80007b0:	4603      	mov	r3, r0
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3710      	adds	r7, #16
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	200000f0 	.word	0x200000f0

080007c0 <DS_SetupTimForFirstProgram>:

void DS_SetupTimForFirstProgram(void){
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
	if(DS_Read(ADDRESS_FIRST_PROGRAM) == 1) return;
 80007c4:	2025      	movs	r0, #37	; 0x25
 80007c6:	f7ff ffd3 	bl	8000770 <DS_Read>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b01      	cmp	r3, #1
 80007ce:	d02c      	beq.n	800082a <DS_SetupTimForFirstProgram+0x6a>

	DS_Write(ADDRESS_HOUR, 1);
 80007d0:	2101      	movs	r1, #1
 80007d2:	2002      	movs	r0, #2
 80007d4:	f7ff ffae 	bl	8000734 <DS_Write>
	DS_Write(ADDRESS_MINUTE, 1);
 80007d8:	2101      	movs	r1, #1
 80007da:	2001      	movs	r0, #1
 80007dc:	f7ff ffaa 	bl	8000734 <DS_Write>
	DS_Write(ADDRESS_SECOND, 1);
 80007e0:	2101      	movs	r1, #1
 80007e2:	2000      	movs	r0, #0
 80007e4:	f7ff ffa6 	bl	8000734 <DS_Write>

	DS_Write(ADDRESS_WEEK_DAY, 1);
 80007e8:	2101      	movs	r1, #1
 80007ea:	2003      	movs	r0, #3
 80007ec:	f7ff ffa2 	bl	8000734 <DS_Write>
	DS_Write(ADDRESS_DATE, 1);
 80007f0:	2101      	movs	r1, #1
 80007f2:	2004      	movs	r0, #4
 80007f4:	f7ff ff9e 	bl	8000734 <DS_Write>
	DS_Write(ADDRESS_MONTH, 1);
 80007f8:	2101      	movs	r1, #1
 80007fa:	2005      	movs	r0, #5
 80007fc:	f7ff ff9a 	bl	8000734 <DS_Write>
	DS_Write(ADDRESS_YEAR, 1);
 8000800:	2101      	movs	r1, #1
 8000802:	2006      	movs	r0, #6
 8000804:	f7ff ff96 	bl	8000734 <DS_Write>

	DS_Write(ADDRESS_HOUR_ALARM, 1);
 8000808:	2101      	movs	r1, #1
 800080a:	2026      	movs	r0, #38	; 0x26
 800080c:	f7ff ff92 	bl	8000734 <DS_Write>
	DS_Write(ADDRESS_MIN_ALARM, 1);
 8000810:	2101      	movs	r1, #1
 8000812:	2027      	movs	r0, #39	; 0x27
 8000814:	f7ff ff8e 	bl	8000734 <DS_Write>
	DS_Write(ADDRESS_FLAG_ALARM, 0);
 8000818:	2100      	movs	r1, #0
 800081a:	2028      	movs	r0, #40	; 0x28
 800081c:	f7ff ff8a 	bl	8000734 <DS_Write>

	DS_Write(ADDRESS_FIRST_PROGRAM, 1);
 8000820:	2101      	movs	r1, #1
 8000822:	2025      	movs	r0, #37	; 0x25
 8000824:	f7ff ff86 	bl	8000734 <DS_Write>
 8000828:	e000      	b.n	800082c <DS_SetupTimForFirstProgram+0x6c>
	if(DS_Read(ADDRESS_FIRST_PROGRAM) == 1) return;
 800082a:	bf00      	nop

}
 800082c:	bd80      	pop	{r7, pc}
	...

08000830 <ReadTimeDs1307>:

#include "fsm.h"

uint8_t mode_sys;

void ReadTimeDs1307(void){
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
	_data_sys.hour = DS_Read(ADDRESS_HOUR);
 8000834:	2002      	movs	r0, #2
 8000836:	f7ff ff9b 	bl	8000770 <DS_Read>
 800083a:	4603      	mov	r3, r0
 800083c:	461a      	mov	r2, r3
 800083e:	4b21      	ldr	r3, [pc, #132]	; (80008c4 <ReadTimeDs1307+0x94>)
 8000840:	701a      	strb	r2, [r3, #0]
	_data_sys.min = DS_Read(ADDRESS_MINUTE);
 8000842:	2001      	movs	r0, #1
 8000844:	f7ff ff94 	bl	8000770 <DS_Read>
 8000848:	4603      	mov	r3, r0
 800084a:	461a      	mov	r2, r3
 800084c:	4b1d      	ldr	r3, [pc, #116]	; (80008c4 <ReadTimeDs1307+0x94>)
 800084e:	705a      	strb	r2, [r3, #1]
	_data_sys.sec = DS_Read(ADDRESS_SECOND);
 8000850:	2000      	movs	r0, #0
 8000852:	f7ff ff8d 	bl	8000770 <DS_Read>
 8000856:	4603      	mov	r3, r0
 8000858:	461a      	mov	r2, r3
 800085a:	4b1a      	ldr	r3, [pc, #104]	; (80008c4 <ReadTimeDs1307+0x94>)
 800085c:	709a      	strb	r2, [r3, #2]
	_data_sys.week_day = DS_Read(ADDRESS_WEEK_DAY);
 800085e:	2003      	movs	r0, #3
 8000860:	f7ff ff86 	bl	8000770 <DS_Read>
 8000864:	4603      	mov	r3, r0
 8000866:	461a      	mov	r2, r3
 8000868:	4b16      	ldr	r3, [pc, #88]	; (80008c4 <ReadTimeDs1307+0x94>)
 800086a:	719a      	strb	r2, [r3, #6]
	_data_sys.day = DS_Read(ADDRESS_DATE);
 800086c:	2004      	movs	r0, #4
 800086e:	f7ff ff7f 	bl	8000770 <DS_Read>
 8000872:	4603      	mov	r3, r0
 8000874:	461a      	mov	r2, r3
 8000876:	4b13      	ldr	r3, [pc, #76]	; (80008c4 <ReadTimeDs1307+0x94>)
 8000878:	715a      	strb	r2, [r3, #5]
	_data_sys.month = DS_Read(ADDRESS_MONTH);
 800087a:	2005      	movs	r0, #5
 800087c:	f7ff ff78 	bl	8000770 <DS_Read>
 8000880:	4603      	mov	r3, r0
 8000882:	461a      	mov	r2, r3
 8000884:	4b0f      	ldr	r3, [pc, #60]	; (80008c4 <ReadTimeDs1307+0x94>)
 8000886:	711a      	strb	r2, [r3, #4]
	_data_sys.year = DS_Read(ADDRESS_YEAR);
 8000888:	2006      	movs	r0, #6
 800088a:	f7ff ff71 	bl	8000770 <DS_Read>
 800088e:	4603      	mov	r3, r0
 8000890:	461a      	mov	r2, r3
 8000892:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <ReadTimeDs1307+0x94>)
 8000894:	70da      	strb	r2, [r3, #3]

	_data_sys.alarm_hour = DS_Read(ADDRESS_HOUR_ALARM);
 8000896:	2026      	movs	r0, #38	; 0x26
 8000898:	f7ff ff6a 	bl	8000770 <DS_Read>
 800089c:	4603      	mov	r3, r0
 800089e:	461a      	mov	r2, r3
 80008a0:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <ReadTimeDs1307+0x94>)
 80008a2:	71da      	strb	r2, [r3, #7]
	_data_sys.alarm_min = DS_Read(ADDRESS_MIN_ALARM);
 80008a4:	2027      	movs	r0, #39	; 0x27
 80008a6:	f7ff ff63 	bl	8000770 <DS_Read>
 80008aa:	4603      	mov	r3, r0
 80008ac:	461a      	mov	r2, r3
 80008ae:	4b05      	ldr	r3, [pc, #20]	; (80008c4 <ReadTimeDs1307+0x94>)
 80008b0:	721a      	strb	r2, [r3, #8]
	_data_sys.alarm_flag = DS_Read(ADDRESS_FLAG_ALARM);
 80008b2:	2028      	movs	r0, #40	; 0x28
 80008b4:	f7ff ff5c 	bl	8000770 <DS_Read>
 80008b8:	4603      	mov	r3, r0
 80008ba:	461a      	mov	r2, r3
 80008bc:	4b01      	ldr	r3, [pc, #4]	; (80008c4 <ReadTimeDs1307+0x94>)
 80008be:	725a      	strb	r2, [r3, #9]
}
 80008c0:	bf00      	nop
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	200000f8 	.word	0x200000f8

080008c8 <ConvertWeekdayToStr>:

char* ConvertWeekdayToStr(uint8_t x){
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	4603      	mov	r3, r0
 80008d0:	71fb      	strb	r3, [r7, #7]
	switch(x){
 80008d2:	79fb      	ldrb	r3, [r7, #7]
 80008d4:	3b01      	subs	r3, #1
 80008d6:	2b06      	cmp	r3, #6
 80008d8:	d81e      	bhi.n	8000918 <ConvertWeekdayToStr+0x50>
 80008da:	a201      	add	r2, pc, #4	; (adr r2, 80008e0 <ConvertWeekdayToStr+0x18>)
 80008dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008e0:	080008fd 	.word	0x080008fd
 80008e4:	08000901 	.word	0x08000901
 80008e8:	08000905 	.word	0x08000905
 80008ec:	08000909 	.word	0x08000909
 80008f0:	0800090d 	.word	0x0800090d
 80008f4:	08000911 	.word	0x08000911
 80008f8:	08000915 	.word	0x08000915
	case 1:
		return "MON";
 80008fc:	4b09      	ldr	r3, [pc, #36]	; (8000924 <ConvertWeekdayToStr+0x5c>)
 80008fe:	e00c      	b.n	800091a <ConvertWeekdayToStr+0x52>
		break;
	case 2:
		return "TUE";
 8000900:	4b09      	ldr	r3, [pc, #36]	; (8000928 <ConvertWeekdayToStr+0x60>)
 8000902:	e00a      	b.n	800091a <ConvertWeekdayToStr+0x52>
		break;
	case 3:
		return "WED";
 8000904:	4b09      	ldr	r3, [pc, #36]	; (800092c <ConvertWeekdayToStr+0x64>)
 8000906:	e008      	b.n	800091a <ConvertWeekdayToStr+0x52>
		break;
	case 4:
		return "THU";
 8000908:	4b09      	ldr	r3, [pc, #36]	; (8000930 <ConvertWeekdayToStr+0x68>)
 800090a:	e006      	b.n	800091a <ConvertWeekdayToStr+0x52>
		break;
	case 5:
		return "FRI";
 800090c:	4b09      	ldr	r3, [pc, #36]	; (8000934 <ConvertWeekdayToStr+0x6c>)
 800090e:	e004      	b.n	800091a <ConvertWeekdayToStr+0x52>
		break;
	case 6:
		return "SAT";
 8000910:	4b09      	ldr	r3, [pc, #36]	; (8000938 <ConvertWeekdayToStr+0x70>)
 8000912:	e002      	b.n	800091a <ConvertWeekdayToStr+0x52>
		break;
	case 7:
		return "SUN";
 8000914:	4b09      	ldr	r3, [pc, #36]	; (800093c <ConvertWeekdayToStr+0x74>)
 8000916:	e000      	b.n	800091a <ConvertWeekdayToStr+0x52>
		break;
	}
	return "";
 8000918:	4b09      	ldr	r3, [pc, #36]	; (8000940 <ConvertWeekdayToStr+0x78>)
}
 800091a:	4618      	mov	r0, r3
 800091c:	370c      	adds	r7, #12
 800091e:	46bd      	mov	sp, r7
 8000920:	bc80      	pop	{r7}
 8000922:	4770      	bx	lr
 8000924:	08006eec 	.word	0x08006eec
 8000928:	08006ef0 	.word	0x08006ef0
 800092c:	08006ef4 	.word	0x08006ef4
 8000930:	08006ef8 	.word	0x08006ef8
 8000934:	08006efc 	.word	0x08006efc
 8000938:	08006f00 	.word	0x08006f00
 800093c:	08006f04 	.word	0x08006f04
 8000940:	08006f08 	.word	0x08006f08

08000944 <FSM_Init>:


//===========================HIGH LEVEL FUNCTION===========================//
void FSM_Init(void){
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
	mode_sys = INIT;
 8000948:	4b04      	ldr	r3, [pc, #16]	; (800095c <FSM_Init+0x18>)
 800094a:	2200      	movs	r2, #0
 800094c:	701a      	strb	r2, [r3, #0]
	_time_screen = 50;
 800094e:	4b04      	ldr	r3, [pc, #16]	; (8000960 <FSM_Init+0x1c>)
 8000950:	2232      	movs	r2, #50	; 0x32
 8000952:	801a      	strh	r2, [r3, #0]
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	bc80      	pop	{r7}
 800095a:	4770      	bx	lr
 800095c:	200000f4 	.word	0x200000f4
 8000960:	2000010e 	.word	0x2000010e

08000964 <FSM_SystemControl>:

void FSM_SystemControl(void){
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
	switch(mode_sys){
 8000968:	4bc1      	ldr	r3, [pc, #772]	; (8000c70 <FSM_SystemControl+0x30c>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	2b0c      	cmp	r3, #12
 800096e:	f200 8663 	bhi.w	8001638 <FSM_SystemControl+0xcd4>
 8000972:	a201      	add	r2, pc, #4	; (adr r2, 8000978 <FSM_SystemControl+0x14>)
 8000974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000978:	080009ad 	.word	0x080009ad
 800097c:	080009f9 	.word	0x080009f9
 8000980:	08000b39 	.word	0x08000b39
 8000984:	08001639 	.word	0x08001639
 8000988:	08000ca9 	.word	0x08000ca9
 800098c:	08000db9 	.word	0x08000db9
 8000990:	08000ed5 	.word	0x08000ed5
 8000994:	0800105b 	.word	0x0800105b
 8000998:	080011a9 	.word	0x080011a9
 800099c:	0800131b 	.word	0x0800131b
 80009a0:	08001461 	.word	0x08001461
 80009a4:	080014f5 	.word	0x080014f5
 80009a8:	080015a3 	.word	0x080015a3
	case INIT:
		CLCD_PrintStringBuffer(0, 0, SCREEN_INIT_0);
 80009ac:	4ab1      	ldr	r2, [pc, #708]	; (8000c74 <FSM_SystemControl+0x310>)
 80009ae:	2100      	movs	r1, #0
 80009b0:	2000      	movs	r0, #0
 80009b2:	f001 f899 	bl	8001ae8 <CLCD_PrintStringBuffer>
		CLCD_PrintStringBuffer(1, 0, SCREEN_INIT_1);
 80009b6:	4ab0      	ldr	r2, [pc, #704]	; (8000c78 <FSM_SystemControl+0x314>)
 80009b8:	2100      	movs	r1, #0
 80009ba:	2001      	movs	r0, #1
 80009bc:	f001 f894 	bl	8001ae8 <CLCD_PrintStringBuffer>

		DS_SetupTimForFirstProgram();
 80009c0:	f7ff fefe 	bl	80007c0 <DS_SetupTimForFirstProgram>

		if(_time_screen < 5){
 80009c4:	4bad      	ldr	r3, [pc, #692]	; (8000c7c <FSM_SystemControl+0x318>)
 80009c6:	881b      	ldrh	r3, [r3, #0]
 80009c8:	2b04      	cmp	r3, #4
 80009ca:	f200 861e 	bhi.w	800160a <FSM_SystemControl+0xca6>
			_time_screen = TIME_SCREEN_TIME;
 80009ce:	4bab      	ldr	r3, [pc, #684]	; (8000c7c <FSM_SystemControl+0x318>)
 80009d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009d4:	801a      	strh	r2, [r3, #0]

			CLCD_PrintStringBuffer(0, 0, SCREEN_TIME_0);
 80009d6:	4aaa      	ldr	r2, [pc, #680]	; (8000c80 <FSM_SystemControl+0x31c>)
 80009d8:	2100      	movs	r1, #0
 80009da:	2000      	movs	r0, #0
 80009dc:	f001 f884 	bl	8001ae8 <CLCD_PrintStringBuffer>
			CLCD_PrintStringBuffer(1, 0, SCREEN_TIME_1);
 80009e0:	4aa7      	ldr	r2, [pc, #668]	; (8000c80 <FSM_SystemControl+0x31c>)
 80009e2:	2100      	movs	r1, #0
 80009e4:	2001      	movs	r0, #1
 80009e6:	f001 f87f 	bl	8001ae8 <CLCD_PrintStringBuffer>

			ReadTimeDs1307();
 80009ea:	f7ff ff21 	bl	8000830 <ReadTimeDs1307>
			mode_sys = DISPLAY_TIME;
 80009ee:	4ba0      	ldr	r3, [pc, #640]	; (8000c70 <FSM_SystemControl+0x30c>)
 80009f0:	2201      	movs	r2, #1
 80009f2:	701a      	strb	r2, [r3, #0]
		}
		break;
 80009f4:	f000 be09 	b.w	800160a <FSM_SystemControl+0xca6>
	case DISPLAY_TIME:
//		Blink COLON every 1000ms
		if(_counter_time_elapsed % 40 < 20){
 80009f8:	4ba2      	ldr	r3, [pc, #648]	; (8000c84 <FSM_SystemControl+0x320>)
 80009fa:	781a      	ldrb	r2, [r3, #0]
 80009fc:	4ba2      	ldr	r3, [pc, #648]	; (8000c88 <FSM_SystemControl+0x324>)
 80009fe:	fba3 1302 	umull	r1, r3, r3, r2
 8000a02:	0959      	lsrs	r1, r3, #5
 8000a04:	460b      	mov	r3, r1
 8000a06:	009b      	lsls	r3, r3, #2
 8000a08:	440b      	add	r3, r1
 8000a0a:	00db      	lsls	r3, r3, #3
 8000a0c:	1ad3      	subs	r3, r2, r3
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	2b13      	cmp	r3, #19
 8000a12:	d80a      	bhi.n	8000a2a <FSM_SystemControl+0xc6>
			CLCD_PrintCharBuffer(0, INDEX_COLON, '.');
 8000a14:	222e      	movs	r2, #46	; 0x2e
 8000a16:	2106      	movs	r1, #6
 8000a18:	2000      	movs	r0, #0
 8000a1a:	f001 f829 	bl	8001a70 <CLCD_PrintCharBuffer>
			CLCD_PrintCharBuffer(1, INDEX_COLON, '.');
 8000a1e:	222e      	movs	r2, #46	; 0x2e
 8000a20:	2106      	movs	r1, #6
 8000a22:	2001      	movs	r0, #1
 8000a24:	f001 f824 	bl	8001a70 <CLCD_PrintCharBuffer>
 8000a28:	e009      	b.n	8000a3e <FSM_SystemControl+0xda>
		}
		else {
			CLCD_PrintCharBuffer(0, INDEX_COLON, ' ');
 8000a2a:	2220      	movs	r2, #32
 8000a2c:	2106      	movs	r1, #6
 8000a2e:	2000      	movs	r0, #0
 8000a30:	f001 f81e 	bl	8001a70 <CLCD_PrintCharBuffer>
			CLCD_PrintCharBuffer(1, INDEX_COLON, ' ');
 8000a34:	2220      	movs	r2, #32
 8000a36:	2106      	movs	r1, #6
 8000a38:	2001      	movs	r0, #1
 8000a3a:	f001 f819 	bl	8001a70 <CLCD_PrintCharBuffer>
		}

//		Read time every 500ms
		if(_counter_time_elapsed % 10 == 0){
 8000a3e:	4b91      	ldr	r3, [pc, #580]	; (8000c84 <FSM_SystemControl+0x320>)
 8000a40:	781a      	ldrb	r2, [r3, #0]
 8000a42:	4b91      	ldr	r3, [pc, #580]	; (8000c88 <FSM_SystemControl+0x324>)
 8000a44:	fba3 1302 	umull	r1, r3, r3, r2
 8000a48:	08d9      	lsrs	r1, r3, #3
 8000a4a:	460b      	mov	r3, r1
 8000a4c:	009b      	lsls	r3, r3, #2
 8000a4e:	440b      	add	r3, r1
 8000a50:	005b      	lsls	r3, r3, #1
 8000a52:	1ad3      	subs	r3, r2, r3
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d101      	bne.n	8000a5e <FSM_SystemControl+0xfa>
			ReadTimeDs1307();
 8000a5a:	f7ff fee9 	bl	8000830 <ReadTimeDs1307>
		}

		CLCD_PrintBigNumBuffer(INDEX_LCD_HOUR, _data_sys.hour);
 8000a5e:	4b8b      	ldr	r3, [pc, #556]	; (8000c8c <FSM_SystemControl+0x328>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	b25b      	sxtb	r3, r3
 8000a64:	4619      	mov	r1, r3
 8000a66:	2000      	movs	r0, #0
 8000a68:	f001 fb4e 	bl	8002108 <CLCD_PrintBigNumBuffer>
		CLCD_PrintBigNumBuffer(INDEX_LCD_MIN, _data_sys.min);
 8000a6c:	4b87      	ldr	r3, [pc, #540]	; (8000c8c <FSM_SystemControl+0x328>)
 8000a6e:	785b      	ldrb	r3, [r3, #1]
 8000a70:	b25b      	sxtb	r3, r3
 8000a72:	4619      	mov	r1, r3
 8000a74:	2007      	movs	r0, #7
 8000a76:	f001 fb47 	bl	8002108 <CLCD_PrintBigNumBuffer>

		CLCD_PrintNumBuffer(1, INDEX_LCD_SEC, _data_sys.sec);
 8000a7a:	4b84      	ldr	r3, [pc, #528]	; (8000c8c <FSM_SystemControl+0x328>)
 8000a7c:	789b      	ldrb	r3, [r3, #2]
 8000a7e:	b21b      	sxth	r3, r3
 8000a80:	461a      	mov	r2, r3
 8000a82:	210e      	movs	r1, #14
 8000a84:	2001      	movs	r0, #1
 8000a86:	f001 f865 	bl	8001b54 <CLCD_PrintNumBuffer>

//		Stick 1500ms
		if(IN_IsPressed_ms(BT_MODE, 1500)){
 8000a8a:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8000a8e:	2001      	movs	r0, #1
 8000a90:	f000 fe5a 	bl	8001748 <IN_IsPressed_ms>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d008      	beq.n	8000aac <FSM_SystemControl+0x148>
			_time_out_for_set = TIME_OUT_FOR_SET;
 8000a9a:	4b7d      	ldr	r3, [pc, #500]	; (8000c90 <FSM_SystemControl+0x32c>)
 8000a9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000aa0:	801a      	strh	r2, [r3, #0]
			mode_sys = SET_HOUR;
 8000aa2:	4b73      	ldr	r3, [pc, #460]	; (8000c70 <FSM_SystemControl+0x30c>)
 8000aa4:	2204      	movs	r2, #4
 8000aa6:	701a      	strb	r2, [r3, #0]
			CLCD_PrintStringBuffer(0, 0, SCREEN_DATE_DHT_0);
			CLCD_PrintStringBuffer(1, 0, SCREEN_DATE_DHT_1);
			CLCD_PrintCharBuffer(1, INDEX_CEL_SYMBOL, 0xDF);
			mode_sys = DISPLAY_DATE_DHT;
		}
		break;
 8000aa8:	f000 bdb1 	b.w	800160e <FSM_SystemControl+0xcaa>
		else if(IN_IsPressed_ms(BT_DEC, 1500) && IN_IsPressed_ms(BT_INC, 1500)){
 8000aac:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8000ab0:	2002      	movs	r0, #2
 8000ab2:	f000 fe49 	bl	8001748 <IN_IsPressed_ms>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d01a      	beq.n	8000af2 <FSM_SystemControl+0x18e>
 8000abc:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8000ac0:	2000      	movs	r0, #0
 8000ac2:	f000 fe41 	bl	8001748 <IN_IsPressed_ms>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d012      	beq.n	8000af2 <FSM_SystemControl+0x18e>
			_time_out_for_set = TIME_OUT_FOR_SET;
 8000acc:	4b70      	ldr	r3, [pc, #448]	; (8000c90 <FSM_SystemControl+0x32c>)
 8000ace:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ad2:	801a      	strh	r2, [r3, #0]
			CLCD_PrintStringBuffer(0, 0, SCREEN_CONFIRM_SET_ALARM_0);
 8000ad4:	4a6f      	ldr	r2, [pc, #444]	; (8000c94 <FSM_SystemControl+0x330>)
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	2000      	movs	r0, #0
 8000ada:	f001 f805 	bl	8001ae8 <CLCD_PrintStringBuffer>
			CLCD_PrintStringBuffer(1, 0, SCREEN_CONFIRM_SET_ALARM_1);
 8000ade:	4a6e      	ldr	r2, [pc, #440]	; (8000c98 <FSM_SystemControl+0x334>)
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	2001      	movs	r0, #1
 8000ae4:	f001 f800 	bl	8001ae8 <CLCD_PrintStringBuffer>
			mode_sys = SET_ALARM;
 8000ae8:	4b61      	ldr	r3, [pc, #388]	; (8000c70 <FSM_SystemControl+0x30c>)
 8000aea:	220a      	movs	r2, #10
 8000aec:	701a      	strb	r2, [r3, #0]
		break;
 8000aee:	f000 bd8e 	b.w	800160e <FSM_SystemControl+0xcaa>
		else if(_time_screen < 5 || IN_IsPressed(BT_MODE)){
 8000af2:	4b62      	ldr	r3, [pc, #392]	; (8000c7c <FSM_SystemControl+0x318>)
 8000af4:	881b      	ldrh	r3, [r3, #0]
 8000af6:	2b04      	cmp	r3, #4
 8000af8:	d906      	bls.n	8000b08 <FSM_SystemControl+0x1a4>
 8000afa:	2001      	movs	r0, #1
 8000afc:	f000 fe10 	bl	8001720 <IN_IsPressed>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	f000 8583 	beq.w	800160e <FSM_SystemControl+0xcaa>
			_time_screen = TIME_SCREEN_DATE;
 8000b08:	4b5c      	ldr	r3, [pc, #368]	; (8000c7c <FSM_SystemControl+0x318>)
 8000b0a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000b0e:	801a      	strh	r2, [r3, #0]
			CLCD_PrintStringBuffer(0, 0, SCREEN_DATE_DHT_0);
 8000b10:	4a62      	ldr	r2, [pc, #392]	; (8000c9c <FSM_SystemControl+0x338>)
 8000b12:	2100      	movs	r1, #0
 8000b14:	2000      	movs	r0, #0
 8000b16:	f000 ffe7 	bl	8001ae8 <CLCD_PrintStringBuffer>
			CLCD_PrintStringBuffer(1, 0, SCREEN_DATE_DHT_1);
 8000b1a:	4a61      	ldr	r2, [pc, #388]	; (8000ca0 <FSM_SystemControl+0x33c>)
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	2001      	movs	r0, #1
 8000b20:	f000 ffe2 	bl	8001ae8 <CLCD_PrintStringBuffer>
			CLCD_PrintCharBuffer(1, INDEX_CEL_SYMBOL, 0xDF);
 8000b24:	22df      	movs	r2, #223	; 0xdf
 8000b26:	2106      	movs	r1, #6
 8000b28:	2001      	movs	r0, #1
 8000b2a:	f000 ffa1 	bl	8001a70 <CLCD_PrintCharBuffer>
			mode_sys = DISPLAY_DATE_DHT;
 8000b2e:	4b50      	ldr	r3, [pc, #320]	; (8000c70 <FSM_SystemControl+0x30c>)
 8000b30:	2202      	movs	r2, #2
 8000b32:	701a      	strb	r2, [r3, #0]
		break;
 8000b34:	f000 bd6b 	b.w	800160e <FSM_SystemControl+0xcaa>
	case DISPLAY_DATE_DHT:

		CLCD_PrintStringBuffer(0, INDEX_LCD_WEEK_DAY, ConvertWeekdayToStr(_data_sys.week_day));
 8000b38:	4b54      	ldr	r3, [pc, #336]	; (8000c8c <FSM_SystemControl+0x328>)
 8000b3a:	799b      	ldrb	r3, [r3, #6]
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f7ff fec3 	bl	80008c8 <ConvertWeekdayToStr>
 8000b42:	4603      	mov	r3, r0
 8000b44:	461a      	mov	r2, r3
 8000b46:	2101      	movs	r1, #1
 8000b48:	2000      	movs	r0, #0
 8000b4a:	f000 ffcd 	bl	8001ae8 <CLCD_PrintStringBuffer>
		CLCD_PrintNumBuffer(0, INDEX_LCD_DAY, _data_sys.day);
 8000b4e:	4b4f      	ldr	r3, [pc, #316]	; (8000c8c <FSM_SystemControl+0x328>)
 8000b50:	795b      	ldrb	r3, [r3, #5]
 8000b52:	b21b      	sxth	r3, r3
 8000b54:	461a      	mov	r2, r3
 8000b56:	2105      	movs	r1, #5
 8000b58:	2000      	movs	r0, #0
 8000b5a:	f000 fffb 	bl	8001b54 <CLCD_PrintNumBuffer>
		CLCD_PrintNumBuffer(0, INDEX_LCD_MONTH, _data_sys.month);
 8000b5e:	4b4b      	ldr	r3, [pc, #300]	; (8000c8c <FSM_SystemControl+0x328>)
 8000b60:	791b      	ldrb	r3, [r3, #4]
 8000b62:	b21b      	sxth	r3, r3
 8000b64:	461a      	mov	r2, r3
 8000b66:	2108      	movs	r1, #8
 8000b68:	2000      	movs	r0, #0
 8000b6a:	f000 fff3 	bl	8001b54 <CLCD_PrintNumBuffer>
		CLCD_PrintNumBuffer(0, INDEX_LCD_YEAR, 2000 + _data_sys.year);
 8000b6e:	4b47      	ldr	r3, [pc, #284]	; (8000c8c <FSM_SystemControl+0x328>)
 8000b70:	78db      	ldrb	r3, [r3, #3]
 8000b72:	b29b      	uxth	r3, r3
 8000b74:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000b78:	b29b      	uxth	r3, r3
 8000b7a:	b21b      	sxth	r3, r3
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	210b      	movs	r1, #11
 8000b80:	2000      	movs	r0, #0
 8000b82:	f000 ffe7 	bl	8001b54 <CLCD_PrintNumBuffer>

		CLCD_PrintFloatBuffer(1, INDEX_LCD_TEMP, _data_sys.temp);
 8000b86:	4b41      	ldr	r3, [pc, #260]	; (8000c8c <FSM_SystemControl+0x328>)
 8000b88:	68db      	ldr	r3, [r3, #12]
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	2102      	movs	r1, #2
 8000b8e:	2001      	movs	r0, #1
 8000b90:	f001 f854 	bl	8001c3c <CLCD_PrintFloatBuffer>
		CLCD_PrintFloatBuffer(1, INDEX_LCD_HUMI, _data_sys.humid);
 8000b94:	4b3d      	ldr	r3, [pc, #244]	; (8000c8c <FSM_SystemControl+0x328>)
 8000b96:	691b      	ldr	r3, [r3, #16]
 8000b98:	461a      	mov	r2, r3
 8000b9a:	210a      	movs	r1, #10
 8000b9c:	2001      	movs	r0, #1
 8000b9e:	f001 f84d 	bl	8001c3c <CLCD_PrintFloatBuffer>

		if(_time_read_DHT < 5){
 8000ba2:	4b40      	ldr	r3, [pc, #256]	; (8000ca4 <FSM_SystemControl+0x340>)
 8000ba4:	881b      	ldrh	r3, [r3, #0]
 8000ba6:	2b04      	cmp	r3, #4
 8000ba8:	d80f      	bhi.n	8000bca <FSM_SystemControl+0x266>
			_time_read_DHT = TIME_READ_DHT;
 8000baa:	4b3e      	ldr	r3, [pc, #248]	; (8000ca4 <FSM_SystemControl+0x340>)
 8000bac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000bb0:	801a      	strh	r2, [r3, #0]
			DHT_Read();
 8000bb2:	f7ff fd7b 	bl	80006ac <DHT_Read>
			_data_sys.temp = DHT_GetTemp();
 8000bb6:	f7ff fd81 	bl	80006bc <DHT_GetTemp>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	4a33      	ldr	r2, [pc, #204]	; (8000c8c <FSM_SystemControl+0x328>)
 8000bbe:	60d3      	str	r3, [r2, #12]
			_data_sys.humid = DHT_GetHumi();
 8000bc0:	f7ff fd86 	bl	80006d0 <DHT_GetHumi>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	4a31      	ldr	r2, [pc, #196]	; (8000c8c <FSM_SystemControl+0x328>)
 8000bc8:	6113      	str	r3, [r2, #16]
		}

//		Stick 1500ms
		if(IN_IsPressed_ms(BT_MODE, 1500)){
 8000bca:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8000bce:	2001      	movs	r0, #1
 8000bd0:	f000 fdba 	bl	8001748 <IN_IsPressed_ms>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d008      	beq.n	8000bec <FSM_SystemControl+0x288>
			_time_out_for_set = TIME_OUT_FOR_SET;
 8000bda:	4b2d      	ldr	r3, [pc, #180]	; (8000c90 <FSM_SystemControl+0x32c>)
 8000bdc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000be0:	801a      	strh	r2, [r3, #0]
			mode_sys = SET_WEEKDAY;
 8000be2:	4b23      	ldr	r3, [pc, #140]	; (8000c70 <FSM_SystemControl+0x30c>)
 8000be4:	2206      	movs	r2, #6
 8000be6:	701a      	strb	r2, [r3, #0]
			CLCD_PrintStringBuffer(0, 0, SCREEN_TIME_0);
			CLCD_PrintStringBuffer(1, 0, SCREEN_TIME_1);

			mode_sys = DISPLAY_TIME;
		}
		break;
 8000be8:	f000 bd13 	b.w	8001612 <FSM_SystemControl+0xcae>
		else if(IN_IsPressed_ms(BT_DEC, 1500) && IN_IsPressed_ms(BT_INC, 1500)){
 8000bec:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8000bf0:	2002      	movs	r0, #2
 8000bf2:	f000 fda9 	bl	8001748 <IN_IsPressed_ms>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d01a      	beq.n	8000c32 <FSM_SystemControl+0x2ce>
 8000bfc:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8000c00:	2000      	movs	r0, #0
 8000c02:	f000 fda1 	bl	8001748 <IN_IsPressed_ms>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d012      	beq.n	8000c32 <FSM_SystemControl+0x2ce>
			_time_out_for_set = TIME_OUT_FOR_SET;
 8000c0c:	4b20      	ldr	r3, [pc, #128]	; (8000c90 <FSM_SystemControl+0x32c>)
 8000c0e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c12:	801a      	strh	r2, [r3, #0]
			CLCD_PrintStringBuffer(0, 0, SCREEN_CONFIRM_SET_ALARM_0);
 8000c14:	4a1f      	ldr	r2, [pc, #124]	; (8000c94 <FSM_SystemControl+0x330>)
 8000c16:	2100      	movs	r1, #0
 8000c18:	2000      	movs	r0, #0
 8000c1a:	f000 ff65 	bl	8001ae8 <CLCD_PrintStringBuffer>
			CLCD_PrintStringBuffer(1, 0, SCREEN_CONFIRM_SET_ALARM_1);
 8000c1e:	4a1e      	ldr	r2, [pc, #120]	; (8000c98 <FSM_SystemControl+0x334>)
 8000c20:	2100      	movs	r1, #0
 8000c22:	2001      	movs	r0, #1
 8000c24:	f000 ff60 	bl	8001ae8 <CLCD_PrintStringBuffer>
			mode_sys = SET_ALARM;
 8000c28:	4b11      	ldr	r3, [pc, #68]	; (8000c70 <FSM_SystemControl+0x30c>)
 8000c2a:	220a      	movs	r2, #10
 8000c2c:	701a      	strb	r2, [r3, #0]
		break;
 8000c2e:	f000 bcf0 	b.w	8001612 <FSM_SystemControl+0xcae>
		else if(_time_screen < 5 || IN_IsPressed(BT_MODE)){
 8000c32:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <FSM_SystemControl+0x318>)
 8000c34:	881b      	ldrh	r3, [r3, #0]
 8000c36:	2b04      	cmp	r3, #4
 8000c38:	d906      	bls.n	8000c48 <FSM_SystemControl+0x2e4>
 8000c3a:	2001      	movs	r0, #1
 8000c3c:	f000 fd70 	bl	8001720 <IN_IsPressed>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	f000 84e5 	beq.w	8001612 <FSM_SystemControl+0xcae>
			_time_screen = TIME_SCREEN_TIME;
 8000c48:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <FSM_SystemControl+0x318>)
 8000c4a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c4e:	801a      	strh	r2, [r3, #0]
			CLCD_PrintStringBuffer(0, 0, SCREEN_TIME_0);
 8000c50:	4a0b      	ldr	r2, [pc, #44]	; (8000c80 <FSM_SystemControl+0x31c>)
 8000c52:	2100      	movs	r1, #0
 8000c54:	2000      	movs	r0, #0
 8000c56:	f000 ff47 	bl	8001ae8 <CLCD_PrintStringBuffer>
			CLCD_PrintStringBuffer(1, 0, SCREEN_TIME_1);
 8000c5a:	4a09      	ldr	r2, [pc, #36]	; (8000c80 <FSM_SystemControl+0x31c>)
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	2001      	movs	r0, #1
 8000c60:	f000 ff42 	bl	8001ae8 <CLCD_PrintStringBuffer>
			mode_sys = DISPLAY_TIME;
 8000c64:	4b02      	ldr	r3, [pc, #8]	; (8000c70 <FSM_SystemControl+0x30c>)
 8000c66:	2201      	movs	r2, #1
 8000c68:	701a      	strb	r2, [r3, #0]
		break;
 8000c6a:	f000 bcd2 	b.w	8001612 <FSM_SystemControl+0xcae>
 8000c6e:	bf00      	nop
 8000c70:	200000f4 	.word	0x200000f4
 8000c74:	08006f0c 	.word	0x08006f0c
 8000c78:	08006f20 	.word	0x08006f20
 8000c7c:	2000010e 	.word	0x2000010e
 8000c80:	08006f34 	.word	0x08006f34
 8000c84:	2000010c 	.word	0x2000010c
 8000c88:	cccccccd 	.word	0xcccccccd
 8000c8c:	200000f8 	.word	0x200000f8
 8000c90:	20000112 	.word	0x20000112
 8000c94:	08006f48 	.word	0x08006f48
 8000c98:	08006f5c 	.word	0x08006f5c
 8000c9c:	08006f70 	.word	0x08006f70
 8000ca0:	08006f84 	.word	0x08006f84
 8000ca4:	20000110 	.word	0x20000110
	case SET_HOUR:
//		Blink BLink BLink :D
		if(_counter_time_elapsed % 20 < 10){
 8000ca8:	4bb0      	ldr	r3, [pc, #704]	; (8000f6c <FSM_SystemControl+0x608>)
 8000caa:	781a      	ldrb	r2, [r3, #0]
 8000cac:	4bb0      	ldr	r3, [pc, #704]	; (8000f70 <FSM_SystemControl+0x60c>)
 8000cae:	fba3 1302 	umull	r1, r3, r3, r2
 8000cb2:	0919      	lsrs	r1, r3, #4
 8000cb4:	460b      	mov	r3, r1
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	440b      	add	r3, r1
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	1ad3      	subs	r3, r2, r3
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	2b09      	cmp	r3, #9
 8000cc2:	d807      	bhi.n	8000cd4 <FSM_SystemControl+0x370>
			CLCD_PrintBigNumBuffer(INDEX_LCD_HOUR, _data_sys.hour);
 8000cc4:	4bab      	ldr	r3, [pc, #684]	; (8000f74 <FSM_SystemControl+0x610>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	b25b      	sxtb	r3, r3
 8000cca:	4619      	mov	r1, r3
 8000ccc:	2000      	movs	r0, #0
 8000cce:	f001 fa1b 	bl	8002108 <CLCD_PrintBigNumBuffer>
 8000cd2:	e003      	b.n	8000cdc <FSM_SystemControl+0x378>
		}
		else {
			CLCD_PrintBigNumBuffer(INDEX_LCD_HOUR, BIG_BLANK);
 8000cd4:	2164      	movs	r1, #100	; 0x64
 8000cd6:	2000      	movs	r0, #0
 8000cd8:	f001 fa16 	bl	8002108 <CLCD_PrintBigNumBuffer>
		}

//		Increase/Decrease 1 every 400ms
		if(IN_Stick(BT_INC) % 8 == 1){
 8000cdc:	2000      	movs	r0, #0
 8000cde:	f000 fd0f 	bl	8001700 <IN_Stick>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	f003 0307 	and.w	r3, r3, #7
 8000ce8:	b29b      	uxth	r3, r3
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d117      	bne.n	8000d1e <FSM_SystemControl+0x3ba>
			_time_out_for_set = TIME_OUT_FOR_SET;
 8000cee:	4ba2      	ldr	r3, [pc, #648]	; (8000f78 <FSM_SystemControl+0x614>)
 8000cf0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000cf4:	801a      	strh	r2, [r3, #0]
			_data_sys.hour = _data_sys.hour < 23 ? _data_sys.hour + 1 : 0;
 8000cf6:	4b9f      	ldr	r3, [pc, #636]	; (8000f74 <FSM_SystemControl+0x610>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	2b16      	cmp	r3, #22
 8000cfc:	d804      	bhi.n	8000d08 <FSM_SystemControl+0x3a4>
 8000cfe:	4b9d      	ldr	r3, [pc, #628]	; (8000f74 <FSM_SystemControl+0x610>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	3301      	adds	r3, #1
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	e000      	b.n	8000d0a <FSM_SystemControl+0x3a6>
 8000d08:	2300      	movs	r3, #0
 8000d0a:	4a9a      	ldr	r2, [pc, #616]	; (8000f74 <FSM_SystemControl+0x610>)
 8000d0c:	7013      	strb	r3, [r2, #0]
			CLCD_PrintBigNumBuffer(INDEX_LCD_HOUR, _data_sys.hour);
 8000d0e:	4b99      	ldr	r3, [pc, #612]	; (8000f74 <FSM_SystemControl+0x610>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	b25b      	sxtb	r3, r3
 8000d14:	4619      	mov	r1, r3
 8000d16:	2000      	movs	r0, #0
 8000d18:	f001 f9f6 	bl	8002108 <CLCD_PrintBigNumBuffer>
 8000d1c:	e018      	b.n	8000d50 <FSM_SystemControl+0x3ec>
		}
		else if(IN_Stick(BT_DEC) % 8 == 1){
 8000d1e:	2002      	movs	r0, #2
 8000d20:	f000 fcee 	bl	8001700 <IN_Stick>
 8000d24:	4603      	mov	r3, r0
 8000d26:	f003 0307 	and.w	r3, r3, #7
 8000d2a:	b29b      	uxth	r3, r3
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	d10f      	bne.n	8000d50 <FSM_SystemControl+0x3ec>
			_time_out_for_set = TIME_OUT_FOR_SET;
 8000d30:	4b91      	ldr	r3, [pc, #580]	; (8000f78 <FSM_SystemControl+0x614>)
 8000d32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d36:	801a      	strh	r2, [r3, #0]
			_data_sys.hour = _data_sys.hour > 0 ? _data_sys.hour - 1 : 23;
 8000d38:	4b8e      	ldr	r3, [pc, #568]	; (8000f74 <FSM_SystemControl+0x610>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d004      	beq.n	8000d4a <FSM_SystemControl+0x3e6>
 8000d40:	4b8c      	ldr	r3, [pc, #560]	; (8000f74 <FSM_SystemControl+0x610>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	3b01      	subs	r3, #1
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	e000      	b.n	8000d4c <FSM_SystemControl+0x3e8>
 8000d4a:	2317      	movs	r3, #23
 8000d4c:	4a89      	ldr	r2, [pc, #548]	; (8000f74 <FSM_SystemControl+0x610>)
 8000d4e:	7013      	strb	r3, [r2, #0]
//			CLCD_PrintBigNumBuffer(INDEX_LCD_HOUR, _data_sys.hour);
		}


		if(IN_IsPressed(BT_MODE)){
 8000d50:	2001      	movs	r0, #1
 8000d52:	f000 fce5 	bl	8001720 <IN_IsPressed>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d015      	beq.n	8000d88 <FSM_SystemControl+0x424>
			_time_out_for_set = TIME_OUT_FOR_SET;
 8000d5c:	4b86      	ldr	r3, [pc, #536]	; (8000f78 <FSM_SystemControl+0x614>)
 8000d5e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d62:	801a      	strh	r2, [r3, #0]
			DS_Write(ADDRESS_HOUR, _data_sys.hour);
 8000d64:	4b83      	ldr	r3, [pc, #524]	; (8000f74 <FSM_SystemControl+0x610>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	4619      	mov	r1, r3
 8000d6a:	2002      	movs	r0, #2
 8000d6c:	f7ff fce2 	bl	8000734 <DS_Write>
			CLCD_PrintBigNumBuffer(INDEX_LCD_HOUR, _data_sys.hour);
 8000d70:	4b80      	ldr	r3, [pc, #512]	; (8000f74 <FSM_SystemControl+0x610>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	b25b      	sxtb	r3, r3
 8000d76:	4619      	mov	r1, r3
 8000d78:	2000      	movs	r0, #0
 8000d7a:	f001 f9c5 	bl	8002108 <CLCD_PrintBigNumBuffer>
			mode_sys = SET_MIN;
 8000d7e:	4b7f      	ldr	r3, [pc, #508]	; (8000f7c <FSM_SystemControl+0x618>)
 8000d80:	2205      	movs	r2, #5
 8000d82:	701a      	strb	r2, [r3, #0]
			CLCD_PrintStringBuffer(1, 0, SCREEN_TIME_1);

			mode_sys = DISPLAY_TIME;
		}

		break;
 8000d84:	f000 bc47 	b.w	8001616 <FSM_SystemControl+0xcb2>
		else if(_time_out_for_set < 5){
 8000d88:	4b7b      	ldr	r3, [pc, #492]	; (8000f78 <FSM_SystemControl+0x614>)
 8000d8a:	881b      	ldrh	r3, [r3, #0]
 8000d8c:	2b04      	cmp	r3, #4
 8000d8e:	f200 8442 	bhi.w	8001616 <FSM_SystemControl+0xcb2>
			_time_screen = TIME_SCREEN_TIME;
 8000d92:	4b7b      	ldr	r3, [pc, #492]	; (8000f80 <FSM_SystemControl+0x61c>)
 8000d94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d98:	801a      	strh	r2, [r3, #0]
			CLCD_PrintStringBuffer(0, 0, SCREEN_TIME_0);
 8000d9a:	4a7a      	ldr	r2, [pc, #488]	; (8000f84 <FSM_SystemControl+0x620>)
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	2000      	movs	r0, #0
 8000da0:	f000 fea2 	bl	8001ae8 <CLCD_PrintStringBuffer>
			CLCD_PrintStringBuffer(1, 0, SCREEN_TIME_1);
 8000da4:	4a77      	ldr	r2, [pc, #476]	; (8000f84 <FSM_SystemControl+0x620>)
 8000da6:	2100      	movs	r1, #0
 8000da8:	2001      	movs	r0, #1
 8000daa:	f000 fe9d 	bl	8001ae8 <CLCD_PrintStringBuffer>
			mode_sys = DISPLAY_TIME;
 8000dae:	4b73      	ldr	r3, [pc, #460]	; (8000f7c <FSM_SystemControl+0x618>)
 8000db0:	2201      	movs	r2, #1
 8000db2:	701a      	strb	r2, [r3, #0]
		break;
 8000db4:	f000 bc2f 	b.w	8001616 <FSM_SystemControl+0xcb2>
	case SET_MIN:
//		Blink BLink BLink :D
		if(_counter_time_elapsed % 20 < 10){
 8000db8:	4b6c      	ldr	r3, [pc, #432]	; (8000f6c <FSM_SystemControl+0x608>)
 8000dba:	781a      	ldrb	r2, [r3, #0]
 8000dbc:	4b6c      	ldr	r3, [pc, #432]	; (8000f70 <FSM_SystemControl+0x60c>)
 8000dbe:	fba3 1302 	umull	r1, r3, r3, r2
 8000dc2:	0919      	lsrs	r1, r3, #4
 8000dc4:	460b      	mov	r3, r1
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	440b      	add	r3, r1
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	2b09      	cmp	r3, #9
 8000dd2:	d807      	bhi.n	8000de4 <FSM_SystemControl+0x480>
			CLCD_PrintBigNumBuffer(INDEX_LCD_MIN, _data_sys.min);
 8000dd4:	4b67      	ldr	r3, [pc, #412]	; (8000f74 <FSM_SystemControl+0x610>)
 8000dd6:	785b      	ldrb	r3, [r3, #1]
 8000dd8:	b25b      	sxtb	r3, r3
 8000dda:	4619      	mov	r1, r3
 8000ddc:	2007      	movs	r0, #7
 8000dde:	f001 f993 	bl	8002108 <CLCD_PrintBigNumBuffer>
 8000de2:	e003      	b.n	8000dec <FSM_SystemControl+0x488>
		}
		else {
			CLCD_PrintBigNumBuffer(INDEX_LCD_MIN, BIG_BLANK);
 8000de4:	2164      	movs	r1, #100	; 0x64
 8000de6:	2007      	movs	r0, #7
 8000de8:	f001 f98e 	bl	8002108 <CLCD_PrintBigNumBuffer>
		}

//		Increase/Decrease 1 every 500ms
		if(IN_Stick(BT_INC) % 10 == 1){
 8000dec:	2000      	movs	r0, #0
 8000dee:	f000 fc87 	bl	8001700 <IN_Stick>
 8000df2:	4603      	mov	r3, r0
 8000df4:	461a      	mov	r2, r3
 8000df6:	4b5e      	ldr	r3, [pc, #376]	; (8000f70 <FSM_SystemControl+0x60c>)
 8000df8:	fba3 1302 	umull	r1, r3, r3, r2
 8000dfc:	08d9      	lsrs	r1, r3, #3
 8000dfe:	460b      	mov	r3, r1
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	440b      	add	r3, r1
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	1ad3      	subs	r3, r2, r3
 8000e08:	b29b      	uxth	r3, r3
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d117      	bne.n	8000e3e <FSM_SystemControl+0x4da>
			_time_out_for_set = TIME_OUT_FOR_SET;
 8000e0e:	4b5a      	ldr	r3, [pc, #360]	; (8000f78 <FSM_SystemControl+0x614>)
 8000e10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e14:	801a      	strh	r2, [r3, #0]
			_data_sys.min = _data_sys.min < 59 ? _data_sys.min + 1 : 0;
 8000e16:	4b57      	ldr	r3, [pc, #348]	; (8000f74 <FSM_SystemControl+0x610>)
 8000e18:	785b      	ldrb	r3, [r3, #1]
 8000e1a:	2b3a      	cmp	r3, #58	; 0x3a
 8000e1c:	d804      	bhi.n	8000e28 <FSM_SystemControl+0x4c4>
 8000e1e:	4b55      	ldr	r3, [pc, #340]	; (8000f74 <FSM_SystemControl+0x610>)
 8000e20:	785b      	ldrb	r3, [r3, #1]
 8000e22:	3301      	adds	r3, #1
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	e000      	b.n	8000e2a <FSM_SystemControl+0x4c6>
 8000e28:	2300      	movs	r3, #0
 8000e2a:	4a52      	ldr	r2, [pc, #328]	; (8000f74 <FSM_SystemControl+0x610>)
 8000e2c:	7053      	strb	r3, [r2, #1]
			CLCD_PrintBigNumBuffer(INDEX_LCD_MIN, _data_sys.min);
 8000e2e:	4b51      	ldr	r3, [pc, #324]	; (8000f74 <FSM_SystemControl+0x610>)
 8000e30:	785b      	ldrb	r3, [r3, #1]
 8000e32:	b25b      	sxtb	r3, r3
 8000e34:	4619      	mov	r1, r3
 8000e36:	2007      	movs	r0, #7
 8000e38:	f001 f966 	bl	8002108 <CLCD_PrintBigNumBuffer>
 8000e3c:	e027      	b.n	8000e8e <FSM_SystemControl+0x52a>
		}
		else if(IN_Stick(BT_DEC) % 10 == 1){
 8000e3e:	2002      	movs	r0, #2
 8000e40:	f000 fc5e 	bl	8001700 <IN_Stick>
 8000e44:	4603      	mov	r3, r0
 8000e46:	461a      	mov	r2, r3
 8000e48:	4b49      	ldr	r3, [pc, #292]	; (8000f70 <FSM_SystemControl+0x60c>)
 8000e4a:	fba3 1302 	umull	r1, r3, r3, r2
 8000e4e:	08d9      	lsrs	r1, r3, #3
 8000e50:	460b      	mov	r3, r1
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	440b      	add	r3, r1
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	1ad3      	subs	r3, r2, r3
 8000e5a:	b29b      	uxth	r3, r3
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d116      	bne.n	8000e8e <FSM_SystemControl+0x52a>
			_time_out_for_set = TIME_OUT_FOR_SET;
 8000e60:	4b45      	ldr	r3, [pc, #276]	; (8000f78 <FSM_SystemControl+0x614>)
 8000e62:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e66:	801a      	strh	r2, [r3, #0]
			_data_sys.min = _data_sys.min > 0 ? _data_sys.min - 1 : 59;
 8000e68:	4b42      	ldr	r3, [pc, #264]	; (8000f74 <FSM_SystemControl+0x610>)
 8000e6a:	785b      	ldrb	r3, [r3, #1]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d004      	beq.n	8000e7a <FSM_SystemControl+0x516>
 8000e70:	4b40      	ldr	r3, [pc, #256]	; (8000f74 <FSM_SystemControl+0x610>)
 8000e72:	785b      	ldrb	r3, [r3, #1]
 8000e74:	3b01      	subs	r3, #1
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	e000      	b.n	8000e7c <FSM_SystemControl+0x518>
 8000e7a:	233b      	movs	r3, #59	; 0x3b
 8000e7c:	4a3d      	ldr	r2, [pc, #244]	; (8000f74 <FSM_SystemControl+0x610>)
 8000e7e:	7053      	strb	r3, [r2, #1]
			CLCD_PrintBigNumBuffer(INDEX_LCD_MIN, _data_sys.min);
 8000e80:	4b3c      	ldr	r3, [pc, #240]	; (8000f74 <FSM_SystemControl+0x610>)
 8000e82:	785b      	ldrb	r3, [r3, #1]
 8000e84:	b25b      	sxtb	r3, r3
 8000e86:	4619      	mov	r1, r3
 8000e88:	2007      	movs	r0, #7
 8000e8a:	f001 f93d 	bl	8002108 <CLCD_PrintBigNumBuffer>
		}

		if(_time_out_for_set < 5 || IN_IsPressed(BT_MODE)){
 8000e8e:	4b3a      	ldr	r3, [pc, #232]	; (8000f78 <FSM_SystemControl+0x614>)
 8000e90:	881b      	ldrh	r3, [r3, #0]
 8000e92:	2b04      	cmp	r3, #4
 8000e94:	d906      	bls.n	8000ea4 <FSM_SystemControl+0x540>
 8000e96:	2001      	movs	r0, #1
 8000e98:	f000 fc42 	bl	8001720 <IN_IsPressed>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	f000 83bb 	beq.w	800161a <FSM_SystemControl+0xcb6>
			_time_screen = TIME_SCREEN_TIME;
 8000ea4:	4b36      	ldr	r3, [pc, #216]	; (8000f80 <FSM_SystemControl+0x61c>)
 8000ea6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000eaa:	801a      	strh	r2, [r3, #0]

			DS_Write(ADDRESS_MINUTE, _data_sys.min);
 8000eac:	4b31      	ldr	r3, [pc, #196]	; (8000f74 <FSM_SystemControl+0x610>)
 8000eae:	785b      	ldrb	r3, [r3, #1]
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	2001      	movs	r0, #1
 8000eb4:	f7ff fc3e 	bl	8000734 <DS_Write>
			CLCD_PrintStringBuffer(0, 0, SCREEN_TIME_0);
 8000eb8:	4a32      	ldr	r2, [pc, #200]	; (8000f84 <FSM_SystemControl+0x620>)
 8000eba:	2100      	movs	r1, #0
 8000ebc:	2000      	movs	r0, #0
 8000ebe:	f000 fe13 	bl	8001ae8 <CLCD_PrintStringBuffer>
			CLCD_PrintStringBuffer(1, 0, SCREEN_TIME_1);
 8000ec2:	4a30      	ldr	r2, [pc, #192]	; (8000f84 <FSM_SystemControl+0x620>)
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	2001      	movs	r0, #1
 8000ec8:	f000 fe0e 	bl	8001ae8 <CLCD_PrintStringBuffer>

			mode_sys = DISPLAY_TIME;
 8000ecc:	4b2b      	ldr	r3, [pc, #172]	; (8000f7c <FSM_SystemControl+0x618>)
 8000ece:	2201      	movs	r2, #1
 8000ed0:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000ed2:	e3a2      	b.n	800161a <FSM_SystemControl+0xcb6>
	case SET_WEEKDAY:
//		Blink BLink BLink :D
		if(_counter_time_elapsed % 20 < 10){
 8000ed4:	4b25      	ldr	r3, [pc, #148]	; (8000f6c <FSM_SystemControl+0x608>)
 8000ed6:	781a      	ldrb	r2, [r3, #0]
 8000ed8:	4b25      	ldr	r3, [pc, #148]	; (8000f70 <FSM_SystemControl+0x60c>)
 8000eda:	fba3 1302 	umull	r1, r3, r3, r2
 8000ede:	0919      	lsrs	r1, r3, #4
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	440b      	add	r3, r1
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	2b09      	cmp	r3, #9
 8000eee:	d80b      	bhi.n	8000f08 <FSM_SystemControl+0x5a4>
			CLCD_PrintStringBuffer(0, INDEX_LCD_WEEK_DAY, ConvertWeekdayToStr(_data_sys.week_day));
 8000ef0:	4b20      	ldr	r3, [pc, #128]	; (8000f74 <FSM_SystemControl+0x610>)
 8000ef2:	799b      	ldrb	r3, [r3, #6]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff fce7 	bl	80008c8 <ConvertWeekdayToStr>
 8000efa:	4603      	mov	r3, r0
 8000efc:	461a      	mov	r2, r3
 8000efe:	2101      	movs	r1, #1
 8000f00:	2000      	movs	r0, #0
 8000f02:	f000 fdf1 	bl	8001ae8 <CLCD_PrintStringBuffer>
 8000f06:	e004      	b.n	8000f12 <FSM_SystemControl+0x5ae>
		}
		else {
			CLCD_PrintStringBuffer(0, INDEX_LCD_WEEK_DAY, "   ");
 8000f08:	4a1f      	ldr	r2, [pc, #124]	; (8000f88 <FSM_SystemControl+0x624>)
 8000f0a:	2101      	movs	r1, #1
 8000f0c:	2000      	movs	r0, #0
 8000f0e:	f000 fdeb 	bl	8001ae8 <CLCD_PrintStringBuffer>
		}

//		Increase/Decrease 1 every 500ms
		if(IN_Stick(BT_INC) % 10 == 1){
 8000f12:	2000      	movs	r0, #0
 8000f14:	f000 fbf4 	bl	8001700 <IN_Stick>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	4b14      	ldr	r3, [pc, #80]	; (8000f70 <FSM_SystemControl+0x60c>)
 8000f1e:	fba3 1302 	umull	r1, r3, r3, r2
 8000f22:	08d9      	lsrs	r1, r3, #3
 8000f24:	460b      	mov	r3, r1
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	440b      	add	r3, r1
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	b29b      	uxth	r3, r3
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d12b      	bne.n	8000f8c <FSM_SystemControl+0x628>
			_time_out_for_set = TIME_OUT_FOR_SET;
 8000f34:	4b10      	ldr	r3, [pc, #64]	; (8000f78 <FSM_SystemControl+0x614>)
 8000f36:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f3a:	801a      	strh	r2, [r3, #0]
			_data_sys.week_day = _data_sys.week_day < 7 ? _data_sys.week_day + 1 : 1;
 8000f3c:	4b0d      	ldr	r3, [pc, #52]	; (8000f74 <FSM_SystemControl+0x610>)
 8000f3e:	799b      	ldrb	r3, [r3, #6]
 8000f40:	2b06      	cmp	r3, #6
 8000f42:	d804      	bhi.n	8000f4e <FSM_SystemControl+0x5ea>
 8000f44:	4b0b      	ldr	r3, [pc, #44]	; (8000f74 <FSM_SystemControl+0x610>)
 8000f46:	799b      	ldrb	r3, [r3, #6]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	e000      	b.n	8000f50 <FSM_SystemControl+0x5ec>
 8000f4e:	2301      	movs	r3, #1
 8000f50:	4a08      	ldr	r2, [pc, #32]	; (8000f74 <FSM_SystemControl+0x610>)
 8000f52:	7193      	strb	r3, [r2, #6]
			CLCD_PrintStringBuffer(0, INDEX_LCD_WEEK_DAY, ConvertWeekdayToStr(_data_sys.week_day));
 8000f54:	4b07      	ldr	r3, [pc, #28]	; (8000f74 <FSM_SystemControl+0x610>)
 8000f56:	799b      	ldrb	r3, [r3, #6]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff fcb5 	bl	80008c8 <ConvertWeekdayToStr>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	461a      	mov	r2, r3
 8000f62:	2101      	movs	r1, #1
 8000f64:	2000      	movs	r0, #0
 8000f66:	f000 fdbf 	bl	8001ae8 <CLCD_PrintStringBuffer>
 8000f6a:	e03b      	b.n	8000fe4 <FSM_SystemControl+0x680>
 8000f6c:	2000010c 	.word	0x2000010c
 8000f70:	cccccccd 	.word	0xcccccccd
 8000f74:	200000f8 	.word	0x200000f8
 8000f78:	20000112 	.word	0x20000112
 8000f7c:	200000f4 	.word	0x200000f4
 8000f80:	2000010e 	.word	0x2000010e
 8000f84:	08006f34 	.word	0x08006f34
 8000f88:	08006f98 	.word	0x08006f98
		}
		else if(IN_Stick(BT_DEC) % 10 == 1){
 8000f8c:	2002      	movs	r0, #2
 8000f8e:	f000 fbb7 	bl	8001700 <IN_Stick>
 8000f92:	4603      	mov	r3, r0
 8000f94:	461a      	mov	r2, r3
 8000f96:	4ba7      	ldr	r3, [pc, #668]	; (8001234 <FSM_SystemControl+0x8d0>)
 8000f98:	fba3 1302 	umull	r1, r3, r3, r2
 8000f9c:	08d9      	lsrs	r1, r3, #3
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	440b      	add	r3, r1
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	1ad3      	subs	r3, r2, r3
 8000fa8:	b29b      	uxth	r3, r3
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d11a      	bne.n	8000fe4 <FSM_SystemControl+0x680>
			_time_out_for_set = TIME_OUT_FOR_SET;
 8000fae:	4ba2      	ldr	r3, [pc, #648]	; (8001238 <FSM_SystemControl+0x8d4>)
 8000fb0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fb4:	801a      	strh	r2, [r3, #0]
			_data_sys.week_day = _data_sys.week_day > 1 ? _data_sys.week_day - 1 : 7;
 8000fb6:	4ba1      	ldr	r3, [pc, #644]	; (800123c <FSM_SystemControl+0x8d8>)
 8000fb8:	799b      	ldrb	r3, [r3, #6]
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d904      	bls.n	8000fc8 <FSM_SystemControl+0x664>
 8000fbe:	4b9f      	ldr	r3, [pc, #636]	; (800123c <FSM_SystemControl+0x8d8>)
 8000fc0:	799b      	ldrb	r3, [r3, #6]
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	e000      	b.n	8000fca <FSM_SystemControl+0x666>
 8000fc8:	2307      	movs	r3, #7
 8000fca:	4a9c      	ldr	r2, [pc, #624]	; (800123c <FSM_SystemControl+0x8d8>)
 8000fcc:	7193      	strb	r3, [r2, #6]
			CLCD_PrintStringBuffer(0, INDEX_LCD_WEEK_DAY, ConvertWeekdayToStr(_data_sys.week_day));
 8000fce:	4b9b      	ldr	r3, [pc, #620]	; (800123c <FSM_SystemControl+0x8d8>)
 8000fd0:	799b      	ldrb	r3, [r3, #6]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff fc78 	bl	80008c8 <ConvertWeekdayToStr>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	461a      	mov	r2, r3
 8000fdc:	2101      	movs	r1, #1
 8000fde:	2000      	movs	r0, #0
 8000fe0:	f000 fd82 	bl	8001ae8 <CLCD_PrintStringBuffer>
		}

		if(IN_IsPressed(BT_MODE)){
 8000fe4:	2001      	movs	r0, #1
 8000fe6:	f000 fb9b 	bl	8001720 <IN_IsPressed>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d018      	beq.n	8001022 <FSM_SystemControl+0x6be>
			_time_out_for_set = TIME_OUT_FOR_SET;
 8000ff0:	4b91      	ldr	r3, [pc, #580]	; (8001238 <FSM_SystemControl+0x8d4>)
 8000ff2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ff6:	801a      	strh	r2, [r3, #0]
			DS_Write(ADDRESS_WEEK_DAY, _data_sys.week_day);
 8000ff8:	4b90      	ldr	r3, [pc, #576]	; (800123c <FSM_SystemControl+0x8d8>)
 8000ffa:	799b      	ldrb	r3, [r3, #6]
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	2003      	movs	r0, #3
 8001000:	f7ff fb98 	bl	8000734 <DS_Write>
			CLCD_PrintStringBuffer(0, INDEX_LCD_WEEK_DAY, ConvertWeekdayToStr(_data_sys.week_day));
 8001004:	4b8d      	ldr	r3, [pc, #564]	; (800123c <FSM_SystemControl+0x8d8>)
 8001006:	799b      	ldrb	r3, [r3, #6]
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff fc5d 	bl	80008c8 <ConvertWeekdayToStr>
 800100e:	4603      	mov	r3, r0
 8001010:	461a      	mov	r2, r3
 8001012:	2101      	movs	r1, #1
 8001014:	2000      	movs	r0, #0
 8001016:	f000 fd67 	bl	8001ae8 <CLCD_PrintStringBuffer>
			mode_sys = SET_DAY;
 800101a:	4b89      	ldr	r3, [pc, #548]	; (8001240 <FSM_SystemControl+0x8dc>)
 800101c:	2207      	movs	r2, #7
 800101e:	701a      	strb	r2, [r3, #0]
			CLCD_PrintStringBuffer(1, 0, SCREEN_DATE_DHT_1);
			CLCD_PrintCharBuffer(1, INDEX_CEL_SYMBOL, 0xDF);
			mode_sys = DISPLAY_DATE_DHT;
		}

		break;
 8001020:	e2fd      	b.n	800161e <FSM_SystemControl+0xcba>
		else if(_time_out_for_set < 5){
 8001022:	4b85      	ldr	r3, [pc, #532]	; (8001238 <FSM_SystemControl+0x8d4>)
 8001024:	881b      	ldrh	r3, [r3, #0]
 8001026:	2b04      	cmp	r3, #4
 8001028:	f200 82f9 	bhi.w	800161e <FSM_SystemControl+0xcba>
			_time_screen = TIME_SCREEN_DATE;
 800102c:	4b85      	ldr	r3, [pc, #532]	; (8001244 <FSM_SystemControl+0x8e0>)
 800102e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001032:	801a      	strh	r2, [r3, #0]
			CLCD_PrintStringBuffer(0, 0, SCREEN_DATE_DHT_0);
 8001034:	4a84      	ldr	r2, [pc, #528]	; (8001248 <FSM_SystemControl+0x8e4>)
 8001036:	2100      	movs	r1, #0
 8001038:	2000      	movs	r0, #0
 800103a:	f000 fd55 	bl	8001ae8 <CLCD_PrintStringBuffer>
			CLCD_PrintStringBuffer(1, 0, SCREEN_DATE_DHT_1);
 800103e:	4a83      	ldr	r2, [pc, #524]	; (800124c <FSM_SystemControl+0x8e8>)
 8001040:	2100      	movs	r1, #0
 8001042:	2001      	movs	r0, #1
 8001044:	f000 fd50 	bl	8001ae8 <CLCD_PrintStringBuffer>
			CLCD_PrintCharBuffer(1, INDEX_CEL_SYMBOL, 0xDF);
 8001048:	22df      	movs	r2, #223	; 0xdf
 800104a:	2106      	movs	r1, #6
 800104c:	2001      	movs	r0, #1
 800104e:	f000 fd0f 	bl	8001a70 <CLCD_PrintCharBuffer>
			mode_sys = DISPLAY_DATE_DHT;
 8001052:	4b7b      	ldr	r3, [pc, #492]	; (8001240 <FSM_SystemControl+0x8dc>)
 8001054:	2202      	movs	r2, #2
 8001056:	701a      	strb	r2, [r3, #0]
		break;
 8001058:	e2e1      	b.n	800161e <FSM_SystemControl+0xcba>
	case SET_DAY:
//		Blink BLink BLink :D
		if(_counter_time_elapsed % 20 < 10){
 800105a:	4b7d      	ldr	r3, [pc, #500]	; (8001250 <FSM_SystemControl+0x8ec>)
 800105c:	781a      	ldrb	r2, [r3, #0]
 800105e:	4b75      	ldr	r3, [pc, #468]	; (8001234 <FSM_SystemControl+0x8d0>)
 8001060:	fba3 1302 	umull	r1, r3, r3, r2
 8001064:	0919      	lsrs	r1, r3, #4
 8001066:	460b      	mov	r3, r1
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	440b      	add	r3, r1
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	1ad3      	subs	r3, r2, r3
 8001070:	b2db      	uxtb	r3, r3
 8001072:	2b09      	cmp	r3, #9
 8001074:	d808      	bhi.n	8001088 <FSM_SystemControl+0x724>
			CLCD_PrintNumBuffer(0, INDEX_LCD_DAY, _data_sys.day);
 8001076:	4b71      	ldr	r3, [pc, #452]	; (800123c <FSM_SystemControl+0x8d8>)
 8001078:	795b      	ldrb	r3, [r3, #5]
 800107a:	b21b      	sxth	r3, r3
 800107c:	461a      	mov	r2, r3
 800107e:	2105      	movs	r1, #5
 8001080:	2000      	movs	r0, #0
 8001082:	f000 fd67 	bl	8001b54 <CLCD_PrintNumBuffer>
 8001086:	e004      	b.n	8001092 <FSM_SystemControl+0x72e>
		}
		else {
			CLCD_PrintStringBuffer(0, INDEX_LCD_DAY, "  ");
 8001088:	4a72      	ldr	r2, [pc, #456]	; (8001254 <FSM_SystemControl+0x8f0>)
 800108a:	2105      	movs	r1, #5
 800108c:	2000      	movs	r0, #0
 800108e:	f000 fd2b 	bl	8001ae8 <CLCD_PrintStringBuffer>
		}

//		Increase/Decrease 1 every 500ms
		if(IN_Stick(BT_INC) % 10 == 1){
 8001092:	2000      	movs	r0, #0
 8001094:	f000 fb34 	bl	8001700 <IN_Stick>
 8001098:	4603      	mov	r3, r0
 800109a:	461a      	mov	r2, r3
 800109c:	4b65      	ldr	r3, [pc, #404]	; (8001234 <FSM_SystemControl+0x8d0>)
 800109e:	fba3 1302 	umull	r1, r3, r3, r2
 80010a2:	08d9      	lsrs	r1, r3, #3
 80010a4:	460b      	mov	r3, r1
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	440b      	add	r3, r1
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	b29b      	uxth	r3, r3
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d118      	bne.n	80010e6 <FSM_SystemControl+0x782>
			_time_out_for_set = TIME_OUT_FOR_SET;
 80010b4:	4b60      	ldr	r3, [pc, #384]	; (8001238 <FSM_SystemControl+0x8d4>)
 80010b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010ba:	801a      	strh	r2, [r3, #0]
			_data_sys.day = _data_sys.day < 31 ? _data_sys.day + 1 : 1;
 80010bc:	4b5f      	ldr	r3, [pc, #380]	; (800123c <FSM_SystemControl+0x8d8>)
 80010be:	795b      	ldrb	r3, [r3, #5]
 80010c0:	2b1e      	cmp	r3, #30
 80010c2:	d804      	bhi.n	80010ce <FSM_SystemControl+0x76a>
 80010c4:	4b5d      	ldr	r3, [pc, #372]	; (800123c <FSM_SystemControl+0x8d8>)
 80010c6:	795b      	ldrb	r3, [r3, #5]
 80010c8:	3301      	adds	r3, #1
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	e000      	b.n	80010d0 <FSM_SystemControl+0x76c>
 80010ce:	2301      	movs	r3, #1
 80010d0:	4a5a      	ldr	r2, [pc, #360]	; (800123c <FSM_SystemControl+0x8d8>)
 80010d2:	7153      	strb	r3, [r2, #5]
			CLCD_PrintNumBuffer(0, INDEX_LCD_DAY, _data_sys.day);
 80010d4:	4b59      	ldr	r3, [pc, #356]	; (800123c <FSM_SystemControl+0x8d8>)
 80010d6:	795b      	ldrb	r3, [r3, #5]
 80010d8:	b21b      	sxth	r3, r3
 80010da:	461a      	mov	r2, r3
 80010dc:	2105      	movs	r1, #5
 80010de:	2000      	movs	r0, #0
 80010e0:	f000 fd38 	bl	8001b54 <CLCD_PrintNumBuffer>
 80010e4:	e028      	b.n	8001138 <FSM_SystemControl+0x7d4>
		}
		else if(IN_Stick(BT_DEC) % 10 == 1){
 80010e6:	2002      	movs	r0, #2
 80010e8:	f000 fb0a 	bl	8001700 <IN_Stick>
 80010ec:	4603      	mov	r3, r0
 80010ee:	461a      	mov	r2, r3
 80010f0:	4b50      	ldr	r3, [pc, #320]	; (8001234 <FSM_SystemControl+0x8d0>)
 80010f2:	fba3 1302 	umull	r1, r3, r3, r2
 80010f6:	08d9      	lsrs	r1, r3, #3
 80010f8:	460b      	mov	r3, r1
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	440b      	add	r3, r1
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	b29b      	uxth	r3, r3
 8001104:	2b01      	cmp	r3, #1
 8001106:	d117      	bne.n	8001138 <FSM_SystemControl+0x7d4>
			_time_out_for_set = TIME_OUT_FOR_SET;
 8001108:	4b4b      	ldr	r3, [pc, #300]	; (8001238 <FSM_SystemControl+0x8d4>)
 800110a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800110e:	801a      	strh	r2, [r3, #0]
			_data_sys.day = _data_sys.day > 1 ? _data_sys.day - 1 : 31;
 8001110:	4b4a      	ldr	r3, [pc, #296]	; (800123c <FSM_SystemControl+0x8d8>)
 8001112:	795b      	ldrb	r3, [r3, #5]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d904      	bls.n	8001122 <FSM_SystemControl+0x7be>
 8001118:	4b48      	ldr	r3, [pc, #288]	; (800123c <FSM_SystemControl+0x8d8>)
 800111a:	795b      	ldrb	r3, [r3, #5]
 800111c:	3b01      	subs	r3, #1
 800111e:	b2db      	uxtb	r3, r3
 8001120:	e000      	b.n	8001124 <FSM_SystemControl+0x7c0>
 8001122:	231f      	movs	r3, #31
 8001124:	4a45      	ldr	r2, [pc, #276]	; (800123c <FSM_SystemControl+0x8d8>)
 8001126:	7153      	strb	r3, [r2, #5]
			CLCD_PrintNumBuffer(0, INDEX_LCD_DAY, _data_sys.day);
 8001128:	4b44      	ldr	r3, [pc, #272]	; (800123c <FSM_SystemControl+0x8d8>)
 800112a:	795b      	ldrb	r3, [r3, #5]
 800112c:	b21b      	sxth	r3, r3
 800112e:	461a      	mov	r2, r3
 8001130:	2105      	movs	r1, #5
 8001132:	2000      	movs	r0, #0
 8001134:	f000 fd0e 	bl	8001b54 <CLCD_PrintNumBuffer>
		}

		if(IN_IsPressed(BT_MODE)){
 8001138:	2001      	movs	r0, #1
 800113a:	f000 faf1 	bl	8001720 <IN_IsPressed>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d015      	beq.n	8001170 <FSM_SystemControl+0x80c>
			_time_out_for_set = TIME_OUT_FOR_SET;
 8001144:	4b3c      	ldr	r3, [pc, #240]	; (8001238 <FSM_SystemControl+0x8d4>)
 8001146:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800114a:	801a      	strh	r2, [r3, #0]
			DS_Write(ADDRESS_DATE, _data_sys.day);
 800114c:	4b3b      	ldr	r3, [pc, #236]	; (800123c <FSM_SystemControl+0x8d8>)
 800114e:	795b      	ldrb	r3, [r3, #5]
 8001150:	4619      	mov	r1, r3
 8001152:	2004      	movs	r0, #4
 8001154:	f7ff faee 	bl	8000734 <DS_Write>
			CLCD_PrintNumBuffer(0, INDEX_LCD_DAY, _data_sys.day);
 8001158:	4b38      	ldr	r3, [pc, #224]	; (800123c <FSM_SystemControl+0x8d8>)
 800115a:	795b      	ldrb	r3, [r3, #5]
 800115c:	b21b      	sxth	r3, r3
 800115e:	461a      	mov	r2, r3
 8001160:	2105      	movs	r1, #5
 8001162:	2000      	movs	r0, #0
 8001164:	f000 fcf6 	bl	8001b54 <CLCD_PrintNumBuffer>
			mode_sys = SET_MONTH;
 8001168:	4b35      	ldr	r3, [pc, #212]	; (8001240 <FSM_SystemControl+0x8dc>)
 800116a:	2208      	movs	r2, #8
 800116c:	701a      	strb	r2, [r3, #0]
			CLCD_PrintStringBuffer(0, 0, SCREEN_DATE_DHT_0);
			CLCD_PrintStringBuffer(1, 0, SCREEN_DATE_DHT_1);
			CLCD_PrintCharBuffer(1, INDEX_CEL_SYMBOL, 0xDF);
			mode_sys = DISPLAY_DATE_DHT;
		}
		break;
 800116e:	e258      	b.n	8001622 <FSM_SystemControl+0xcbe>
		else if(_time_out_for_set < 5){
 8001170:	4b31      	ldr	r3, [pc, #196]	; (8001238 <FSM_SystemControl+0x8d4>)
 8001172:	881b      	ldrh	r3, [r3, #0]
 8001174:	2b04      	cmp	r3, #4
 8001176:	f200 8254 	bhi.w	8001622 <FSM_SystemControl+0xcbe>
			_time_screen = TIME_SCREEN_DATE;
 800117a:	4b32      	ldr	r3, [pc, #200]	; (8001244 <FSM_SystemControl+0x8e0>)
 800117c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001180:	801a      	strh	r2, [r3, #0]
			CLCD_PrintStringBuffer(0, 0, SCREEN_DATE_DHT_0);
 8001182:	4a31      	ldr	r2, [pc, #196]	; (8001248 <FSM_SystemControl+0x8e4>)
 8001184:	2100      	movs	r1, #0
 8001186:	2000      	movs	r0, #0
 8001188:	f000 fcae 	bl	8001ae8 <CLCD_PrintStringBuffer>
			CLCD_PrintStringBuffer(1, 0, SCREEN_DATE_DHT_1);
 800118c:	4a2f      	ldr	r2, [pc, #188]	; (800124c <FSM_SystemControl+0x8e8>)
 800118e:	2100      	movs	r1, #0
 8001190:	2001      	movs	r0, #1
 8001192:	f000 fca9 	bl	8001ae8 <CLCD_PrintStringBuffer>
			CLCD_PrintCharBuffer(1, INDEX_CEL_SYMBOL, 0xDF);
 8001196:	22df      	movs	r2, #223	; 0xdf
 8001198:	2106      	movs	r1, #6
 800119a:	2001      	movs	r0, #1
 800119c:	f000 fc68 	bl	8001a70 <CLCD_PrintCharBuffer>
			mode_sys = DISPLAY_DATE_DHT;
 80011a0:	4b27      	ldr	r3, [pc, #156]	; (8001240 <FSM_SystemControl+0x8dc>)
 80011a2:	2202      	movs	r2, #2
 80011a4:	701a      	strb	r2, [r3, #0]
		break;
 80011a6:	e23c      	b.n	8001622 <FSM_SystemControl+0xcbe>
	case SET_MONTH:
//		Blink BLink BLink :D
		if(_counter_time_elapsed % 20 < 10){
 80011a8:	4b29      	ldr	r3, [pc, #164]	; (8001250 <FSM_SystemControl+0x8ec>)
 80011aa:	781a      	ldrb	r2, [r3, #0]
 80011ac:	4b21      	ldr	r3, [pc, #132]	; (8001234 <FSM_SystemControl+0x8d0>)
 80011ae:	fba3 1302 	umull	r1, r3, r3, r2
 80011b2:	0919      	lsrs	r1, r3, #4
 80011b4:	460b      	mov	r3, r1
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	440b      	add	r3, r1
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	2b09      	cmp	r3, #9
 80011c2:	d808      	bhi.n	80011d6 <FSM_SystemControl+0x872>
			CLCD_PrintNumBuffer(0, INDEX_LCD_MONTH, _data_sys.month);
 80011c4:	4b1d      	ldr	r3, [pc, #116]	; (800123c <FSM_SystemControl+0x8d8>)
 80011c6:	791b      	ldrb	r3, [r3, #4]
 80011c8:	b21b      	sxth	r3, r3
 80011ca:	461a      	mov	r2, r3
 80011cc:	2108      	movs	r1, #8
 80011ce:	2000      	movs	r0, #0
 80011d0:	f000 fcc0 	bl	8001b54 <CLCD_PrintNumBuffer>
 80011d4:	e004      	b.n	80011e0 <FSM_SystemControl+0x87c>
		}
		else {
			CLCD_PrintStringBuffer(0, INDEX_LCD_MONTH, "  ");
 80011d6:	4a1f      	ldr	r2, [pc, #124]	; (8001254 <FSM_SystemControl+0x8f0>)
 80011d8:	2108      	movs	r1, #8
 80011da:	2000      	movs	r0, #0
 80011dc:	f000 fc84 	bl	8001ae8 <CLCD_PrintStringBuffer>
		}

//		Increase/Decrease 1 every 500ms
		if(IN_Stick(BT_INC) % 10 == 1){
 80011e0:	2000      	movs	r0, #0
 80011e2:	f000 fa8d 	bl	8001700 <IN_Stick>
 80011e6:	4603      	mov	r3, r0
 80011e8:	461a      	mov	r2, r3
 80011ea:	4b12      	ldr	r3, [pc, #72]	; (8001234 <FSM_SystemControl+0x8d0>)
 80011ec:	fba3 1302 	umull	r1, r3, r3, r2
 80011f0:	08d9      	lsrs	r1, r3, #3
 80011f2:	460b      	mov	r3, r1
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	440b      	add	r3, r1
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d12a      	bne.n	8001258 <FSM_SystemControl+0x8f4>
			_time_out_for_set = TIME_OUT_FOR_SET;
 8001202:	4b0d      	ldr	r3, [pc, #52]	; (8001238 <FSM_SystemControl+0x8d4>)
 8001204:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001208:	801a      	strh	r2, [r3, #0]
			_data_sys.month = _data_sys.month < 12 ? _data_sys.month + 1 : 1;
 800120a:	4b0c      	ldr	r3, [pc, #48]	; (800123c <FSM_SystemControl+0x8d8>)
 800120c:	791b      	ldrb	r3, [r3, #4]
 800120e:	2b0b      	cmp	r3, #11
 8001210:	d804      	bhi.n	800121c <FSM_SystemControl+0x8b8>
 8001212:	4b0a      	ldr	r3, [pc, #40]	; (800123c <FSM_SystemControl+0x8d8>)
 8001214:	791b      	ldrb	r3, [r3, #4]
 8001216:	3301      	adds	r3, #1
 8001218:	b2db      	uxtb	r3, r3
 800121a:	e000      	b.n	800121e <FSM_SystemControl+0x8ba>
 800121c:	2301      	movs	r3, #1
 800121e:	4a07      	ldr	r2, [pc, #28]	; (800123c <FSM_SystemControl+0x8d8>)
 8001220:	7113      	strb	r3, [r2, #4]
			CLCD_PrintNumBuffer(0, INDEX_LCD_MONTH, _data_sys.month);
 8001222:	4b06      	ldr	r3, [pc, #24]	; (800123c <FSM_SystemControl+0x8d8>)
 8001224:	791b      	ldrb	r3, [r3, #4]
 8001226:	b21b      	sxth	r3, r3
 8001228:	461a      	mov	r2, r3
 800122a:	2108      	movs	r1, #8
 800122c:	2000      	movs	r0, #0
 800122e:	f000 fc91 	bl	8001b54 <CLCD_PrintNumBuffer>
 8001232:	e03a      	b.n	80012aa <FSM_SystemControl+0x946>
 8001234:	cccccccd 	.word	0xcccccccd
 8001238:	20000112 	.word	0x20000112
 800123c:	200000f8 	.word	0x200000f8
 8001240:	200000f4 	.word	0x200000f4
 8001244:	2000010e 	.word	0x2000010e
 8001248:	08006f70 	.word	0x08006f70
 800124c:	08006f84 	.word	0x08006f84
 8001250:	2000010c 	.word	0x2000010c
 8001254:	08006f9c 	.word	0x08006f9c

		}
		else if(IN_Stick(BT_DEC) % 10 == 1){
 8001258:	2002      	movs	r0, #2
 800125a:	f000 fa51 	bl	8001700 <IN_Stick>
 800125e:	4603      	mov	r3, r0
 8001260:	461a      	mov	r2, r3
 8001262:	4bb0      	ldr	r3, [pc, #704]	; (8001524 <FSM_SystemControl+0xbc0>)
 8001264:	fba3 1302 	umull	r1, r3, r3, r2
 8001268:	08d9      	lsrs	r1, r3, #3
 800126a:	460b      	mov	r3, r1
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	440b      	add	r3, r1
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	b29b      	uxth	r3, r3
 8001276:	2b01      	cmp	r3, #1
 8001278:	d117      	bne.n	80012aa <FSM_SystemControl+0x946>
			_time_out_for_set = TIME_OUT_FOR_SET;
 800127a:	4bab      	ldr	r3, [pc, #684]	; (8001528 <FSM_SystemControl+0xbc4>)
 800127c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001280:	801a      	strh	r2, [r3, #0]
			_data_sys.month = _data_sys.month > 1 ? _data_sys.month - 1 : 12;
 8001282:	4baa      	ldr	r3, [pc, #680]	; (800152c <FSM_SystemControl+0xbc8>)
 8001284:	791b      	ldrb	r3, [r3, #4]
 8001286:	2b01      	cmp	r3, #1
 8001288:	d904      	bls.n	8001294 <FSM_SystemControl+0x930>
 800128a:	4ba8      	ldr	r3, [pc, #672]	; (800152c <FSM_SystemControl+0xbc8>)
 800128c:	791b      	ldrb	r3, [r3, #4]
 800128e:	3b01      	subs	r3, #1
 8001290:	b2db      	uxtb	r3, r3
 8001292:	e000      	b.n	8001296 <FSM_SystemControl+0x932>
 8001294:	230c      	movs	r3, #12
 8001296:	4aa5      	ldr	r2, [pc, #660]	; (800152c <FSM_SystemControl+0xbc8>)
 8001298:	7113      	strb	r3, [r2, #4]
			CLCD_PrintNumBuffer(0, INDEX_LCD_MONTH, _data_sys.month);
 800129a:	4ba4      	ldr	r3, [pc, #656]	; (800152c <FSM_SystemControl+0xbc8>)
 800129c:	791b      	ldrb	r3, [r3, #4]
 800129e:	b21b      	sxth	r3, r3
 80012a0:	461a      	mov	r2, r3
 80012a2:	2108      	movs	r1, #8
 80012a4:	2000      	movs	r0, #0
 80012a6:	f000 fc55 	bl	8001b54 <CLCD_PrintNumBuffer>
		}

		if(IN_IsPressed(BT_MODE)){
 80012aa:	2001      	movs	r0, #1
 80012ac:	f000 fa38 	bl	8001720 <IN_IsPressed>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d015      	beq.n	80012e2 <FSM_SystemControl+0x97e>
			_time_out_for_set = TIME_OUT_FOR_SET;
 80012b6:	4b9c      	ldr	r3, [pc, #624]	; (8001528 <FSM_SystemControl+0xbc4>)
 80012b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012bc:	801a      	strh	r2, [r3, #0]
			DS_Write(ADDRESS_MONTH, _data_sys.month);
 80012be:	4b9b      	ldr	r3, [pc, #620]	; (800152c <FSM_SystemControl+0xbc8>)
 80012c0:	791b      	ldrb	r3, [r3, #4]
 80012c2:	4619      	mov	r1, r3
 80012c4:	2005      	movs	r0, #5
 80012c6:	f7ff fa35 	bl	8000734 <DS_Write>
			CLCD_PrintNumBuffer(0, INDEX_LCD_MONTH, _data_sys.month);
 80012ca:	4b98      	ldr	r3, [pc, #608]	; (800152c <FSM_SystemControl+0xbc8>)
 80012cc:	791b      	ldrb	r3, [r3, #4]
 80012ce:	b21b      	sxth	r3, r3
 80012d0:	461a      	mov	r2, r3
 80012d2:	2108      	movs	r1, #8
 80012d4:	2000      	movs	r0, #0
 80012d6:	f000 fc3d 	bl	8001b54 <CLCD_PrintNumBuffer>
			mode_sys = SET_YEAR;
 80012da:	4b95      	ldr	r3, [pc, #596]	; (8001530 <FSM_SystemControl+0xbcc>)
 80012dc:	2209      	movs	r2, #9
 80012de:	701a      	strb	r2, [r3, #0]
			CLCD_PrintStringBuffer(0, 0, SCREEN_DATE_DHT_0);
			CLCD_PrintStringBuffer(1, 0, SCREEN_DATE_DHT_1);
			CLCD_PrintCharBuffer(1, INDEX_CEL_SYMBOL, 0xDF);
			mode_sys = DISPLAY_DATE_DHT;
		}
		break;
 80012e0:	e1a1      	b.n	8001626 <FSM_SystemControl+0xcc2>
		else if(_time_out_for_set < 5){
 80012e2:	4b91      	ldr	r3, [pc, #580]	; (8001528 <FSM_SystemControl+0xbc4>)
 80012e4:	881b      	ldrh	r3, [r3, #0]
 80012e6:	2b04      	cmp	r3, #4
 80012e8:	f200 819d 	bhi.w	8001626 <FSM_SystemControl+0xcc2>
			_time_screen = TIME_SCREEN_DATE;
 80012ec:	4b91      	ldr	r3, [pc, #580]	; (8001534 <FSM_SystemControl+0xbd0>)
 80012ee:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80012f2:	801a      	strh	r2, [r3, #0]
			CLCD_PrintStringBuffer(0, 0, SCREEN_DATE_DHT_0);
 80012f4:	4a90      	ldr	r2, [pc, #576]	; (8001538 <FSM_SystemControl+0xbd4>)
 80012f6:	2100      	movs	r1, #0
 80012f8:	2000      	movs	r0, #0
 80012fa:	f000 fbf5 	bl	8001ae8 <CLCD_PrintStringBuffer>
			CLCD_PrintStringBuffer(1, 0, SCREEN_DATE_DHT_1);
 80012fe:	4a8f      	ldr	r2, [pc, #572]	; (800153c <FSM_SystemControl+0xbd8>)
 8001300:	2100      	movs	r1, #0
 8001302:	2001      	movs	r0, #1
 8001304:	f000 fbf0 	bl	8001ae8 <CLCD_PrintStringBuffer>
			CLCD_PrintCharBuffer(1, INDEX_CEL_SYMBOL, 0xDF);
 8001308:	22df      	movs	r2, #223	; 0xdf
 800130a:	2106      	movs	r1, #6
 800130c:	2001      	movs	r0, #1
 800130e:	f000 fbaf 	bl	8001a70 <CLCD_PrintCharBuffer>
			mode_sys = DISPLAY_DATE_DHT;
 8001312:	4b87      	ldr	r3, [pc, #540]	; (8001530 <FSM_SystemControl+0xbcc>)
 8001314:	2202      	movs	r2, #2
 8001316:	701a      	strb	r2, [r3, #0]
		break;
 8001318:	e185      	b.n	8001626 <FSM_SystemControl+0xcc2>
	case SET_YEAR:
//		Blink BLink BLink :D
		if(_counter_time_elapsed % 20 < 10){
 800131a:	4b89      	ldr	r3, [pc, #548]	; (8001540 <FSM_SystemControl+0xbdc>)
 800131c:	781a      	ldrb	r2, [r3, #0]
 800131e:	4b81      	ldr	r3, [pc, #516]	; (8001524 <FSM_SystemControl+0xbc0>)
 8001320:	fba3 1302 	umull	r1, r3, r3, r2
 8001324:	0919      	lsrs	r1, r3, #4
 8001326:	460b      	mov	r3, r1
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	440b      	add	r3, r1
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	b2db      	uxtb	r3, r3
 8001332:	2b09      	cmp	r3, #9
 8001334:	d80c      	bhi.n	8001350 <FSM_SystemControl+0x9ec>
			CLCD_PrintNumBuffer(0, INDEX_LCD_YEAR, 2000 + _data_sys.year);
 8001336:	4b7d      	ldr	r3, [pc, #500]	; (800152c <FSM_SystemControl+0xbc8>)
 8001338:	78db      	ldrb	r3, [r3, #3]
 800133a:	b29b      	uxth	r3, r3
 800133c:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001340:	b29b      	uxth	r3, r3
 8001342:	b21b      	sxth	r3, r3
 8001344:	461a      	mov	r2, r3
 8001346:	210b      	movs	r1, #11
 8001348:	2000      	movs	r0, #0
 800134a:	f000 fc03 	bl	8001b54 <CLCD_PrintNumBuffer>
 800134e:	e004      	b.n	800135a <FSM_SystemControl+0x9f6>
		}
		else {
			CLCD_PrintStringBuffer(0, INDEX_LCD_YEAR, "    ");
 8001350:	4a7c      	ldr	r2, [pc, #496]	; (8001544 <FSM_SystemControl+0xbe0>)
 8001352:	210b      	movs	r1, #11
 8001354:	2000      	movs	r0, #0
 8001356:	f000 fbc7 	bl	8001ae8 <CLCD_PrintStringBuffer>
		}

//		Increase/Decrease 1 every 500ms
		if(IN_Stick(BT_INC) % 10 == 1){
 800135a:	2000      	movs	r0, #0
 800135c:	f000 f9d0 	bl	8001700 <IN_Stick>
 8001360:	4603      	mov	r3, r0
 8001362:	461a      	mov	r2, r3
 8001364:	4b6f      	ldr	r3, [pc, #444]	; (8001524 <FSM_SystemControl+0xbc0>)
 8001366:	fba3 1302 	umull	r1, r3, r3, r2
 800136a:	08d9      	lsrs	r1, r3, #3
 800136c:	460b      	mov	r3, r1
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	440b      	add	r3, r1
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	b29b      	uxth	r3, r3
 8001378:	2b01      	cmp	r3, #1
 800137a:	d11c      	bne.n	80013b6 <FSM_SystemControl+0xa52>
			_time_out_for_set = TIME_OUT_FOR_SET;
 800137c:	4b6a      	ldr	r3, [pc, #424]	; (8001528 <FSM_SystemControl+0xbc4>)
 800137e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001382:	801a      	strh	r2, [r3, #0]
			_data_sys.year = _data_sys.year < 99 ? _data_sys.year + 1 : 0;
 8001384:	4b69      	ldr	r3, [pc, #420]	; (800152c <FSM_SystemControl+0xbc8>)
 8001386:	78db      	ldrb	r3, [r3, #3]
 8001388:	2b62      	cmp	r3, #98	; 0x62
 800138a:	d804      	bhi.n	8001396 <FSM_SystemControl+0xa32>
 800138c:	4b67      	ldr	r3, [pc, #412]	; (800152c <FSM_SystemControl+0xbc8>)
 800138e:	78db      	ldrb	r3, [r3, #3]
 8001390:	3301      	adds	r3, #1
 8001392:	b2db      	uxtb	r3, r3
 8001394:	e000      	b.n	8001398 <FSM_SystemControl+0xa34>
 8001396:	2300      	movs	r3, #0
 8001398:	4a64      	ldr	r2, [pc, #400]	; (800152c <FSM_SystemControl+0xbc8>)
 800139a:	70d3      	strb	r3, [r2, #3]
			CLCD_PrintNumBuffer(0, INDEX_LCD_YEAR, 2000 + _data_sys.year);
 800139c:	4b63      	ldr	r3, [pc, #396]	; (800152c <FSM_SystemControl+0xbc8>)
 800139e:	78db      	ldrb	r3, [r3, #3]
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	b21b      	sxth	r3, r3
 80013aa:	461a      	mov	r2, r3
 80013ac:	210b      	movs	r1, #11
 80013ae:	2000      	movs	r0, #0
 80013b0:	f000 fbd0 	bl	8001b54 <CLCD_PrintNumBuffer>
 80013b4:	e02c      	b.n	8001410 <FSM_SystemControl+0xaac>
		}
		else if(IN_Stick(BT_DEC) % 10 == 1){
 80013b6:	2002      	movs	r0, #2
 80013b8:	f000 f9a2 	bl	8001700 <IN_Stick>
 80013bc:	4603      	mov	r3, r0
 80013be:	461a      	mov	r2, r3
 80013c0:	4b58      	ldr	r3, [pc, #352]	; (8001524 <FSM_SystemControl+0xbc0>)
 80013c2:	fba3 1302 	umull	r1, r3, r3, r2
 80013c6:	08d9      	lsrs	r1, r3, #3
 80013c8:	460b      	mov	r3, r1
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	440b      	add	r3, r1
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d11b      	bne.n	8001410 <FSM_SystemControl+0xaac>
			_time_out_for_set = TIME_OUT_FOR_SET;
 80013d8:	4b53      	ldr	r3, [pc, #332]	; (8001528 <FSM_SystemControl+0xbc4>)
 80013da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013de:	801a      	strh	r2, [r3, #0]
			_data_sys.year = _data_sys.year > 0 ? _data_sys.year - 1 : 99;
 80013e0:	4b52      	ldr	r3, [pc, #328]	; (800152c <FSM_SystemControl+0xbc8>)
 80013e2:	78db      	ldrb	r3, [r3, #3]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d004      	beq.n	80013f2 <FSM_SystemControl+0xa8e>
 80013e8:	4b50      	ldr	r3, [pc, #320]	; (800152c <FSM_SystemControl+0xbc8>)
 80013ea:	78db      	ldrb	r3, [r3, #3]
 80013ec:	3b01      	subs	r3, #1
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	e000      	b.n	80013f4 <FSM_SystemControl+0xa90>
 80013f2:	2363      	movs	r3, #99	; 0x63
 80013f4:	4a4d      	ldr	r2, [pc, #308]	; (800152c <FSM_SystemControl+0xbc8>)
 80013f6:	70d3      	strb	r3, [r2, #3]
			CLCD_PrintNumBuffer(0, INDEX_LCD_YEAR, 2000 + _data_sys.year);
 80013f8:	4b4c      	ldr	r3, [pc, #304]	; (800152c <FSM_SystemControl+0xbc8>)
 80013fa:	78db      	ldrb	r3, [r3, #3]
 80013fc:	b29b      	uxth	r3, r3
 80013fe:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001402:	b29b      	uxth	r3, r3
 8001404:	b21b      	sxth	r3, r3
 8001406:	461a      	mov	r2, r3
 8001408:	210b      	movs	r1, #11
 800140a:	2000      	movs	r0, #0
 800140c:	f000 fba2 	bl	8001b54 <CLCD_PrintNumBuffer>
		}

		if(IN_IsPressed(BT_MODE) || (_time_out_for_set < 5)){
 8001410:	2001      	movs	r0, #1
 8001412:	f000 f985 	bl	8001720 <IN_IsPressed>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d104      	bne.n	8001426 <FSM_SystemControl+0xac2>
 800141c:	4b42      	ldr	r3, [pc, #264]	; (8001528 <FSM_SystemControl+0xbc4>)
 800141e:	881b      	ldrh	r3, [r3, #0]
 8001420:	2b04      	cmp	r3, #4
 8001422:	f200 8102 	bhi.w	800162a <FSM_SystemControl+0xcc6>
			_time_screen = TIME_SCREEN_DATE;
 8001426:	4b43      	ldr	r3, [pc, #268]	; (8001534 <FSM_SystemControl+0xbd0>)
 8001428:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800142c:	801a      	strh	r2, [r3, #0]
			DS_Write(ADDRESS_YEAR, _data_sys.year);
 800142e:	4b3f      	ldr	r3, [pc, #252]	; (800152c <FSM_SystemControl+0xbc8>)
 8001430:	78db      	ldrb	r3, [r3, #3]
 8001432:	4619      	mov	r1, r3
 8001434:	2006      	movs	r0, #6
 8001436:	f7ff f97d 	bl	8000734 <DS_Write>
			CLCD_PrintStringBuffer(0, 0, SCREEN_DATE_DHT_0);
 800143a:	4a3f      	ldr	r2, [pc, #252]	; (8001538 <FSM_SystemControl+0xbd4>)
 800143c:	2100      	movs	r1, #0
 800143e:	2000      	movs	r0, #0
 8001440:	f000 fb52 	bl	8001ae8 <CLCD_PrintStringBuffer>
			CLCD_PrintStringBuffer(1, 0, SCREEN_DATE_DHT_1);
 8001444:	4a3d      	ldr	r2, [pc, #244]	; (800153c <FSM_SystemControl+0xbd8>)
 8001446:	2100      	movs	r1, #0
 8001448:	2001      	movs	r0, #1
 800144a:	f000 fb4d 	bl	8001ae8 <CLCD_PrintStringBuffer>
			CLCD_PrintCharBuffer(1, INDEX_CEL_SYMBOL, 0xDF);
 800144e:	22df      	movs	r2, #223	; 0xdf
 8001450:	2106      	movs	r1, #6
 8001452:	2001      	movs	r0, #1
 8001454:	f000 fb0c 	bl	8001a70 <CLCD_PrintCharBuffer>
			mode_sys = DISPLAY_DATE_DHT;
 8001458:	4b35      	ldr	r3, [pc, #212]	; (8001530 <FSM_SystemControl+0xbcc>)
 800145a:	2202      	movs	r2, #2
 800145c:	701a      	strb	r2, [r3, #0]
		}
		break;
 800145e:	e0e4      	b.n	800162a <FSM_SystemControl+0xcc6>
	case SET_ALARM:

		if(IN_IsPressed(BT_MODE)){
 8001460:	2001      	movs	r0, #1
 8001462:	f000 f95d 	bl	8001720 <IN_IsPressed>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d024      	beq.n	80014b6 <FSM_SystemControl+0xb52>
			_data_sys.alarm_flag = 1;
 800146c:	4b2f      	ldr	r3, [pc, #188]	; (800152c <FSM_SystemControl+0xbc8>)
 800146e:	2201      	movs	r2, #1
 8001470:	725a      	strb	r2, [r3, #9]
			DS_Write(ADDRESS_FLAG_ALARM, 1);
 8001472:	2101      	movs	r1, #1
 8001474:	2028      	movs	r0, #40	; 0x28
 8001476:	f7ff f95d 	bl	8000734 <DS_Write>

			CLCD_PrintStringBuffer(0, 0, SCREEN_SET_ALARM_0);
 800147a:	4a33      	ldr	r2, [pc, #204]	; (8001548 <FSM_SystemControl+0xbe4>)
 800147c:	2100      	movs	r1, #0
 800147e:	2000      	movs	r0, #0
 8001480:	f000 fb32 	bl	8001ae8 <CLCD_PrintStringBuffer>
			CLCD_PrintStringBuffer(1, 0, SCREEN_SET_ALARM_1);
 8001484:	4a31      	ldr	r2, [pc, #196]	; (800154c <FSM_SystemControl+0xbe8>)
 8001486:	2100      	movs	r1, #0
 8001488:	2001      	movs	r0, #1
 800148a:	f000 fb2d 	bl	8001ae8 <CLCD_PrintStringBuffer>

			CLCD_PrintNumBuffer(1, INDEX_ALARM_HOUR, _data_sys.alarm_hour);
 800148e:	4b27      	ldr	r3, [pc, #156]	; (800152c <FSM_SystemControl+0xbc8>)
 8001490:	79db      	ldrb	r3, [r3, #7]
 8001492:	b21b      	sxth	r3, r3
 8001494:	461a      	mov	r2, r3
 8001496:	2103      	movs	r1, #3
 8001498:	2001      	movs	r0, #1
 800149a:	f000 fb5b 	bl	8001b54 <CLCD_PrintNumBuffer>
			CLCD_PrintNumBuffer(1, INDEX_ALARM_MIN, _data_sys.alarm_min);
 800149e:	4b23      	ldr	r3, [pc, #140]	; (800152c <FSM_SystemControl+0xbc8>)
 80014a0:	7a1b      	ldrb	r3, [r3, #8]
 80014a2:	b21b      	sxth	r3, r3
 80014a4:	461a      	mov	r2, r3
 80014a6:	210b      	movs	r1, #11
 80014a8:	2001      	movs	r0, #1
 80014aa:	f000 fb53 	bl	8001b54 <CLCD_PrintNumBuffer>

			mode_sys = SET_ALARM_HOUR;
 80014ae:	4b20      	ldr	r3, [pc, #128]	; (8001530 <FSM_SystemControl+0xbcc>)
 80014b0:	220b      	movs	r2, #11
 80014b2:	701a      	strb	r2, [r3, #0]
			_data_sys.alarm_flag = 0;
			DS_Write(ADDRESS_FLAG_ALARM, 0);

			mode_sys = INIT;
		}
		break;
 80014b4:	e0bb      	b.n	800162e <FSM_SystemControl+0xcca>
		else if(IN_IsPressed(BT_DEC) || IN_IsPressed(BT_INC) || (_time_out_for_set < 5)){
 80014b6:	2002      	movs	r0, #2
 80014b8:	f000 f932 	bl	8001720 <IN_IsPressed>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d10a      	bne.n	80014d8 <FSM_SystemControl+0xb74>
 80014c2:	2000      	movs	r0, #0
 80014c4:	f000 f92c 	bl	8001720 <IN_IsPressed>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d104      	bne.n	80014d8 <FSM_SystemControl+0xb74>
 80014ce:	4b16      	ldr	r3, [pc, #88]	; (8001528 <FSM_SystemControl+0xbc4>)
 80014d0:	881b      	ldrh	r3, [r3, #0]
 80014d2:	2b04      	cmp	r3, #4
 80014d4:	f200 80ab 	bhi.w	800162e <FSM_SystemControl+0xcca>
			_time_screen = 50;
 80014d8:	4b16      	ldr	r3, [pc, #88]	; (8001534 <FSM_SystemControl+0xbd0>)
 80014da:	2232      	movs	r2, #50	; 0x32
 80014dc:	801a      	strh	r2, [r3, #0]
			_data_sys.alarm_flag = 0;
 80014de:	4b13      	ldr	r3, [pc, #76]	; (800152c <FSM_SystemControl+0xbc8>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	725a      	strb	r2, [r3, #9]
			DS_Write(ADDRESS_FLAG_ALARM, 0);
 80014e4:	2100      	movs	r1, #0
 80014e6:	2028      	movs	r0, #40	; 0x28
 80014e8:	f7ff f924 	bl	8000734 <DS_Write>
			mode_sys = INIT;
 80014ec:	4b10      	ldr	r3, [pc, #64]	; (8001530 <FSM_SystemControl+0xbcc>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	701a      	strb	r2, [r3, #0]
		break;
 80014f2:	e09c      	b.n	800162e <FSM_SystemControl+0xcca>
	case SET_ALARM_HOUR:
//		Blink BLink BLink :D
		if(_counter_time_elapsed % 20 < 10){
 80014f4:	4b12      	ldr	r3, [pc, #72]	; (8001540 <FSM_SystemControl+0xbdc>)
 80014f6:	781a      	ldrb	r2, [r3, #0]
 80014f8:	4b0a      	ldr	r3, [pc, #40]	; (8001524 <FSM_SystemControl+0xbc0>)
 80014fa:	fba3 1302 	umull	r1, r3, r3, r2
 80014fe:	0919      	lsrs	r1, r3, #4
 8001500:	460b      	mov	r3, r1
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	440b      	add	r3, r1
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	b2db      	uxtb	r3, r3
 800150c:	2b09      	cmp	r3, #9
 800150e:	d81f      	bhi.n	8001550 <FSM_SystemControl+0xbec>
			CLCD_PrintNumBuffer(1, INDEX_ALARM_HOUR, _data_sys.alarm_hour);
 8001510:	4b06      	ldr	r3, [pc, #24]	; (800152c <FSM_SystemControl+0xbc8>)
 8001512:	79db      	ldrb	r3, [r3, #7]
 8001514:	b21b      	sxth	r3, r3
 8001516:	461a      	mov	r2, r3
 8001518:	2103      	movs	r1, #3
 800151a:	2001      	movs	r0, #1
 800151c:	f000 fb1a 	bl	8001b54 <CLCD_PrintNumBuffer>
 8001520:	e01b      	b.n	800155a <FSM_SystemControl+0xbf6>
 8001522:	bf00      	nop
 8001524:	cccccccd 	.word	0xcccccccd
 8001528:	20000112 	.word	0x20000112
 800152c:	200000f8 	.word	0x200000f8
 8001530:	200000f4 	.word	0x200000f4
 8001534:	2000010e 	.word	0x2000010e
 8001538:	08006f70 	.word	0x08006f70
 800153c:	08006f84 	.word	0x08006f84
 8001540:	2000010c 	.word	0x2000010c
 8001544:	08006fa0 	.word	0x08006fa0
 8001548:	08006fa8 	.word	0x08006fa8
 800154c:	08006fbc 	.word	0x08006fbc
		}
		else {
			CLCD_PrintStringBuffer(1, INDEX_ALARM_HOUR, "  ");
 8001550:	4a3a      	ldr	r2, [pc, #232]	; (800163c <FSM_SystemControl+0xcd8>)
 8001552:	2103      	movs	r1, #3
 8001554:	2001      	movs	r0, #1
 8001556:	f000 fac7 	bl	8001ae8 <CLCD_PrintStringBuffer>
		}

		if(IN_IsPressed(BT_MODE)){
 800155a:	2001      	movs	r0, #1
 800155c:	f000 f8e0 	bl	8001720 <IN_IsPressed>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d015      	beq.n	8001592 <FSM_SystemControl+0xc2e>
			_time_out_for_set = TIME_OUT_FOR_SET;
 8001566:	4b36      	ldr	r3, [pc, #216]	; (8001640 <FSM_SystemControl+0xcdc>)
 8001568:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800156c:	801a      	strh	r2, [r3, #0]
			DS_Write(ADDRESS_HOUR_ALARM, _data_sys.alarm_hour);
 800156e:	4b35      	ldr	r3, [pc, #212]	; (8001644 <FSM_SystemControl+0xce0>)
 8001570:	79db      	ldrb	r3, [r3, #7]
 8001572:	4619      	mov	r1, r3
 8001574:	2026      	movs	r0, #38	; 0x26
 8001576:	f7ff f8dd 	bl	8000734 <DS_Write>
			CLCD_PrintNumBuffer(1, INDEX_ALARM_HOUR, _data_sys.alarm_hour);
 800157a:	4b32      	ldr	r3, [pc, #200]	; (8001644 <FSM_SystemControl+0xce0>)
 800157c:	79db      	ldrb	r3, [r3, #7]
 800157e:	b21b      	sxth	r3, r3
 8001580:	461a      	mov	r2, r3
 8001582:	2103      	movs	r1, #3
 8001584:	2001      	movs	r0, #1
 8001586:	f000 fae5 	bl	8001b54 <CLCD_PrintNumBuffer>
			mode_sys = SET_ALARM_MIN;
 800158a:	4b2f      	ldr	r3, [pc, #188]	; (8001648 <FSM_SystemControl+0xce4>)
 800158c:	220c      	movs	r2, #12
 800158e:	701a      	strb	r2, [r3, #0]
		}
		else if(_time_out_for_set < 5){
			mode_sys = INIT;
		}
		break;
 8001590:	e04f      	b.n	8001632 <FSM_SystemControl+0xcce>
		else if(_time_out_for_set < 5){
 8001592:	4b2b      	ldr	r3, [pc, #172]	; (8001640 <FSM_SystemControl+0xcdc>)
 8001594:	881b      	ldrh	r3, [r3, #0]
 8001596:	2b04      	cmp	r3, #4
 8001598:	d84b      	bhi.n	8001632 <FSM_SystemControl+0xcce>
			mode_sys = INIT;
 800159a:	4b2b      	ldr	r3, [pc, #172]	; (8001648 <FSM_SystemControl+0xce4>)
 800159c:	2200      	movs	r2, #0
 800159e:	701a      	strb	r2, [r3, #0]
		break;
 80015a0:	e047      	b.n	8001632 <FSM_SystemControl+0xcce>
	case SET_ALARM_MIN:
//		Blink BLink BLink :D
		if(_counter_time_elapsed % 20 < 10){
 80015a2:	4b2a      	ldr	r3, [pc, #168]	; (800164c <FSM_SystemControl+0xce8>)
 80015a4:	781a      	ldrb	r2, [r3, #0]
 80015a6:	4b2a      	ldr	r3, [pc, #168]	; (8001650 <FSM_SystemControl+0xcec>)
 80015a8:	fba3 1302 	umull	r1, r3, r3, r2
 80015ac:	0919      	lsrs	r1, r3, #4
 80015ae:	460b      	mov	r3, r1
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	440b      	add	r3, r1
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	2b09      	cmp	r3, #9
 80015bc:	d808      	bhi.n	80015d0 <FSM_SystemControl+0xc6c>
			CLCD_PrintNumBuffer(1, INDEX_ALARM_MIN, _data_sys.alarm_min);
 80015be:	4b21      	ldr	r3, [pc, #132]	; (8001644 <FSM_SystemControl+0xce0>)
 80015c0:	7a1b      	ldrb	r3, [r3, #8]
 80015c2:	b21b      	sxth	r3, r3
 80015c4:	461a      	mov	r2, r3
 80015c6:	210b      	movs	r1, #11
 80015c8:	2001      	movs	r0, #1
 80015ca:	f000 fac3 	bl	8001b54 <CLCD_PrintNumBuffer>
 80015ce:	e004      	b.n	80015da <FSM_SystemControl+0xc76>
		}
		else {
			CLCD_PrintStringBuffer(1, INDEX_ALARM_MIN, "  ");
 80015d0:	4a1a      	ldr	r2, [pc, #104]	; (800163c <FSM_SystemControl+0xcd8>)
 80015d2:	210b      	movs	r1, #11
 80015d4:	2001      	movs	r0, #1
 80015d6:	f000 fa87 	bl	8001ae8 <CLCD_PrintStringBuffer>
		}

		if(IN_IsPressed(BT_MODE)){
 80015da:	2001      	movs	r0, #1
 80015dc:	f000 f8a0 	bl	8001720 <IN_IsPressed>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d009      	beq.n	80015fa <FSM_SystemControl+0xc96>
			DS_Write(ADDRESS_MINUTE, _data_sys.alarm_min);
 80015e6:	4b17      	ldr	r3, [pc, #92]	; (8001644 <FSM_SystemControl+0xce0>)
 80015e8:	7a1b      	ldrb	r3, [r3, #8]
 80015ea:	4619      	mov	r1, r3
 80015ec:	2001      	movs	r0, #1
 80015ee:	f7ff f8a1 	bl	8000734 <DS_Write>

			mode_sys = INIT;
 80015f2:	4b15      	ldr	r3, [pc, #84]	; (8001648 <FSM_SystemControl+0xce4>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	701a      	strb	r2, [r3, #0]
		}
		else if(_time_out_for_set < 5){
			mode_sys = INIT;
		}
		break;
 80015f8:	e01d      	b.n	8001636 <FSM_SystemControl+0xcd2>
		else if(_time_out_for_set < 5){
 80015fa:	4b11      	ldr	r3, [pc, #68]	; (8001640 <FSM_SystemControl+0xcdc>)
 80015fc:	881b      	ldrh	r3, [r3, #0]
 80015fe:	2b04      	cmp	r3, #4
 8001600:	d819      	bhi.n	8001636 <FSM_SystemControl+0xcd2>
			mode_sys = INIT;
 8001602:	4b11      	ldr	r3, [pc, #68]	; (8001648 <FSM_SystemControl+0xce4>)
 8001604:	2200      	movs	r2, #0
 8001606:	701a      	strb	r2, [r3, #0]
		break;
 8001608:	e015      	b.n	8001636 <FSM_SystemControl+0xcd2>
		break;
 800160a:	bf00      	nop
 800160c:	e014      	b.n	8001638 <FSM_SystemControl+0xcd4>
		break;
 800160e:	bf00      	nop
 8001610:	e012      	b.n	8001638 <FSM_SystemControl+0xcd4>
		break;
 8001612:	bf00      	nop
 8001614:	e010      	b.n	8001638 <FSM_SystemControl+0xcd4>
		break;
 8001616:	bf00      	nop
 8001618:	e00e      	b.n	8001638 <FSM_SystemControl+0xcd4>
		break;
 800161a:	bf00      	nop
 800161c:	e00c      	b.n	8001638 <FSM_SystemControl+0xcd4>
		break;
 800161e:	bf00      	nop
 8001620:	e00a      	b.n	8001638 <FSM_SystemControl+0xcd4>
		break;
 8001622:	bf00      	nop
 8001624:	e008      	b.n	8001638 <FSM_SystemControl+0xcd4>
		break;
 8001626:	bf00      	nop
 8001628:	e006      	b.n	8001638 <FSM_SystemControl+0xcd4>
		break;
 800162a:	bf00      	nop
 800162c:	e004      	b.n	8001638 <FSM_SystemControl+0xcd4>
		break;
 800162e:	bf00      	nop
 8001630:	e002      	b.n	8001638 <FSM_SystemControl+0xcd4>
		break;
 8001632:	bf00      	nop
 8001634:	e000      	b.n	8001638 <FSM_SystemControl+0xcd4>
		break;
 8001636:	bf00      	nop
	}
}
 8001638:	bf00      	nop
 800163a:	bd80      	pop	{r7, pc}
 800163c:	08006f9c 	.word	0x08006f9c
 8001640:	20000112 	.word	0x20000112
 8001644:	200000f8 	.word	0x200000f8
 8001648:	200000f4 	.word	0x200000f4
 800164c:	2000010c 	.word	0x2000010c
 8001650:	cccccccd 	.word	0xcccccccd

08001654 <IN_Init>:

uint8_t Flag_for_button_press[NO_OF_BUTTONS];
uint16_t Counter_button_press[NO_OF_BUTTONS];


void IN_Init(void){
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0

}
 8001658:	bf00      	nop
 800165a:	46bd      	mov	sp, r7
 800165c:	bc80      	pop	{r7}
 800165e:	4770      	bx	lr

08001660 <IN_ReadButton>:



//this function is called every 50ms
void IN_ReadButton(void){
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < NO_OF_BUTTONS; i++){
 8001666:	2300      	movs	r3, #0
 8001668:	71fb      	strb	r3, [r7, #7]
 800166a:	e039      	b.n	80016e0 <IN_ReadButton+0x80>
		if(HAL_GPIO_ReadPin(PORT_BUTTON[i], PIN_BUTTON[i]) == BUTTON_IS_PRESSED){
 800166c:	79fb      	ldrb	r3, [r7, #7]
 800166e:	4a20      	ldr	r2, [pc, #128]	; (80016f0 <IN_ReadButton+0x90>)
 8001670:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001674:	79fb      	ldrb	r3, [r7, #7]
 8001676:	491f      	ldr	r1, [pc, #124]	; (80016f4 <IN_ReadButton+0x94>)
 8001678:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800167c:	4619      	mov	r1, r3
 800167e:	4610      	mov	r0, r2
 8001680:	f001 fd0a 	bl	8003098 <HAL_GPIO_ReadPin>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d10f      	bne.n	80016aa <IN_ReadButton+0x4a>
			if(Counter_button_press[i] < MAX_COUNTER){
 800168a:	79fb      	ldrb	r3, [r7, #7]
 800168c:	4a1a      	ldr	r2, [pc, #104]	; (80016f8 <IN_ReadButton+0x98>)
 800168e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001692:	2bc7      	cmp	r3, #199	; 0xc7
 8001694:	d821      	bhi.n	80016da <IN_ReadButton+0x7a>
				Counter_button_press[i]++;
 8001696:	79fb      	ldrb	r3, [r7, #7]
 8001698:	4a17      	ldr	r2, [pc, #92]	; (80016f8 <IN_ReadButton+0x98>)
 800169a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800169e:	3201      	adds	r2, #1
 80016a0:	b291      	uxth	r1, r2
 80016a2:	4a15      	ldr	r2, [pc, #84]	; (80016f8 <IN_ReadButton+0x98>)
 80016a4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80016a8:	e017      	b.n	80016da <IN_ReadButton+0x7a>
			}
		}
		else {
			Flag_for_button_press[i] = (Counter_button_press[i] > 0) && (Counter_button_press[i] < 10);
 80016aa:	79fb      	ldrb	r3, [r7, #7]
 80016ac:	4a12      	ldr	r2, [pc, #72]	; (80016f8 <IN_ReadButton+0x98>)
 80016ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d007      	beq.n	80016c6 <IN_ReadButton+0x66>
 80016b6:	79fb      	ldrb	r3, [r7, #7]
 80016b8:	4a0f      	ldr	r2, [pc, #60]	; (80016f8 <IN_ReadButton+0x98>)
 80016ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016be:	2b09      	cmp	r3, #9
 80016c0:	d801      	bhi.n	80016c6 <IN_ReadButton+0x66>
 80016c2:	2201      	movs	r2, #1
 80016c4:	e000      	b.n	80016c8 <IN_ReadButton+0x68>
 80016c6:	2200      	movs	r2, #0
 80016c8:	79fb      	ldrb	r3, [r7, #7]
 80016ca:	b2d1      	uxtb	r1, r2
 80016cc:	4a0b      	ldr	r2, [pc, #44]	; (80016fc <IN_ReadButton+0x9c>)
 80016ce:	54d1      	strb	r1, [r2, r3]
			Counter_button_press[i] = 0;
 80016d0:	79fb      	ldrb	r3, [r7, #7]
 80016d2:	4a09      	ldr	r2, [pc, #36]	; (80016f8 <IN_ReadButton+0x98>)
 80016d4:	2100      	movs	r1, #0
 80016d6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t i = 0; i < NO_OF_BUTTONS; i++){
 80016da:	79fb      	ldrb	r3, [r7, #7]
 80016dc:	3301      	adds	r3, #1
 80016de:	71fb      	strb	r3, [r7, #7]
 80016e0:	79fb      	ldrb	r3, [r7, #7]
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d9c2      	bls.n	800166c <IN_ReadButton+0xc>
		}
	}
}
 80016e6:	bf00      	nop
 80016e8:	bf00      	nop
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	20000000 	.word	0x20000000
 80016f4:	2000000c 	.word	0x2000000c
 80016f8:	20000118 	.word	0x20000118
 80016fc:	20000114 	.word	0x20000114

08001700 <IN_Stick>:

uint16_t IN_Stick(uint8_t index){
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	4603      	mov	r3, r0
 8001708:	71fb      	strb	r3, [r7, #7]
	return Counter_button_press[index];
 800170a:	79fb      	ldrb	r3, [r7, #7]
 800170c:	4a03      	ldr	r2, [pc, #12]	; (800171c <IN_Stick+0x1c>)
 800170e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 8001712:	4618      	mov	r0, r3
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	bc80      	pop	{r7}
 800171a:	4770      	bx	lr
 800171c:	20000118 	.word	0x20000118

08001720 <IN_IsPressed>:


uint8_t IN_IsPressed(uint8_t index){
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	4603      	mov	r3, r0
 8001728:	71fb      	strb	r3, [r7, #7]
	if(index >= NO_OF_BUTTONS) return 0;
 800172a:	79fb      	ldrb	r3, [r7, #7]
 800172c:	2b02      	cmp	r3, #2
 800172e:	d901      	bls.n	8001734 <IN_IsPressed+0x14>
 8001730:	2300      	movs	r3, #0
 8001732:	e002      	b.n	800173a <IN_IsPressed+0x1a>

	return Flag_for_button_press[index];
 8001734:	79fb      	ldrb	r3, [r7, #7]
 8001736:	4a03      	ldr	r2, [pc, #12]	; (8001744 <IN_IsPressed+0x24>)
 8001738:	5cd3      	ldrb	r3, [r2, r3]
}
 800173a:	4618      	mov	r0, r3
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	bc80      	pop	{r7}
 8001742:	4770      	bx	lr
 8001744:	20000114 	.word	0x20000114

08001748 <IN_IsPressed_ms>:

uint8_t IN_IsPressed_ms(uint8_t index, uint16_t duration){
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	460a      	mov	r2, r1
 8001752:	71fb      	strb	r3, [r7, #7]
 8001754:	4613      	mov	r3, r2
 8001756:	80bb      	strh	r3, [r7, #4]
	if(index >= NO_OF_BUTTONS) return 0;
 8001758:	79fb      	ldrb	r3, [r7, #7]
 800175a:	2b02      	cmp	r3, #2
 800175c:	d901      	bls.n	8001762 <IN_IsPressed_ms+0x1a>
 800175e:	2300      	movs	r3, #0
 8001760:	e00e      	b.n	8001780 <IN_IsPressed_ms+0x38>

	//button is read every 50ms -> counter += 1 every 50ms if button is held
	return Counter_button_press[index] >= (duration / 50);
 8001762:	79fb      	ldrb	r3, [r7, #7]
 8001764:	4a09      	ldr	r2, [pc, #36]	; (800178c <IN_IsPressed_ms+0x44>)
 8001766:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800176a:	88bb      	ldrh	r3, [r7, #4]
 800176c:	4908      	ldr	r1, [pc, #32]	; (8001790 <IN_IsPressed_ms+0x48>)
 800176e:	fba1 1303 	umull	r1, r3, r1, r3
 8001772:	091b      	lsrs	r3, r3, #4
 8001774:	b29b      	uxth	r3, r3
 8001776:	429a      	cmp	r2, r3
 8001778:	bf2c      	ite	cs
 800177a:	2301      	movcs	r3, #1
 800177c:	2300      	movcc	r3, #0
 800177e:	b2db      	uxtb	r3, r3
}
 8001780:	4618      	mov	r0, r3
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	bc80      	pop	{r7}
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	20000118 	.word	0x20000118
 8001790:	51eb851f 	.word	0x51eb851f

08001794 <Delay>:

CLCD_I2C_Name LCD;

uint8_t currentCol, currentRow;

static void Delay(uint16_t time){
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(time);
 800179e:	88fb      	ldrh	r3, [r7, #6]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f001 f941 	bl	8002a28 <HAL_Delay>
}
 80017a6:	bf00      	nop
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
	...

080017b0 <WriteI2C>:
		0b00000,
		0b11111,
		0b11111
};

static void WriteI2C(uint8_t data, uint8_t mode){
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af02      	add	r7, sp, #8
 80017b6:	4603      	mov	r3, r0
 80017b8:	460a      	mov	r2, r1
 80017ba:	71fb      	strb	r3, [r7, #7]
 80017bc:	4613      	mov	r3, r2
 80017be:	71bb      	strb	r3, [r7, #6]
	uint8_t dataH, dataL;
	uint8_t data_I2C[4];

	dataH = data & 0xF0;
 80017c0:	79fb      	ldrb	r3, [r7, #7]
 80017c2:	f023 030f 	bic.w	r3, r3, #15
 80017c6:	73fb      	strb	r3, [r7, #15]
	dataL = (data << 4) & 0xF0;
 80017c8:	79fb      	ldrb	r3, [r7, #7]
 80017ca:	011b      	lsls	r3, r3, #4
 80017cc:	73bb      	strb	r3, [r7, #14]

	if(LCD.BACKLIGHT){
 80017ce:	4b1c      	ldr	r3, [pc, #112]	; (8001840 <WriteI2C+0x90>)
 80017d0:	7adb      	ldrb	r3, [r3, #11]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d007      	beq.n	80017e6 <WriteI2C+0x36>
		dataH |= LCD_BACKLIGHT;
 80017d6:	7bfb      	ldrb	r3, [r7, #15]
 80017d8:	f043 0308 	orr.w	r3, r3, #8
 80017dc:	73fb      	strb	r3, [r7, #15]
		dataL |= LCD_BACKLIGHT;
 80017de:	7bbb      	ldrb	r3, [r7, #14]
 80017e0:	f043 0308 	orr.w	r3, r3, #8
 80017e4:	73bb      	strb	r3, [r7, #14]
	}

	if(mode == LCD_DATA){
 80017e6:	79bb      	ldrb	r3, [r7, #6]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d107      	bne.n	80017fc <WriteI2C+0x4c>
		dataH |= LCD_RS;
 80017ec:	7bfb      	ldrb	r3, [r7, #15]
 80017ee:	f043 0301 	orr.w	r3, r3, #1
 80017f2:	73fb      	strb	r3, [r7, #15]
		dataL |= LCD_RS;
 80017f4:	7bbb      	ldrb	r3, [r7, #14]
 80017f6:	f043 0301 	orr.w	r3, r3, #1
 80017fa:	73bb      	strb	r3, [r7, #14]
	}

	data_I2C[0] = dataH | LCD_EN;
 80017fc:	7bfb      	ldrb	r3, [r7, #15]
 80017fe:	f043 0304 	orr.w	r3, r3, #4
 8001802:	b2db      	uxtb	r3, r3
 8001804:	723b      	strb	r3, [r7, #8]
	data_I2C[1] = dataH;
 8001806:	7bfb      	ldrb	r3, [r7, #15]
 8001808:	727b      	strb	r3, [r7, #9]
	data_I2C[2] = dataL | LCD_EN;
 800180a:	7bbb      	ldrb	r3, [r7, #14]
 800180c:	f043 0304 	orr.w	r3, r3, #4
 8001810:	b2db      	uxtb	r3, r3
 8001812:	72bb      	strb	r3, [r7, #10]
	data_I2C[3] = dataL;
 8001814:	7bbb      	ldrb	r3, [r7, #14]
 8001816:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(LCD.I2C, LCD.ADDRESS << 1, (uint8_t*)data_I2C, 4, 1000);
 8001818:	4b09      	ldr	r3, [pc, #36]	; (8001840 <WriteI2C+0x90>)
 800181a:	6818      	ldr	r0, [r3, #0]
 800181c:	4b08      	ldr	r3, [pc, #32]	; (8001840 <WriteI2C+0x90>)
 800181e:	791b      	ldrb	r3, [r3, #4]
 8001820:	b29b      	uxth	r3, r3
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	b299      	uxth	r1, r3
 8001826:	f107 0208 	add.w	r2, r7, #8
 800182a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800182e:	9300      	str	r3, [sp, #0]
 8001830:	2304      	movs	r3, #4
 8001832:	f001 fda5 	bl	8003380 <HAL_I2C_Master_Transmit>
}
 8001836:	bf00      	nop
 8001838:	3710      	adds	r7, #16
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	20000124 	.word	0x20000124

08001844 <CLCD_Init>:



//===========================HIGH LEVEL FUNCTION===========================//
void CLCD_Init(I2C_HandleTypeDef* I2C, uint8_t address, uint8_t row, uint8_t col){
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	4608      	mov	r0, r1
 800184e:	4611      	mov	r1, r2
 8001850:	461a      	mov	r2, r3
 8001852:	4603      	mov	r3, r0
 8001854:	70fb      	strb	r3, [r7, #3]
 8001856:	460b      	mov	r3, r1
 8001858:	70bb      	strb	r3, [r7, #2]
 800185a:	4613      	mov	r3, r2
 800185c:	707b      	strb	r3, [r7, #1]
	uint8_t i;
	LCD.I2C = I2C;
 800185e:	4a4a      	ldr	r2, [pc, #296]	; (8001988 <CLCD_Init+0x144>)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6013      	str	r3, [r2, #0]
	LCD.ADDRESS = address;
 8001864:	4a48      	ldr	r2, [pc, #288]	; (8001988 <CLCD_Init+0x144>)
 8001866:	78fb      	ldrb	r3, [r7, #3]
 8001868:	7113      	strb	r3, [r2, #4]
	LCD.COL = col;
 800186a:	4a47      	ldr	r2, [pc, #284]	; (8001988 <CLCD_Init+0x144>)
 800186c:	787b      	ldrb	r3, [r7, #1]
 800186e:	7153      	strb	r3, [r2, #5]
	LCD.ROW = row;
 8001870:	4a45      	ldr	r2, [pc, #276]	; (8001988 <CLCD_Init+0x144>)
 8001872:	78bb      	ldrb	r3, [r7, #2]
 8001874:	7193      	strb	r3, [r2, #6]

	LCD.FUNCTIONSET = LCD_FUNCTIONSET | LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS;
 8001876:	4b44      	ldr	r3, [pc, #272]	; (8001988 <CLCD_Init+0x144>)
 8001878:	2228      	movs	r2, #40	; 0x28
 800187a:	721a      	strb	r2, [r3, #8]
	LCD.ENTRYMODE = LCD_ENTRYMODESET | LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 800187c:	4b42      	ldr	r3, [pc, #264]	; (8001988 <CLCD_Init+0x144>)
 800187e:	2206      	movs	r2, #6
 8001880:	71da      	strb	r2, [r3, #7]
	LCD.DISPLAYCTRL = LCD_DISPLAYCONTROL | LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8001882:	4b41      	ldr	r3, [pc, #260]	; (8001988 <CLCD_Init+0x144>)
 8001884:	220c      	movs	r2, #12
 8001886:	725a      	strb	r2, [r3, #9]
	LCD.CURSORSHIFT = LCD_CURSORSHIFT | LCD_CURSORMOVE | LCD_MOVERIGHT;
 8001888:	4b3f      	ldr	r3, [pc, #252]	; (8001988 <CLCD_Init+0x144>)
 800188a:	2214      	movs	r2, #20
 800188c:	729a      	strb	r2, [r3, #10]
	LCD.BACKLIGHT = LCD_BACKLIGHT;
 800188e:	4b3e      	ldr	r3, [pc, #248]	; (8001988 <CLCD_Init+0x144>)
 8001890:	2208      	movs	r2, #8
 8001892:	72da      	strb	r2, [r3, #11]

	Delay(50);
 8001894:	2032      	movs	r0, #50	; 0x32
 8001896:	f7ff ff7d 	bl	8001794 <Delay>

	if(Lcd_buffer != NULL) free(Lcd_buffer);
 800189a:	4b3c      	ldr	r3, [pc, #240]	; (800198c <CLCD_Init+0x148>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d004      	beq.n	80018ac <CLCD_Init+0x68>
 80018a2:	4b3a      	ldr	r3, [pc, #232]	; (800198c <CLCD_Init+0x148>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f005 fa0a 	bl	8006cc0 <free>
	Lcd_buffer = (uint8_t*)malloc(row * col * 8);
 80018ac:	78bb      	ldrb	r3, [r7, #2]
 80018ae:	787a      	ldrb	r2, [r7, #1]
 80018b0:	fb02 f303 	mul.w	r3, r2, r3
 80018b4:	00db      	lsls	r3, r3, #3
 80018b6:	4618      	mov	r0, r3
 80018b8:	f005 f9fa 	bl	8006cb0 <malloc>
 80018bc:	4603      	mov	r3, r0
 80018be:	461a      	mov	r2, r3
 80018c0:	4b32      	ldr	r3, [pc, #200]	; (800198c <CLCD_Init+0x148>)
 80018c2:	601a      	str	r2, [r3, #0]

	for(i = 0; i < LCD.ROW * LCD.COL; i++) Lcd_buffer[i] = ' ';
 80018c4:	2300      	movs	r3, #0
 80018c6:	73fb      	strb	r3, [r7, #15]
 80018c8:	e008      	b.n	80018dc <CLCD_Init+0x98>
 80018ca:	4b30      	ldr	r3, [pc, #192]	; (800198c <CLCD_Init+0x148>)
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	7bfb      	ldrb	r3, [r7, #15]
 80018d0:	4413      	add	r3, r2
 80018d2:	2220      	movs	r2, #32
 80018d4:	701a      	strb	r2, [r3, #0]
 80018d6:	7bfb      	ldrb	r3, [r7, #15]
 80018d8:	3301      	adds	r3, #1
 80018da:	73fb      	strb	r3, [r7, #15]
 80018dc:	7bfa      	ldrb	r2, [r7, #15]
 80018de:	4b2a      	ldr	r3, [pc, #168]	; (8001988 <CLCD_Init+0x144>)
 80018e0:	799b      	ldrb	r3, [r3, #6]
 80018e2:	4619      	mov	r1, r3
 80018e4:	4b28      	ldr	r3, [pc, #160]	; (8001988 <CLCD_Init+0x144>)
 80018e6:	795b      	ldrb	r3, [r3, #5]
 80018e8:	fb01 f303 	mul.w	r3, r1, r3
 80018ec:	429a      	cmp	r2, r3
 80018ee:	dbec      	blt.n	80018ca <CLCD_Init+0x86>

	WriteI2C(0x33, LCD_COMMAND);
 80018f0:	2100      	movs	r1, #0
 80018f2:	2033      	movs	r0, #51	; 0x33
 80018f4:	f7ff ff5c 	bl	80017b0 <WriteI2C>
//	Delay(5);
	WriteI2C(0x33, LCD_COMMAND);
 80018f8:	2100      	movs	r1, #0
 80018fa:	2033      	movs	r0, #51	; 0x33
 80018fc:	f7ff ff58 	bl	80017b0 <WriteI2C>
	Delay(5);
 8001900:	2005      	movs	r0, #5
 8001902:	f7ff ff47 	bl	8001794 <Delay>
	WriteI2C(0x32, LCD_COMMAND);
 8001906:	2100      	movs	r1, #0
 8001908:	2032      	movs	r0, #50	; 0x32
 800190a:	f7ff ff51 	bl	80017b0 <WriteI2C>
	Delay(5);
 800190e:	2005      	movs	r0, #5
 8001910:	f7ff ff40 	bl	8001794 <Delay>
	WriteI2C(0x20, LCD_COMMAND);
 8001914:	2100      	movs	r1, #0
 8001916:	2020      	movs	r0, #32
 8001918:	f7ff ff4a 	bl	80017b0 <WriteI2C>
	Delay(5);
 800191c:	2005      	movs	r0, #5
 800191e:	f7ff ff39 	bl	8001794 <Delay>

//	config lcd
	WriteI2C(LCD.ENTRYMODE, LCD_COMMAND);
 8001922:	4b19      	ldr	r3, [pc, #100]	; (8001988 <CLCD_Init+0x144>)
 8001924:	79db      	ldrb	r3, [r3, #7]
 8001926:	2100      	movs	r1, #0
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff ff41 	bl	80017b0 <WriteI2C>
	Delay(1);
 800192e:	2001      	movs	r0, #1
 8001930:	f7ff ff30 	bl	8001794 <Delay>
	WriteI2C(LCD.DISPLAYCTRL, LCD_COMMAND);
 8001934:	4b14      	ldr	r3, [pc, #80]	; (8001988 <CLCD_Init+0x144>)
 8001936:	7a5b      	ldrb	r3, [r3, #9]
 8001938:	2100      	movs	r1, #0
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff ff38 	bl	80017b0 <WriteI2C>
	Delay(1);
 8001940:	2001      	movs	r0, #1
 8001942:	f7ff ff27 	bl	8001794 <Delay>
	WriteI2C(LCD.CURSORSHIFT, LCD_COMMAND);
 8001946:	4b10      	ldr	r3, [pc, #64]	; (8001988 <CLCD_Init+0x144>)
 8001948:	7a9b      	ldrb	r3, [r3, #10]
 800194a:	2100      	movs	r1, #0
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff ff2f 	bl	80017b0 <WriteI2C>
	Delay(1);
 8001952:	2001      	movs	r0, #1
 8001954:	f7ff ff1e 	bl	8001794 <Delay>
	WriteI2C(LCD.FUNCTIONSET, LCD_COMMAND);
 8001958:	4b0b      	ldr	r3, [pc, #44]	; (8001988 <CLCD_Init+0x144>)
 800195a:	7a1b      	ldrb	r3, [r3, #8]
 800195c:	2100      	movs	r1, #0
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff ff26 	bl	80017b0 <WriteI2C>
	Delay(1);
 8001964:	2001      	movs	r0, #1
 8001966:	f7ff ff15 	bl	8001794 <Delay>

	WriteI2C(LCD_CLEARDISPLAY, LCD_COMMAND);
 800196a:	2100      	movs	r1, #0
 800196c:	2001      	movs	r0, #1
 800196e:	f7ff ff1f 	bl	80017b0 <WriteI2C>
	Delay(1);
 8001972:	2001      	movs	r0, #1
 8001974:	f7ff ff0e 	bl	8001794 <Delay>

	WriteI2C(LCD_RETURNHOME, LCD_COMMAND);
 8001978:	2100      	movs	r1, #0
 800197a:	2002      	movs	r0, #2
 800197c:	f7ff ff18 	bl	80017b0 <WriteI2C>
}
 8001980:	bf00      	nop
 8001982:	3710      	adds	r7, #16
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	20000124 	.word	0x20000124
 800198c:	20000120 	.word	0x20000120

08001990 <SetCursor>:


void SetCursor(uint8_t row, uint8_t col){
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	4603      	mov	r3, r0
 8001998:	460a      	mov	r2, r1
 800199a:	71fb      	strb	r3, [r7, #7]
 800199c:	4613      	mov	r3, r2
 800199e:	71bb      	strb	r3, [r7, #6]
	uint8_t address_dram = 0x00;
 80019a0:	2300      	movs	r3, #0
 80019a2:	73fb      	strb	r3, [r7, #15]

	row = row % LCD.ROW;
 80019a4:	4b1d      	ldr	r3, [pc, #116]	; (8001a1c <SetCursor+0x8c>)
 80019a6:	799a      	ldrb	r2, [r3, #6]
 80019a8:	79fb      	ldrb	r3, [r7, #7]
 80019aa:	fbb3 f1f2 	udiv	r1, r3, r2
 80019ae:	fb01 f202 	mul.w	r2, r1, r2
 80019b2:	1a9b      	subs	r3, r3, r2
 80019b4:	71fb      	strb	r3, [r7, #7]
	col = col % LCD.COL;
 80019b6:	4b19      	ldr	r3, [pc, #100]	; (8001a1c <SetCursor+0x8c>)
 80019b8:	795a      	ldrb	r2, [r3, #5]
 80019ba:	79bb      	ldrb	r3, [r7, #6]
 80019bc:	fbb3 f1f2 	udiv	r1, r3, r2
 80019c0:	fb01 f202 	mul.w	r2, r1, r2
 80019c4:	1a9b      	subs	r3, r3, r2
 80019c6:	71bb      	strb	r3, [r7, #6]

	switch(row){
 80019c8:	79fb      	ldrb	r3, [r7, #7]
 80019ca:	2b03      	cmp	r3, #3
 80019cc:	d819      	bhi.n	8001a02 <SetCursor+0x72>
 80019ce:	a201      	add	r2, pc, #4	; (adr r2, 80019d4 <SetCursor+0x44>)
 80019d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019d4:	080019e5 	.word	0x080019e5
 80019d8:	080019eb 	.word	0x080019eb
 80019dc:	080019f3 	.word	0x080019f3
 80019e0:	080019fb 	.word	0x080019fb
	case 0:
		address_dram = 0x00 + col;
 80019e4:	79bb      	ldrb	r3, [r7, #6]
 80019e6:	73fb      	strb	r3, [r7, #15]
		break;
 80019e8:	e00b      	b.n	8001a02 <SetCursor+0x72>
	case 1:
		address_dram = 0x40 + col;
 80019ea:	79bb      	ldrb	r3, [r7, #6]
 80019ec:	3340      	adds	r3, #64	; 0x40
 80019ee:	73fb      	strb	r3, [r7, #15]
		break;
 80019f0:	e007      	b.n	8001a02 <SetCursor+0x72>
	case 2:
		address_dram = 0x14 + col;
 80019f2:	79bb      	ldrb	r3, [r7, #6]
 80019f4:	3314      	adds	r3, #20
 80019f6:	73fb      	strb	r3, [r7, #15]
		break;
 80019f8:	e003      	b.n	8001a02 <SetCursor+0x72>
	case 3:
		address_dram = 0x54 + col;
 80019fa:	79bb      	ldrb	r3, [r7, #6]
 80019fc:	3354      	adds	r3, #84	; 0x54
 80019fe:	73fb      	strb	r3, [r7, #15]
		break;
 8001a00:	bf00      	nop
	}

	WriteI2C(LCD_SETDDRAMADDR | address_dram, LCD_COMMAND);
 8001a02:	7bfb      	ldrb	r3, [r7, #15]
 8001a04:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff fecf 	bl	80017b0 <WriteI2C>
}
 8001a12:	bf00      	nop
 8001a14:	3710      	adds	r7, #16
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	20000124 	.word	0x20000124

08001a20 <UpdateCharBuffer>:

void UpdateCharBuffer(uint8_t c){
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	4603      	mov	r3, r0
 8001a28:	71fb      	strb	r3, [r7, #7]
	Lcd_buffer[currentRow * LCD.COL + currentCol] = c;
 8001a2a:	4b0d      	ldr	r3, [pc, #52]	; (8001a60 <UpdateCharBuffer+0x40>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a0d      	ldr	r2, [pc, #52]	; (8001a64 <UpdateCharBuffer+0x44>)
 8001a30:	7812      	ldrb	r2, [r2, #0]
 8001a32:	4611      	mov	r1, r2
 8001a34:	4a0c      	ldr	r2, [pc, #48]	; (8001a68 <UpdateCharBuffer+0x48>)
 8001a36:	7952      	ldrb	r2, [r2, #5]
 8001a38:	fb01 f202 	mul.w	r2, r1, r2
 8001a3c:	490b      	ldr	r1, [pc, #44]	; (8001a6c <UpdateCharBuffer+0x4c>)
 8001a3e:	7809      	ldrb	r1, [r1, #0]
 8001a40:	440a      	add	r2, r1
 8001a42:	4413      	add	r3, r2
 8001a44:	79fa      	ldrb	r2, [r7, #7]
 8001a46:	701a      	strb	r2, [r3, #0]
	currentCol++;
 8001a48:	4b08      	ldr	r3, [pc, #32]	; (8001a6c <UpdateCharBuffer+0x4c>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	b2da      	uxtb	r2, r3
 8001a50:	4b06      	ldr	r3, [pc, #24]	; (8001a6c <UpdateCharBuffer+0x4c>)
 8001a52:	701a      	strb	r2, [r3, #0]
}
 8001a54:	bf00      	nop
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bc80      	pop	{r7}
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	20000120 	.word	0x20000120
 8001a64:	20000131 	.word	0x20000131
 8001a68:	20000124 	.word	0x20000124
 8001a6c:	20000130 	.word	0x20000130

08001a70 <CLCD_PrintCharBuffer>:

void CLCD_PrintCharBuffer(uint8_t row, uint8_t col, char c){
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	71fb      	strb	r3, [r7, #7]
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	71bb      	strb	r3, [r7, #6]
 8001a7e:	4613      	mov	r3, r2
 8001a80:	717b      	strb	r3, [r7, #5]
	currentRow = row % LCD.ROW;
 8001a82:	4b15      	ldr	r3, [pc, #84]	; (8001ad8 <CLCD_PrintCharBuffer+0x68>)
 8001a84:	799a      	ldrb	r2, [r3, #6]
 8001a86:	79fb      	ldrb	r3, [r7, #7]
 8001a88:	fbb3 f1f2 	udiv	r1, r3, r2
 8001a8c:	fb01 f202 	mul.w	r2, r1, r2
 8001a90:	1a9b      	subs	r3, r3, r2
 8001a92:	b2da      	uxtb	r2, r3
 8001a94:	4b11      	ldr	r3, [pc, #68]	; (8001adc <CLCD_PrintCharBuffer+0x6c>)
 8001a96:	701a      	strb	r2, [r3, #0]
	currentCol = col % LCD.COL;
 8001a98:	4b0f      	ldr	r3, [pc, #60]	; (8001ad8 <CLCD_PrintCharBuffer+0x68>)
 8001a9a:	795a      	ldrb	r2, [r3, #5]
 8001a9c:	79bb      	ldrb	r3, [r7, #6]
 8001a9e:	fbb3 f1f2 	udiv	r1, r3, r2
 8001aa2:	fb01 f202 	mul.w	r2, r1, r2
 8001aa6:	1a9b      	subs	r3, r3, r2
 8001aa8:	b2da      	uxtb	r2, r3
 8001aaa:	4b0d      	ldr	r3, [pc, #52]	; (8001ae0 <CLCD_PrintCharBuffer+0x70>)
 8001aac:	701a      	strb	r2, [r3, #0]
	Lcd_buffer[currentRow * LCD.COL + currentCol] = c;
 8001aae:	4b0d      	ldr	r3, [pc, #52]	; (8001ae4 <CLCD_PrintCharBuffer+0x74>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a0a      	ldr	r2, [pc, #40]	; (8001adc <CLCD_PrintCharBuffer+0x6c>)
 8001ab4:	7812      	ldrb	r2, [r2, #0]
 8001ab6:	4611      	mov	r1, r2
 8001ab8:	4a07      	ldr	r2, [pc, #28]	; (8001ad8 <CLCD_PrintCharBuffer+0x68>)
 8001aba:	7952      	ldrb	r2, [r2, #5]
 8001abc:	fb01 f202 	mul.w	r2, r1, r2
 8001ac0:	4907      	ldr	r1, [pc, #28]	; (8001ae0 <CLCD_PrintCharBuffer+0x70>)
 8001ac2:	7809      	ldrb	r1, [r1, #0]
 8001ac4:	440a      	add	r2, r1
 8001ac6:	4413      	add	r3, r2
 8001ac8:	797a      	ldrb	r2, [r7, #5]
 8001aca:	701a      	strb	r2, [r3, #0]
}
 8001acc:	bf00      	nop
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bc80      	pop	{r7}
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	20000124 	.word	0x20000124
 8001adc:	20000131 	.word	0x20000131
 8001ae0:	20000130 	.word	0x20000130
 8001ae4:	20000120 	.word	0x20000120

08001ae8 <CLCD_PrintStringBuffer>:

void CLCD_PrintStringBuffer(uint8_t row, uint8_t col, char* str){
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	603a      	str	r2, [r7, #0]
 8001af2:	71fb      	strb	r3, [r7, #7]
 8001af4:	460b      	mov	r3, r1
 8001af6:	71bb      	strb	r3, [r7, #6]
	currentRow = row % LCD.ROW;
 8001af8:	4b13      	ldr	r3, [pc, #76]	; (8001b48 <CLCD_PrintStringBuffer+0x60>)
 8001afa:	799a      	ldrb	r2, [r3, #6]
 8001afc:	79fb      	ldrb	r3, [r7, #7]
 8001afe:	fbb3 f1f2 	udiv	r1, r3, r2
 8001b02:	fb01 f202 	mul.w	r2, r1, r2
 8001b06:	1a9b      	subs	r3, r3, r2
 8001b08:	b2da      	uxtb	r2, r3
 8001b0a:	4b10      	ldr	r3, [pc, #64]	; (8001b4c <CLCD_PrintStringBuffer+0x64>)
 8001b0c:	701a      	strb	r2, [r3, #0]
	currentCol = col % LCD.COL;
 8001b0e:	4b0e      	ldr	r3, [pc, #56]	; (8001b48 <CLCD_PrintStringBuffer+0x60>)
 8001b10:	795a      	ldrb	r2, [r3, #5]
 8001b12:	79bb      	ldrb	r3, [r7, #6]
 8001b14:	fbb3 f1f2 	udiv	r1, r3, r2
 8001b18:	fb01 f202 	mul.w	r2, r1, r2
 8001b1c:	1a9b      	subs	r3, r3, r2
 8001b1e:	b2da      	uxtb	r2, r3
 8001b20:	4b0b      	ldr	r3, [pc, #44]	; (8001b50 <CLCD_PrintStringBuffer+0x68>)
 8001b22:	701a      	strb	r2, [r3, #0]
	while(*str){
 8001b24:	e006      	b.n	8001b34 <CLCD_PrintStringBuffer+0x4c>
		UpdateCharBuffer(*str++);
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	1c5a      	adds	r2, r3, #1
 8001b2a:	603a      	str	r2, [r7, #0]
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff ff76 	bl	8001a20 <UpdateCharBuffer>
	while(*str){
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d1f4      	bne.n	8001b26 <CLCD_PrintStringBuffer+0x3e>
	}
}
 8001b3c:	bf00      	nop
 8001b3e:	bf00      	nop
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	20000124 	.word	0x20000124
 8001b4c:	20000131 	.word	0x20000131
 8001b50:	20000130 	.word	0x20000130

08001b54 <CLCD_PrintNumBuffer>:

void CLCD_PrintNumBuffer(uint8_t row, uint8_t col, int16_t num){
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	71fb      	strb	r3, [r7, #7]
 8001b5e:	460b      	mov	r3, r1
 8001b60:	71bb      	strb	r3, [r7, #6]
 8001b62:	4613      	mov	r3, r2
 8001b64:	80bb      	strh	r3, [r7, #4]
    char flag_num = 0;
 8001b66:	2300      	movs	r3, #0
 8001b68:	73fb      	strb	r3, [r7, #15]
    unsigned char i;
    unsigned long power_of_10 = 1000000000;
 8001b6a:	4b30      	ldr	r3, [pc, #192]	; (8001c2c <CLCD_PrintNumBuffer+0xd8>)
 8001b6c:	60bb      	str	r3, [r7, #8]
    currentRow = row % 2;
 8001b6e:	79fb      	ldrb	r3, [r7, #7]
 8001b70:	f003 0301 	and.w	r3, r3, #1
 8001b74:	b2da      	uxtb	r2, r3
 8001b76:	4b2e      	ldr	r3, [pc, #184]	; (8001c30 <CLCD_PrintNumBuffer+0xdc>)
 8001b78:	701a      	strb	r2, [r3, #0]
    currentCol = col % 16;
 8001b7a:	79bb      	ldrb	r3, [r7, #6]
 8001b7c:	f003 030f 	and.w	r3, r3, #15
 8001b80:	b2da      	uxtb	r2, r3
 8001b82:	4b2c      	ldr	r3, [pc, #176]	; (8001c34 <CLCD_PrintNumBuffer+0xe0>)
 8001b84:	701a      	strb	r2, [r3, #0]

    if(num < 0) {
 8001b86:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	da07      	bge.n	8001b9e <CLCD_PrintNumBuffer+0x4a>
        num *= -1;
 8001b8e:	88bb      	ldrh	r3, [r7, #4]
 8001b90:	425b      	negs	r3, r3
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	80bb      	strh	r3, [r7, #4]
        UpdateCharBuffer('-');
 8001b96:	202d      	movs	r0, #45	; 0x2d
 8001b98:	f7ff ff42 	bl	8001a20 <UpdateCharBuffer>
 8001b9c:	e011      	b.n	8001bc2 <CLCD_PrintNumBuffer+0x6e>
    }
    else if(num == 0){
 8001b9e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d106      	bne.n	8001bb4 <CLCD_PrintNumBuffer+0x60>
    	UpdateCharBuffer('0');
 8001ba6:	2030      	movs	r0, #48	; 0x30
 8001ba8:	f7ff ff3a 	bl	8001a20 <UpdateCharBuffer>
    	UpdateCharBuffer('0');
 8001bac:	2030      	movs	r0, #48	; 0x30
 8001bae:	f7ff ff37 	bl	8001a20 <UpdateCharBuffer>
//        UpdateCharBuffer(' ');
//        UpdateCharBuffer(' ');
        return;
 8001bb2:	e038      	b.n	8001c26 <CLCD_PrintNumBuffer+0xd2>
    }

    else if(num < 10){
 8001bb4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001bb8:	2b09      	cmp	r3, #9
 8001bba:	dc02      	bgt.n	8001bc2 <CLCD_PrintNumBuffer+0x6e>
        UpdateCharBuffer('0');
 8001bbc:	2030      	movs	r0, #48	; 0x30
 8001bbe:	f7ff ff2f 	bl	8001a20 <UpdateCharBuffer>
    }

    for(i = 10; i > 0; i--){
 8001bc2:	230a      	movs	r3, #10
 8001bc4:	73bb      	strb	r3, [r7, #14]
 8001bc6:	e02b      	b.n	8001c20 <CLCD_PrintNumBuffer+0xcc>
        if( (num / power_of_10) != 0){
 8001bc8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001bcc:	68ba      	ldr	r2, [r7, #8]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d80d      	bhi.n	8001bee <CLCD_PrintNumBuffer+0x9a>
            flag_num = 1;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	73fb      	strb	r3, [r7, #15]
            UpdateCharBuffer(num / power_of_10 + '0');
 8001bd6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	3330      	adds	r3, #48	; 0x30
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff ff1a 	bl	8001a20 <UpdateCharBuffer>
 8001bec:	e005      	b.n	8001bfa <CLCD_PrintNumBuffer+0xa6>
        }
        else{
            if(flag_num != 0) UpdateCharBuffer('0');
 8001bee:	7bfb      	ldrb	r3, [r7, #15]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d002      	beq.n	8001bfa <CLCD_PrintNumBuffer+0xa6>
 8001bf4:	2030      	movs	r0, #48	; 0x30
 8001bf6:	f7ff ff13 	bl	8001a20 <UpdateCharBuffer>
        }
        num %= power_of_10;
 8001bfa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001bfe:	68ba      	ldr	r2, [r7, #8]
 8001c00:	fbb3 f2f2 	udiv	r2, r3, r2
 8001c04:	68b9      	ldr	r1, [r7, #8]
 8001c06:	fb01 f202 	mul.w	r2, r1, r2
 8001c0a:	1a9b      	subs	r3, r3, r2
 8001c0c:	80bb      	strh	r3, [r7, #4]
        power_of_10 /= 10;
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	4a09      	ldr	r2, [pc, #36]	; (8001c38 <CLCD_PrintNumBuffer+0xe4>)
 8001c12:	fba2 2303 	umull	r2, r3, r2, r3
 8001c16:	08db      	lsrs	r3, r3, #3
 8001c18:	60bb      	str	r3, [r7, #8]
    for(i = 10; i > 0; i--){
 8001c1a:	7bbb      	ldrb	r3, [r7, #14]
 8001c1c:	3b01      	subs	r3, #1
 8001c1e:	73bb      	strb	r3, [r7, #14]
 8001c20:	7bbb      	ldrb	r3, [r7, #14]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d1d0      	bne.n	8001bc8 <CLCD_PrintNumBuffer+0x74>
    }

//    UpdateCharBuffer(' ');
//    UpdateCharBuffer(' ');
}
 8001c26:	3710      	adds	r7, #16
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	3b9aca00 	.word	0x3b9aca00
 8001c30:	20000131 	.word	0x20000131
 8001c34:	20000130 	.word	0x20000130
 8001c38:	cccccccd 	.word	0xcccccccd

08001c3c <CLCD_PrintFloatBuffer>:


void CLCD_PrintFloatBuffer(uint8_t row, uint8_t col, float f){
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	603a      	str	r2, [r7, #0]
 8001c46:	71fb      	strb	r3, [r7, #7]
 8001c48:	460b      	mov	r3, r1
 8001c4a:	71bb      	strb	r3, [r7, #6]
	uint8_t integer_part, decimal_part;

	if(f >= 100) return;
 8001c4c:	492f      	ldr	r1, [pc, #188]	; (8001d0c <CLCD_PrintFloatBuffer+0xd0>)
 8001c4e:	6838      	ldr	r0, [r7, #0]
 8001c50:	f7fe fca0 	bl	8000594 <__aeabi_fcmpge>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d153      	bne.n	8001d02 <CLCD_PrintFloatBuffer+0xc6>

    currentRow = row % 2;
 8001c5a:	79fb      	ldrb	r3, [r7, #7]
 8001c5c:	f003 0301 	and.w	r3, r3, #1
 8001c60:	b2da      	uxtb	r2, r3
 8001c62:	4b2b      	ldr	r3, [pc, #172]	; (8001d10 <CLCD_PrintFloatBuffer+0xd4>)
 8001c64:	701a      	strb	r2, [r3, #0]
    currentCol = col % 16;
 8001c66:	79bb      	ldrb	r3, [r7, #6]
 8001c68:	f003 030f 	and.w	r3, r3, #15
 8001c6c:	b2da      	uxtb	r2, r3
 8001c6e:	4b29      	ldr	r3, [pc, #164]	; (8001d14 <CLCD_PrintFloatBuffer+0xd8>)
 8001c70:	701a      	strb	r2, [r3, #0]

    integer_part = (uint8_t) f;
 8001c72:	6838      	ldr	r0, [r7, #0]
 8001c74:	f7fe fca2 	bl	80005bc <__aeabi_f2uiz>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	73fb      	strb	r3, [r7, #15]
    decimal_part = (uint8_t) ((f - integer_part)*10);
 8001c7c:	7bfb      	ldrb	r3, [r7, #15]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7fe fbd2 	bl	8000428 <__aeabi_i2f>
 8001c84:	4603      	mov	r3, r0
 8001c86:	4619      	mov	r1, r3
 8001c88:	6838      	ldr	r0, [r7, #0]
 8001c8a:	f7fe fb17 	bl	80002bc <__aeabi_fsub>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	4921      	ldr	r1, [pc, #132]	; (8001d18 <CLCD_PrintFloatBuffer+0xdc>)
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7fe fa5a 	bl	800014c <__aeabi_fmul>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7fe fc8e 	bl	80005bc <__aeabi_f2uiz>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	73bb      	strb	r3, [r7, #14]

    UpdateCharBuffer(integer_part / 10 + '0');
 8001ca4:	7bfb      	ldrb	r3, [r7, #15]
 8001ca6:	4a1d      	ldr	r2, [pc, #116]	; (8001d1c <CLCD_PrintFloatBuffer+0xe0>)
 8001ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8001cac:	08db      	lsrs	r3, r3, #3
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	3330      	adds	r3, #48	; 0x30
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff feb3 	bl	8001a20 <UpdateCharBuffer>
    UpdateCharBuffer(integer_part % 10 + '0');
 8001cba:	7bfa      	ldrb	r2, [r7, #15]
 8001cbc:	4b17      	ldr	r3, [pc, #92]	; (8001d1c <CLCD_PrintFloatBuffer+0xe0>)
 8001cbe:	fba3 1302 	umull	r1, r3, r3, r2
 8001cc2:	08d9      	lsrs	r1, r3, #3
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	440b      	add	r3, r1
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	3330      	adds	r3, #48	; 0x30
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7ff fea3 	bl	8001a20 <UpdateCharBuffer>
    UpdateCharBuffer('.');
 8001cda:	202e      	movs	r0, #46	; 0x2e
 8001cdc:	f7ff fea0 	bl	8001a20 <UpdateCharBuffer>
    UpdateCharBuffer(decimal_part % 10 + '0');
 8001ce0:	7bba      	ldrb	r2, [r7, #14]
 8001ce2:	4b0e      	ldr	r3, [pc, #56]	; (8001d1c <CLCD_PrintFloatBuffer+0xe0>)
 8001ce4:	fba3 1302 	umull	r1, r3, r3, r2
 8001ce8:	08d9      	lsrs	r1, r3, #3
 8001cea:	460b      	mov	r3, r1
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	440b      	add	r3, r1
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	3330      	adds	r3, #48	; 0x30
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff fe90 	bl	8001a20 <UpdateCharBuffer>
 8001d00:	e000      	b.n	8001d04 <CLCD_PrintFloatBuffer+0xc8>
	if(f >= 100) return;
 8001d02:	bf00      	nop
}
 8001d04:	3710      	adds	r7, #16
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	42c80000 	.word	0x42c80000
 8001d10:	20000131 	.word	0x20000131
 8001d14:	20000130 	.word	0x20000130
 8001d18:	41200000 	.word	0x41200000
 8001d1c:	cccccccd 	.word	0xcccccccd

08001d20 <CLCD_DisplayScreen>:
	uint8_t i;

	for(i = 0; i < LCD.ROW * LCD.COL; i++) Lcd_buffer[i] = ' ';
}

void CLCD_DisplayScreen(void){
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
	uint8_t i, j;

	for(i = 0; i < LCD.ROW; i++){
 8001d26:	2300      	movs	r3, #0
 8001d28:	71fb      	strb	r3, [r7, #7]
 8001d2a:	e021      	b.n	8001d70 <CLCD_DisplayScreen+0x50>
		SetCursor(i, 0);
 8001d2c:	79fb      	ldrb	r3, [r7, #7]
 8001d2e:	2100      	movs	r1, #0
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7ff fe2d 	bl	8001990 <SetCursor>
		for(j = 0; j < LCD.COL; j++){
 8001d36:	2300      	movs	r3, #0
 8001d38:	71bb      	strb	r3, [r7, #6]
 8001d3a:	e011      	b.n	8001d60 <CLCD_DisplayScreen+0x40>
			WriteI2C(Lcd_buffer[i * LCD.COL + j], LCD_DATA);
 8001d3c:	4b11      	ldr	r3, [pc, #68]	; (8001d84 <CLCD_DisplayScreen+0x64>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	79fa      	ldrb	r2, [r7, #7]
 8001d42:	4911      	ldr	r1, [pc, #68]	; (8001d88 <CLCD_DisplayScreen+0x68>)
 8001d44:	7949      	ldrb	r1, [r1, #5]
 8001d46:	fb02 f101 	mul.w	r1, r2, r1
 8001d4a:	79ba      	ldrb	r2, [r7, #6]
 8001d4c:	440a      	add	r2, r1
 8001d4e:	4413      	add	r3, r2
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	2101      	movs	r1, #1
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff fd2b 	bl	80017b0 <WriteI2C>
		for(j = 0; j < LCD.COL; j++){
 8001d5a:	79bb      	ldrb	r3, [r7, #6]
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	71bb      	strb	r3, [r7, #6]
 8001d60:	4b09      	ldr	r3, [pc, #36]	; (8001d88 <CLCD_DisplayScreen+0x68>)
 8001d62:	795b      	ldrb	r3, [r3, #5]
 8001d64:	79ba      	ldrb	r2, [r7, #6]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d3e8      	bcc.n	8001d3c <CLCD_DisplayScreen+0x1c>
	for(i = 0; i < LCD.ROW; i++){
 8001d6a:	79fb      	ldrb	r3, [r7, #7]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	71fb      	strb	r3, [r7, #7]
 8001d70:	4b05      	ldr	r3, [pc, #20]	; (8001d88 <CLCD_DisplayScreen+0x68>)
 8001d72:	799b      	ldrb	r3, [r3, #6]
 8001d74:	79fa      	ldrb	r2, [r7, #7]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d3d8      	bcc.n	8001d2c <CLCD_DisplayScreen+0xc>
		}
	}
}
 8001d7a:	bf00      	nop
 8001d7c:	bf00      	nop
 8001d7e:	3708      	adds	r7, #8
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	20000120 	.word	0x20000120
 8001d88:	20000124 	.word	0x20000124

08001d8c <CLCD_CreateChar>:

//=============CUSTOM CHAR=============//
void CLCD_CreateChar(uint8_t addr, uint8_t* custom_arr){
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4603      	mov	r3, r0
 8001d94:	6039      	str	r1, [r7, #0]
 8001d96:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	WriteI2C(LCD_SETCGRAMADDR + 8*addr, LCD_COMMAND);
 8001d98:	79fb      	ldrb	r3, [r7, #7]
 8001d9a:	3308      	adds	r3, #8
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	00db      	lsls	r3, r3, #3
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	2100      	movs	r1, #0
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7ff fd03 	bl	80017b0 <WriteI2C>

	for(i = 0; i < 8; i++){
 8001daa:	2300      	movs	r3, #0
 8001dac:	73fb      	strb	r3, [r7, #15]
 8001dae:	e00a      	b.n	8001dc6 <CLCD_CreateChar+0x3a>
		WriteI2C(custom_arr[i], LCD_DATA);
 8001db0:	7bfb      	ldrb	r3, [r7, #15]
 8001db2:	683a      	ldr	r2, [r7, #0]
 8001db4:	4413      	add	r3, r2
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	2101      	movs	r1, #1
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7ff fcf8 	bl	80017b0 <WriteI2C>
	for(i = 0; i < 8; i++){
 8001dc0:	7bfb      	ldrb	r3, [r7, #15]
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	73fb      	strb	r3, [r7, #15]
 8001dc6:	7bfb      	ldrb	r3, [r7, #15]
 8001dc8:	2b07      	cmp	r3, #7
 8001dca:	d9f1      	bls.n	8001db0 <CLCD_CreateChar+0x24>
	}
}
 8001dcc:	bf00      	nop
 8001dce:	bf00      	nop
 8001dd0:	3710      	adds	r7, #16
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
	...

08001dd8 <CLCD_InitBigDigit>:

void CLCD_InitBigDigit(void){
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
	CLCD_CreateChar(0, LT);
 8001ddc:	490e      	ldr	r1, [pc, #56]	; (8001e18 <CLCD_InitBigDigit+0x40>)
 8001dde:	2000      	movs	r0, #0
 8001de0:	f7ff ffd4 	bl	8001d8c <CLCD_CreateChar>
	CLCD_CreateChar(1, UB);
 8001de4:	490d      	ldr	r1, [pc, #52]	; (8001e1c <CLCD_InitBigDigit+0x44>)
 8001de6:	2001      	movs	r0, #1
 8001de8:	f7ff ffd0 	bl	8001d8c <CLCD_CreateChar>
	CLCD_CreateChar(2, RT);
 8001dec:	490c      	ldr	r1, [pc, #48]	; (8001e20 <CLCD_InitBigDigit+0x48>)
 8001dee:	2002      	movs	r0, #2
 8001df0:	f7ff ffcc 	bl	8001d8c <CLCD_CreateChar>
	CLCD_CreateChar(3, LL);
 8001df4:	490b      	ldr	r1, [pc, #44]	; (8001e24 <CLCD_InitBigDigit+0x4c>)
 8001df6:	2003      	movs	r0, #3
 8001df8:	f7ff ffc8 	bl	8001d8c <CLCD_CreateChar>
	CLCD_CreateChar(4, LB);
 8001dfc:	490a      	ldr	r1, [pc, #40]	; (8001e28 <CLCD_InitBigDigit+0x50>)
 8001dfe:	2004      	movs	r0, #4
 8001e00:	f7ff ffc4 	bl	8001d8c <CLCD_CreateChar>
	CLCD_CreateChar(5, LR);
 8001e04:	4909      	ldr	r1, [pc, #36]	; (8001e2c <CLCD_InitBigDigit+0x54>)
 8001e06:	2005      	movs	r0, #5
 8001e08:	f7ff ffc0 	bl	8001d8c <CLCD_CreateChar>
	CLCD_CreateChar(6, MB);
 8001e0c:	4908      	ldr	r1, [pc, #32]	; (8001e30 <CLCD_InitBigDigit+0x58>)
 8001e0e:	2006      	movs	r0, #6
 8001e10:	f7ff ffbc 	bl	8001d8c <CLCD_CreateChar>
}
 8001e14:	bf00      	nop
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	20000014 	.word	0x20000014
 8001e1c:	2000001c 	.word	0x2000001c
 8001e20:	20000024 	.word	0x20000024
 8001e24:	2000002c 	.word	0x2000002c
 8001e28:	20000034 	.word	0x20000034
 8001e2c:	2000003c 	.word	0x2000003c
 8001e30:	20000044 	.word	0x20000044

08001e34 <CLCD_PrintBigDigitBuffer>:

void CLCD_PrintBigDigitBuffer(uint8_t col, int8_t digit){
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	460a      	mov	r2, r1
 8001e3e:	71fb      	strb	r3, [r7, #7]
 8001e40:	4613      	mov	r3, r2
 8001e42:	71bb      	strb	r3, [r7, #6]
	currentRow = 0;
 8001e44:	4bae      	ldr	r3, [pc, #696]	; (8002100 <CLCD_PrintBigDigitBuffer+0x2cc>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	701a      	strb	r2, [r3, #0]
	currentCol = col % 16;
 8001e4a:	79fb      	ldrb	r3, [r7, #7]
 8001e4c:	f003 030f 	and.w	r3, r3, #15
 8001e50:	b2da      	uxtb	r2, r3
 8001e52:	4bac      	ldr	r3, [pc, #688]	; (8002104 <CLCD_PrintBigDigitBuffer+0x2d0>)
 8001e54:	701a      	strb	r2, [r3, #0]

	switch(digit){
 8001e56:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001e5a:	2b09      	cmp	r3, #9
 8001e5c:	f200 8130 	bhi.w	80020c0 <CLCD_PrintBigDigitBuffer+0x28c>
 8001e60:	a201      	add	r2, pc, #4	; (adr r2, 8001e68 <CLCD_PrintBigDigitBuffer+0x34>)
 8001e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e66:	bf00      	nop
 8001e68:	08001e91 	.word	0x08001e91
 8001e6c:	08001ec9 	.word	0x08001ec9
 8001e70:	08001f01 	.word	0x08001f01
 8001e74:	08001f39 	.word	0x08001f39
 8001e78:	08001f71 	.word	0x08001f71
 8001e7c:	08001fa9 	.word	0x08001fa9
 8001e80:	08001fe1 	.word	0x08001fe1
 8001e84:	08002019 	.word	0x08002019
 8001e88:	08002051 	.word	0x08002051
 8001e8c:	08002089 	.word	0x08002089
	case 0:
		UpdateCharBuffer(0);
 8001e90:	2000      	movs	r0, #0
 8001e92:	f7ff fdc5 	bl	8001a20 <UpdateCharBuffer>
		UpdateCharBuffer(1);
 8001e96:	2001      	movs	r0, #1
 8001e98:	f7ff fdc2 	bl	8001a20 <UpdateCharBuffer>
		UpdateCharBuffer(2);
 8001e9c:	2002      	movs	r0, #2
 8001e9e:	f7ff fdbf 	bl	8001a20 <UpdateCharBuffer>

		currentRow = 1;
 8001ea2:	4b97      	ldr	r3, [pc, #604]	; (8002100 <CLCD_PrintBigDigitBuffer+0x2cc>)
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	701a      	strb	r2, [r3, #0]
		currentCol = col % 16;
 8001ea8:	79fb      	ldrb	r3, [r7, #7]
 8001eaa:	f003 030f 	and.w	r3, r3, #15
 8001eae:	b2da      	uxtb	r2, r3
 8001eb0:	4b94      	ldr	r3, [pc, #592]	; (8002104 <CLCD_PrintBigDigitBuffer+0x2d0>)
 8001eb2:	701a      	strb	r2, [r3, #0]

		UpdateCharBuffer(3);
 8001eb4:	2003      	movs	r0, #3
 8001eb6:	f7ff fdb3 	bl	8001a20 <UpdateCharBuffer>
		UpdateCharBuffer(4);
 8001eba:	2004      	movs	r0, #4
 8001ebc:	f7ff fdb0 	bl	8001a20 <UpdateCharBuffer>
		UpdateCharBuffer(5);
 8001ec0:	2005      	movs	r0, #5
 8001ec2:	f7ff fdad 	bl	8001a20 <UpdateCharBuffer>
		break;
 8001ec6:	e117      	b.n	80020f8 <CLCD_PrintBigDigitBuffer+0x2c4>
	case 1:
		UpdateCharBuffer(1);
 8001ec8:	2001      	movs	r0, #1
 8001eca:	f7ff fda9 	bl	8001a20 <UpdateCharBuffer>
		UpdateCharBuffer(2);
 8001ece:	2002      	movs	r0, #2
 8001ed0:	f7ff fda6 	bl	8001a20 <UpdateCharBuffer>
		UpdateCharBuffer(' ');
 8001ed4:	2020      	movs	r0, #32
 8001ed6:	f7ff fda3 	bl	8001a20 <UpdateCharBuffer>

		currentRow = 1;
 8001eda:	4b89      	ldr	r3, [pc, #548]	; (8002100 <CLCD_PrintBigDigitBuffer+0x2cc>)
 8001edc:	2201      	movs	r2, #1
 8001ede:	701a      	strb	r2, [r3, #0]
		currentCol = col % 16;
 8001ee0:	79fb      	ldrb	r3, [r7, #7]
 8001ee2:	f003 030f 	and.w	r3, r3, #15
 8001ee6:	b2da      	uxtb	r2, r3
 8001ee8:	4b86      	ldr	r3, [pc, #536]	; (8002104 <CLCD_PrintBigDigitBuffer+0x2d0>)
 8001eea:	701a      	strb	r2, [r3, #0]

		UpdateCharBuffer(4);
 8001eec:	2004      	movs	r0, #4
 8001eee:	f7ff fd97 	bl	8001a20 <UpdateCharBuffer>
		UpdateCharBuffer(0xFF);
 8001ef2:	20ff      	movs	r0, #255	; 0xff
 8001ef4:	f7ff fd94 	bl	8001a20 <UpdateCharBuffer>
		UpdateCharBuffer(4);
 8001ef8:	2004      	movs	r0, #4
 8001efa:	f7ff fd91 	bl	8001a20 <UpdateCharBuffer>
		break;
 8001efe:	e0fb      	b.n	80020f8 <CLCD_PrintBigDigitBuffer+0x2c4>
	case 2:
		UpdateCharBuffer(6);
 8001f00:	2006      	movs	r0, #6
 8001f02:	f7ff fd8d 	bl	8001a20 <UpdateCharBuffer>
		UpdateCharBuffer(6);
 8001f06:	2006      	movs	r0, #6
 8001f08:	f7ff fd8a 	bl	8001a20 <UpdateCharBuffer>
		UpdateCharBuffer(2);
 8001f0c:	2002      	movs	r0, #2
 8001f0e:	f7ff fd87 	bl	8001a20 <UpdateCharBuffer>

		currentRow = 1;
 8001f12:	4b7b      	ldr	r3, [pc, #492]	; (8002100 <CLCD_PrintBigDigitBuffer+0x2cc>)
 8001f14:	2201      	movs	r2, #1
 8001f16:	701a      	strb	r2, [r3, #0]
		currentCol = col % 16;
 8001f18:	79fb      	ldrb	r3, [r7, #7]
 8001f1a:	f003 030f 	and.w	r3, r3, #15
 8001f1e:	b2da      	uxtb	r2, r3
 8001f20:	4b78      	ldr	r3, [pc, #480]	; (8002104 <CLCD_PrintBigDigitBuffer+0x2d0>)
 8001f22:	701a      	strb	r2, [r3, #0]

		UpdateCharBuffer(3);
 8001f24:	2003      	movs	r0, #3
 8001f26:	f7ff fd7b 	bl	8001a20 <UpdateCharBuffer>
		UpdateCharBuffer(4);
 8001f2a:	2004      	movs	r0, #4
 8001f2c:	f7ff fd78 	bl	8001a20 <UpdateCharBuffer>
		UpdateCharBuffer(4);
 8001f30:	2004      	movs	r0, #4
 8001f32:	f7ff fd75 	bl	8001a20 <UpdateCharBuffer>
		break;
 8001f36:	e0df      	b.n	80020f8 <CLCD_PrintBigDigitBuffer+0x2c4>
	case 3:
		UpdateCharBuffer(6);
 8001f38:	2006      	movs	r0, #6
 8001f3a:	f7ff fd71 	bl	8001a20 <UpdateCharBuffer>
		UpdateCharBuffer(6);
 8001f3e:	2006      	movs	r0, #6
 8001f40:	f7ff fd6e 	bl	8001a20 <UpdateCharBuffer>
		UpdateCharBuffer(2);
 8001f44:	2002      	movs	r0, #2
 8001f46:	f7ff fd6b 	bl	8001a20 <UpdateCharBuffer>

		currentRow = 1;
 8001f4a:	4b6d      	ldr	r3, [pc, #436]	; (8002100 <CLCD_PrintBigDigitBuffer+0x2cc>)
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	701a      	strb	r2, [r3, #0]
		currentCol = col % 16;
 8001f50:	79fb      	ldrb	r3, [r7, #7]
 8001f52:	f003 030f 	and.w	r3, r3, #15
 8001f56:	b2da      	uxtb	r2, r3
 8001f58:	4b6a      	ldr	r3, [pc, #424]	; (8002104 <CLCD_PrintBigDigitBuffer+0x2d0>)
 8001f5a:	701a      	strb	r2, [r3, #0]

		UpdateCharBuffer(4);
 8001f5c:	2004      	movs	r0, #4
 8001f5e:	f7ff fd5f 	bl	8001a20 <UpdateCharBuffer>
		UpdateCharBuffer(4);
 8001f62:	2004      	movs	r0, #4
 8001f64:	f7ff fd5c 	bl	8001a20 <UpdateCharBuffer>
		UpdateCharBuffer(5);
 8001f68:	2005      	movs	r0, #5
 8001f6a:	f7ff fd59 	bl	8001a20 <UpdateCharBuffer>
		break;
 8001f6e:	e0c3      	b.n	80020f8 <CLCD_PrintBigDigitBuffer+0x2c4>
	case 4:
		UpdateCharBuffer(3);
 8001f70:	2003      	movs	r0, #3
 8001f72:	f7ff fd55 	bl	8001a20 <UpdateCharBuffer>
		UpdateCharBuffer(4);
 8001f76:	2004      	movs	r0, #4
 8001f78:	f7ff fd52 	bl	8001a20 <UpdateCharBuffer>
		UpdateCharBuffer(2);
 8001f7c:	2002      	movs	r0, #2
 8001f7e:	f7ff fd4f 	bl	8001a20 <UpdateCharBuffer>

		currentRow = 1;
 8001f82:	4b5f      	ldr	r3, [pc, #380]	; (8002100 <CLCD_PrintBigDigitBuffer+0x2cc>)
 8001f84:	2201      	movs	r2, #1
 8001f86:	701a      	strb	r2, [r3, #0]
		currentCol = col % 16;
 8001f88:	79fb      	ldrb	r3, [r7, #7]
 8001f8a:	f003 030f 	and.w	r3, r3, #15
 8001f8e:	b2da      	uxtb	r2, r3
 8001f90:	4b5c      	ldr	r3, [pc, #368]	; (8002104 <CLCD_PrintBigDigitBuffer+0x2d0>)
 8001f92:	701a      	strb	r2, [r3, #0]

		UpdateCharBuffer(' ');
 8001f94:	2020      	movs	r0, #32
 8001f96:	f7ff fd43 	bl	8001a20 <UpdateCharBuffer>
		UpdateCharBuffer(' ');
 8001f9a:	2020      	movs	r0, #32
 8001f9c:	f7ff fd40 	bl	8001a20 <UpdateCharBuffer>
		UpdateCharBuffer(0xFF);
 8001fa0:	20ff      	movs	r0, #255	; 0xff
 8001fa2:	f7ff fd3d 	bl	8001a20 <UpdateCharBuffer>
		break;
 8001fa6:	e0a7      	b.n	80020f8 <CLCD_PrintBigDigitBuffer+0x2c4>
	case 5:
		UpdateCharBuffer(3);
 8001fa8:	2003      	movs	r0, #3
 8001faa:	f7ff fd39 	bl	8001a20 <UpdateCharBuffer>
		UpdateCharBuffer(6);
 8001fae:	2006      	movs	r0, #6
 8001fb0:	f7ff fd36 	bl	8001a20 <UpdateCharBuffer>
		UpdateCharBuffer(6);
 8001fb4:	2006      	movs	r0, #6
 8001fb6:	f7ff fd33 	bl	8001a20 <UpdateCharBuffer>

		currentRow = 1;
 8001fba:	4b51      	ldr	r3, [pc, #324]	; (8002100 <CLCD_PrintBigDigitBuffer+0x2cc>)
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	701a      	strb	r2, [r3, #0]
		currentCol = col % 16;
 8001fc0:	79fb      	ldrb	r3, [r7, #7]
 8001fc2:	f003 030f 	and.w	r3, r3, #15
 8001fc6:	b2da      	uxtb	r2, r3
 8001fc8:	4b4e      	ldr	r3, [pc, #312]	; (8002104 <CLCD_PrintBigDigitBuffer+0x2d0>)
 8001fca:	701a      	strb	r2, [r3, #0]

		UpdateCharBuffer(4);
 8001fcc:	2004      	movs	r0, #4
 8001fce:	f7ff fd27 	bl	8001a20 <UpdateCharBuffer>
		UpdateCharBuffer(4);
 8001fd2:	2004      	movs	r0, #4
 8001fd4:	f7ff fd24 	bl	8001a20 <UpdateCharBuffer>
		UpdateCharBuffer(5);
 8001fd8:	2005      	movs	r0, #5
 8001fda:	f7ff fd21 	bl	8001a20 <UpdateCharBuffer>
		break;
 8001fde:	e08b      	b.n	80020f8 <CLCD_PrintBigDigitBuffer+0x2c4>
	case 6:
		UpdateCharBuffer(0);
 8001fe0:	2000      	movs	r0, #0
 8001fe2:	f7ff fd1d 	bl	8001a20 <UpdateCharBuffer>
		UpdateCharBuffer(6);
 8001fe6:	2006      	movs	r0, #6
 8001fe8:	f7ff fd1a 	bl	8001a20 <UpdateCharBuffer>
		UpdateCharBuffer(6);
 8001fec:	2006      	movs	r0, #6
 8001fee:	f7ff fd17 	bl	8001a20 <UpdateCharBuffer>

		currentRow = 1;
 8001ff2:	4b43      	ldr	r3, [pc, #268]	; (8002100 <CLCD_PrintBigDigitBuffer+0x2cc>)
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	701a      	strb	r2, [r3, #0]
		currentCol = col % 16;
 8001ff8:	79fb      	ldrb	r3, [r7, #7]
 8001ffa:	f003 030f 	and.w	r3, r3, #15
 8001ffe:	b2da      	uxtb	r2, r3
 8002000:	4b40      	ldr	r3, [pc, #256]	; (8002104 <CLCD_PrintBigDigitBuffer+0x2d0>)
 8002002:	701a      	strb	r2, [r3, #0]

		UpdateCharBuffer(3);
 8002004:	2003      	movs	r0, #3
 8002006:	f7ff fd0b 	bl	8001a20 <UpdateCharBuffer>
		UpdateCharBuffer(4);
 800200a:	2004      	movs	r0, #4
 800200c:	f7ff fd08 	bl	8001a20 <UpdateCharBuffer>
		UpdateCharBuffer(5);
 8002010:	2005      	movs	r0, #5
 8002012:	f7ff fd05 	bl	8001a20 <UpdateCharBuffer>
		break;
 8002016:	e06f      	b.n	80020f8 <CLCD_PrintBigDigitBuffer+0x2c4>
	case 7:
		UpdateCharBuffer(1);
 8002018:	2001      	movs	r0, #1
 800201a:	f7ff fd01 	bl	8001a20 <UpdateCharBuffer>
		UpdateCharBuffer(1);
 800201e:	2001      	movs	r0, #1
 8002020:	f7ff fcfe 	bl	8001a20 <UpdateCharBuffer>
		UpdateCharBuffer(2);
 8002024:	2002      	movs	r0, #2
 8002026:	f7ff fcfb 	bl	8001a20 <UpdateCharBuffer>

		currentRow = 1;
 800202a:	4b35      	ldr	r3, [pc, #212]	; (8002100 <CLCD_PrintBigDigitBuffer+0x2cc>)
 800202c:	2201      	movs	r2, #1
 800202e:	701a      	strb	r2, [r3, #0]
		currentCol = col % 16;
 8002030:	79fb      	ldrb	r3, [r7, #7]
 8002032:	f003 030f 	and.w	r3, r3, #15
 8002036:	b2da      	uxtb	r2, r3
 8002038:	4b32      	ldr	r3, [pc, #200]	; (8002104 <CLCD_PrintBigDigitBuffer+0x2d0>)
 800203a:	701a      	strb	r2, [r3, #0]

		UpdateCharBuffer(' ');
 800203c:	2020      	movs	r0, #32
 800203e:	f7ff fcef 	bl	8001a20 <UpdateCharBuffer>
		UpdateCharBuffer(' ');
 8002042:	2020      	movs	r0, #32
 8002044:	f7ff fcec 	bl	8001a20 <UpdateCharBuffer>
		UpdateCharBuffer(5);
 8002048:	2005      	movs	r0, #5
 800204a:	f7ff fce9 	bl	8001a20 <UpdateCharBuffer>
		break;
 800204e:	e053      	b.n	80020f8 <CLCD_PrintBigDigitBuffer+0x2c4>
	case 8:
		UpdateCharBuffer(0);
 8002050:	2000      	movs	r0, #0
 8002052:	f7ff fce5 	bl	8001a20 <UpdateCharBuffer>
		UpdateCharBuffer(6);
 8002056:	2006      	movs	r0, #6
 8002058:	f7ff fce2 	bl	8001a20 <UpdateCharBuffer>
		UpdateCharBuffer(2);
 800205c:	2002      	movs	r0, #2
 800205e:	f7ff fcdf 	bl	8001a20 <UpdateCharBuffer>

		currentRow = 1;
 8002062:	4b27      	ldr	r3, [pc, #156]	; (8002100 <CLCD_PrintBigDigitBuffer+0x2cc>)
 8002064:	2201      	movs	r2, #1
 8002066:	701a      	strb	r2, [r3, #0]
		currentCol = col % 16;
 8002068:	79fb      	ldrb	r3, [r7, #7]
 800206a:	f003 030f 	and.w	r3, r3, #15
 800206e:	b2da      	uxtb	r2, r3
 8002070:	4b24      	ldr	r3, [pc, #144]	; (8002104 <CLCD_PrintBigDigitBuffer+0x2d0>)
 8002072:	701a      	strb	r2, [r3, #0]

		UpdateCharBuffer(3);
 8002074:	2003      	movs	r0, #3
 8002076:	f7ff fcd3 	bl	8001a20 <UpdateCharBuffer>
		UpdateCharBuffer(4);
 800207a:	2004      	movs	r0, #4
 800207c:	f7ff fcd0 	bl	8001a20 <UpdateCharBuffer>
		UpdateCharBuffer(5);
 8002080:	2005      	movs	r0, #5
 8002082:	f7ff fccd 	bl	8001a20 <UpdateCharBuffer>
		break;
 8002086:	e037      	b.n	80020f8 <CLCD_PrintBigDigitBuffer+0x2c4>
	case 9:
		UpdateCharBuffer(0);
 8002088:	2000      	movs	r0, #0
 800208a:	f7ff fcc9 	bl	8001a20 <UpdateCharBuffer>
		UpdateCharBuffer(6);
 800208e:	2006      	movs	r0, #6
 8002090:	f7ff fcc6 	bl	8001a20 <UpdateCharBuffer>
		UpdateCharBuffer(2);
 8002094:	2002      	movs	r0, #2
 8002096:	f7ff fcc3 	bl	8001a20 <UpdateCharBuffer>

		currentRow = 1;
 800209a:	4b19      	ldr	r3, [pc, #100]	; (8002100 <CLCD_PrintBigDigitBuffer+0x2cc>)
 800209c:	2201      	movs	r2, #1
 800209e:	701a      	strb	r2, [r3, #0]
		currentCol = col % 16;
 80020a0:	79fb      	ldrb	r3, [r7, #7]
 80020a2:	f003 030f 	and.w	r3, r3, #15
 80020a6:	b2da      	uxtb	r2, r3
 80020a8:	4b16      	ldr	r3, [pc, #88]	; (8002104 <CLCD_PrintBigDigitBuffer+0x2d0>)
 80020aa:	701a      	strb	r2, [r3, #0]

		UpdateCharBuffer(4);
 80020ac:	2004      	movs	r0, #4
 80020ae:	f7ff fcb7 	bl	8001a20 <UpdateCharBuffer>
		UpdateCharBuffer(4);
 80020b2:	2004      	movs	r0, #4
 80020b4:	f7ff fcb4 	bl	8001a20 <UpdateCharBuffer>
		UpdateCharBuffer(5);
 80020b8:	2005      	movs	r0, #5
 80020ba:	f7ff fcb1 	bl	8001a20 <UpdateCharBuffer>
		break;
 80020be:	e01b      	b.n	80020f8 <CLCD_PrintBigDigitBuffer+0x2c4>
	default:
		UpdateCharBuffer(' ');
 80020c0:	2020      	movs	r0, #32
 80020c2:	f7ff fcad 	bl	8001a20 <UpdateCharBuffer>
		UpdateCharBuffer(' ');
 80020c6:	2020      	movs	r0, #32
 80020c8:	f7ff fcaa 	bl	8001a20 <UpdateCharBuffer>
		UpdateCharBuffer(' ');
 80020cc:	2020      	movs	r0, #32
 80020ce:	f7ff fca7 	bl	8001a20 <UpdateCharBuffer>

		currentRow = 1;
 80020d2:	4b0b      	ldr	r3, [pc, #44]	; (8002100 <CLCD_PrintBigDigitBuffer+0x2cc>)
 80020d4:	2201      	movs	r2, #1
 80020d6:	701a      	strb	r2, [r3, #0]
		currentCol = col % 16;
 80020d8:	79fb      	ldrb	r3, [r7, #7]
 80020da:	f003 030f 	and.w	r3, r3, #15
 80020de:	b2da      	uxtb	r2, r3
 80020e0:	4b08      	ldr	r3, [pc, #32]	; (8002104 <CLCD_PrintBigDigitBuffer+0x2d0>)
 80020e2:	701a      	strb	r2, [r3, #0]

		UpdateCharBuffer(' ');
 80020e4:	2020      	movs	r0, #32
 80020e6:	f7ff fc9b 	bl	8001a20 <UpdateCharBuffer>
		UpdateCharBuffer(' ');
 80020ea:	2020      	movs	r0, #32
 80020ec:	f7ff fc98 	bl	8001a20 <UpdateCharBuffer>
		UpdateCharBuffer(' ');
 80020f0:	2020      	movs	r0, #32
 80020f2:	f7ff fc95 	bl	8001a20 <UpdateCharBuffer>
	}
}
 80020f6:	bf00      	nop
 80020f8:	bf00      	nop
 80020fa:	3708      	adds	r7, #8
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	20000131 	.word	0x20000131
 8002104:	20000130 	.word	0x20000130

08002108 <CLCD_PrintBigNumBuffer>:

void CLCD_PrintBigNumBuffer(uint8_t col, int8_t number){
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	4603      	mov	r3, r0
 8002110:	460a      	mov	r2, r1
 8002112:	71fb      	strb	r3, [r7, #7]
 8002114:	4613      	mov	r3, r2
 8002116:	71bb      	strb	r3, [r7, #6]
	if(number < 99) {
 8002118:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800211c:	2b62      	cmp	r3, #98	; 0x62
 800211e:	dc22      	bgt.n	8002166 <CLCD_PrintBigNumBuffer+0x5e>
		CLCD_PrintBigDigitBuffer(col, number / 10);
 8002120:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002124:	4a18      	ldr	r2, [pc, #96]	; (8002188 <CLCD_PrintBigNumBuffer+0x80>)
 8002126:	fb82 1203 	smull	r1, r2, r2, r3
 800212a:	1092      	asrs	r2, r2, #2
 800212c:	17db      	asrs	r3, r3, #31
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	b25a      	sxtb	r2, r3
 8002132:	79fb      	ldrb	r3, [r7, #7]
 8002134:	4611      	mov	r1, r2
 8002136:	4618      	mov	r0, r3
 8002138:	f7ff fe7c 	bl	8001e34 <CLCD_PrintBigDigitBuffer>
		CLCD_PrintBigDigitBuffer(col + 3, number % 10);
 800213c:	79fb      	ldrb	r3, [r7, #7]
 800213e:	3303      	adds	r3, #3
 8002140:	b2d8      	uxtb	r0, r3
 8002142:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8002146:	4b10      	ldr	r3, [pc, #64]	; (8002188 <CLCD_PrintBigNumBuffer+0x80>)
 8002148:	fb83 1302 	smull	r1, r3, r3, r2
 800214c:	1099      	asrs	r1, r3, #2
 800214e:	17d3      	asrs	r3, r2, #31
 8002150:	1ac9      	subs	r1, r1, r3
 8002152:	460b      	mov	r3, r1
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	440b      	add	r3, r1
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	b25b      	sxtb	r3, r3
 800215e:	4619      	mov	r1, r3
 8002160:	f7ff fe68 	bl	8001e34 <CLCD_PrintBigDigitBuffer>
		CLCD_PrintBigDigitBuffer(col, ' ');
		CLCD_PrintBigDigitBuffer(col + 3, ' ');

	}

}
 8002164:	e00b      	b.n	800217e <CLCD_PrintBigNumBuffer+0x76>
		CLCD_PrintBigDigitBuffer(col, ' ');
 8002166:	79fb      	ldrb	r3, [r7, #7]
 8002168:	2120      	movs	r1, #32
 800216a:	4618      	mov	r0, r3
 800216c:	f7ff fe62 	bl	8001e34 <CLCD_PrintBigDigitBuffer>
		CLCD_PrintBigDigitBuffer(col + 3, ' ');
 8002170:	79fb      	ldrb	r3, [r7, #7]
 8002172:	3303      	adds	r3, #3
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2120      	movs	r1, #32
 8002178:	4618      	mov	r0, r3
 800217a:	f7ff fe5b 	bl	8001e34 <CLCD_PrintBigDigitBuffer>
}
 800217e:	bf00      	nop
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	66666667 	.word	0x66666667

0800218c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002190:	f000 fbe8 	bl	8002964 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002194:	f000 f86a 	bl	800226c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002198:	f000 f976 	bl	8002488 <MX_GPIO_Init>
  MX_I2C1_Init();
 800219c:	f000 f8ac 	bl	80022f8 <MX_I2C1_Init>
  MX_TIM3_Init();
 80021a0:	f000 f924 	bl	80023ec <MX_TIM3_Init>
  MX_TIM2_Init();
 80021a4:	f000 f8d6 	bl	8002354 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim3);
 80021a8:	4828      	ldr	r0, [pc, #160]	; (800224c <main+0xc0>)
 80021aa:	f004 f89d 	bl	80062e8 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80021ae:	2100      	movs	r1, #0
 80021b0:	4826      	ldr	r0, [pc, #152]	; (800224c <main+0xc0>)
 80021b2:	f004 f935 	bl	8006420 <HAL_TIM_PWM_Start>


  TM_Init(&htim2);
 80021b6:	4826      	ldr	r0, [pc, #152]	; (8002250 <main+0xc4>)
 80021b8:	f000 fb5a 	bl	8002870 <TM_Init>
  TM_SetTime(50);
 80021bc:	2032      	movs	r0, #50	; 0x32
 80021be:	f000 fb77 	bl	80028b0 <TM_SetTime>

  IN_Init();
 80021c2:	f7ff fa47 	bl	8001654 <IN_Init>
  FSM_Init();
 80021c6:	f7fe fbbd 	bl	8000944 <FSM_Init>

  CLCD_Init(&hi2c1, 0x3F, 2, 16);
 80021ca:	2310      	movs	r3, #16
 80021cc:	2202      	movs	r2, #2
 80021ce:	213f      	movs	r1, #63	; 0x3f
 80021d0:	4820      	ldr	r0, [pc, #128]	; (8002254 <main+0xc8>)
 80021d2:	f7ff fb37 	bl	8001844 <CLCD_Init>
  CLCD_InitBigDigit();
 80021d6:	f7ff fdff 	bl	8001dd8 <CLCD_InitBigDigit>
  DS_Init(&hi2c1);
 80021da:	481e      	ldr	r0, [pc, #120]	; (8002254 <main+0xc8>)
 80021dc:	f7fe fa9c 	bl	8000718 <DS_Init>

  DHT_Init(DHT_GPIO_Port, DHT_Pin, &htim3);
 80021e0:	4a1a      	ldr	r2, [pc, #104]	; (800224c <main+0xc0>)
 80021e2:	2120      	movs	r1, #32
 80021e4:	481c      	ldr	r0, [pc, #112]	; (8002258 <main+0xcc>)
 80021e6:	f7fe fa3d 	bl	8000664 <DHT_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(TM_IsFlag()){
 80021ea:	f000 fb83 	bl	80028f4 <TM_IsFlag>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d0fa      	beq.n	80021ea <main+0x5e>
		  _counter_time_elapsed = (_counter_time_elapsed + 1) % 200;
 80021f4:	4b19      	ldr	r3, [pc, #100]	; (800225c <main+0xd0>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	3301      	adds	r3, #1
 80021fa:	4a19      	ldr	r2, [pc, #100]	; (8002260 <main+0xd4>)
 80021fc:	fb82 1203 	smull	r1, r2, r2, r3
 8002200:	1191      	asrs	r1, r2, #6
 8002202:	17da      	asrs	r2, r3, #31
 8002204:	1a8a      	subs	r2, r1, r2
 8002206:	21c8      	movs	r1, #200	; 0xc8
 8002208:	fb01 f202 	mul.w	r2, r1, r2
 800220c:	1a9a      	subs	r2, r3, r2
 800220e:	b2d2      	uxtb	r2, r2
 8002210:	4b12      	ldr	r3, [pc, #72]	; (800225c <main+0xd0>)
 8002212:	701a      	strb	r2, [r3, #0]

		  if(_time_screen >= 5) _time_screen -= 5;
 8002214:	4b13      	ldr	r3, [pc, #76]	; (8002264 <main+0xd8>)
 8002216:	881b      	ldrh	r3, [r3, #0]
 8002218:	2b04      	cmp	r3, #4
 800221a:	d905      	bls.n	8002228 <main+0x9c>
 800221c:	4b11      	ldr	r3, [pc, #68]	; (8002264 <main+0xd8>)
 800221e:	881b      	ldrh	r3, [r3, #0]
 8002220:	3b05      	subs	r3, #5
 8002222:	b29a      	uxth	r2, r3
 8002224:	4b0f      	ldr	r3, [pc, #60]	; (8002264 <main+0xd8>)
 8002226:	801a      	strh	r2, [r3, #0]
		  if(_time_out_for_set >= 5) _time_out_for_set -= 5;
 8002228:	4b0f      	ldr	r3, [pc, #60]	; (8002268 <main+0xdc>)
 800222a:	881b      	ldrh	r3, [r3, #0]
 800222c:	2b04      	cmp	r3, #4
 800222e:	d905      	bls.n	800223c <main+0xb0>
 8002230:	4b0d      	ldr	r3, [pc, #52]	; (8002268 <main+0xdc>)
 8002232:	881b      	ldrh	r3, [r3, #0]
 8002234:	3b05      	subs	r3, #5
 8002236:	b29a      	uxth	r2, r3
 8002238:	4b0b      	ldr	r3, [pc, #44]	; (8002268 <main+0xdc>)
 800223a:	801a      	strh	r2, [r3, #0]

		  IN_ReadButton();
 800223c:	f7ff fa10 	bl	8001660 <IN_ReadButton>

		  FSM_SystemControl();
 8002240:	f7fe fb90 	bl	8000964 <FSM_SystemControl>

		  CLCD_DisplayScreen();
 8002244:	f7ff fd6c 	bl	8001d20 <CLCD_DisplayScreen>
	  if(TM_IsFlag()){
 8002248:	e7cf      	b.n	80021ea <main+0x5e>
 800224a:	bf00      	nop
 800224c:	200001d0 	.word	0x200001d0
 8002250:	20000188 	.word	0x20000188
 8002254:	20000134 	.word	0x20000134
 8002258:	40010c00 	.word	0x40010c00
 800225c:	2000010c 	.word	0x2000010c
 8002260:	51eb851f 	.word	0x51eb851f
 8002264:	2000010e 	.word	0x2000010e
 8002268:	20000112 	.word	0x20000112

0800226c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b090      	sub	sp, #64	; 0x40
 8002270:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002272:	f107 0318 	add.w	r3, r7, #24
 8002276:	2228      	movs	r2, #40	; 0x28
 8002278:	2100      	movs	r1, #0
 800227a:	4618      	mov	r0, r3
 800227c:	f004 fd28 	bl	8006cd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002280:	1d3b      	adds	r3, r7, #4
 8002282:	2200      	movs	r2, #0
 8002284:	601a      	str	r2, [r3, #0]
 8002286:	605a      	str	r2, [r3, #4]
 8002288:	609a      	str	r2, [r3, #8]
 800228a:	60da      	str	r2, [r3, #12]
 800228c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800228e:	2301      	movs	r3, #1
 8002290:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002292:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002296:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002298:	2300      	movs	r3, #0
 800229a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800229c:	2301      	movs	r3, #1
 800229e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022a0:	2302      	movs	r3, #2
 80022a2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80022a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80022aa:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80022ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022b0:	f107 0318 	add.w	r3, r7, #24
 80022b4:	4618      	mov	r0, r3
 80022b6:	f003 fbc1 	bl	8005a3c <HAL_RCC_OscConfig>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80022c0:	f000 f94e 	bl	8002560 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022c4:	230f      	movs	r3, #15
 80022c6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022c8:	2302      	movs	r3, #2
 80022ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022cc:	2300      	movs	r3, #0
 80022ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80022d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022d6:	2300      	movs	r3, #0
 80022d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80022da:	1d3b      	adds	r3, r7, #4
 80022dc:	2102      	movs	r1, #2
 80022de:	4618      	mov	r0, r3
 80022e0:	f003 fe2e 	bl	8005f40 <HAL_RCC_ClockConfig>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <SystemClock_Config+0x82>
  {
    Error_Handler();
 80022ea:	f000 f939 	bl	8002560 <Error_Handler>
  }
}
 80022ee:	bf00      	nop
 80022f0:	3740      	adds	r7, #64	; 0x40
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
	...

080022f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80022fc:	4b12      	ldr	r3, [pc, #72]	; (8002348 <MX_I2C1_Init+0x50>)
 80022fe:	4a13      	ldr	r2, [pc, #76]	; (800234c <MX_I2C1_Init+0x54>)
 8002300:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002302:	4b11      	ldr	r3, [pc, #68]	; (8002348 <MX_I2C1_Init+0x50>)
 8002304:	4a12      	ldr	r2, [pc, #72]	; (8002350 <MX_I2C1_Init+0x58>)
 8002306:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002308:	4b0f      	ldr	r3, [pc, #60]	; (8002348 <MX_I2C1_Init+0x50>)
 800230a:	2200      	movs	r2, #0
 800230c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800230e:	4b0e      	ldr	r3, [pc, #56]	; (8002348 <MX_I2C1_Init+0x50>)
 8002310:	2200      	movs	r2, #0
 8002312:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002314:	4b0c      	ldr	r3, [pc, #48]	; (8002348 <MX_I2C1_Init+0x50>)
 8002316:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800231a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800231c:	4b0a      	ldr	r3, [pc, #40]	; (8002348 <MX_I2C1_Init+0x50>)
 800231e:	2200      	movs	r2, #0
 8002320:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002322:	4b09      	ldr	r3, [pc, #36]	; (8002348 <MX_I2C1_Init+0x50>)
 8002324:	2200      	movs	r2, #0
 8002326:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002328:	4b07      	ldr	r3, [pc, #28]	; (8002348 <MX_I2C1_Init+0x50>)
 800232a:	2200      	movs	r2, #0
 800232c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800232e:	4b06      	ldr	r3, [pc, #24]	; (8002348 <MX_I2C1_Init+0x50>)
 8002330:	2200      	movs	r2, #0
 8002332:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002334:	4804      	ldr	r0, [pc, #16]	; (8002348 <MX_I2C1_Init+0x50>)
 8002336:	f000 fedf 	bl	80030f8 <HAL_I2C_Init>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002340:	f000 f90e 	bl	8002560 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002344:	bf00      	nop
 8002346:	bd80      	pop	{r7, pc}
 8002348:	20000134 	.word	0x20000134
 800234c:	40005400 	.word	0x40005400
 8002350:	000186a0 	.word	0x000186a0

08002354 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800235a:	f107 0308 	add.w	r3, r7, #8
 800235e:	2200      	movs	r2, #0
 8002360:	601a      	str	r2, [r3, #0]
 8002362:	605a      	str	r2, [r3, #4]
 8002364:	609a      	str	r2, [r3, #8]
 8002366:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002368:	463b      	mov	r3, r7
 800236a:	2200      	movs	r2, #0
 800236c:	601a      	str	r2, [r3, #0]
 800236e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002370:	4b1d      	ldr	r3, [pc, #116]	; (80023e8 <MX_TIM2_Init+0x94>)
 8002372:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002376:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 36000 - 1;
 8002378:	4b1b      	ldr	r3, [pc, #108]	; (80023e8 <MX_TIM2_Init+0x94>)
 800237a:	f648 429f 	movw	r2, #35999	; 0x8c9f
 800237e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002380:	4b19      	ldr	r3, [pc, #100]	; (80023e8 <MX_TIM2_Init+0x94>)
 8002382:	2200      	movs	r2, #0
 8002384:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100 - 1;
 8002386:	4b18      	ldr	r3, [pc, #96]	; (80023e8 <MX_TIM2_Init+0x94>)
 8002388:	2263      	movs	r2, #99	; 0x63
 800238a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800238c:	4b16      	ldr	r3, [pc, #88]	; (80023e8 <MX_TIM2_Init+0x94>)
 800238e:	2200      	movs	r2, #0
 8002390:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002392:	4b15      	ldr	r3, [pc, #84]	; (80023e8 <MX_TIM2_Init+0x94>)
 8002394:	2200      	movs	r2, #0
 8002396:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002398:	4813      	ldr	r0, [pc, #76]	; (80023e8 <MX_TIM2_Init+0x94>)
 800239a:	f003 ff55 	bl	8006248 <HAL_TIM_Base_Init>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80023a4:	f000 f8dc 	bl	8002560 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80023ae:	f107 0308 	add.w	r3, r7, #8
 80023b2:	4619      	mov	r1, r3
 80023b4:	480c      	ldr	r0, [pc, #48]	; (80023e8 <MX_TIM2_Init+0x94>)
 80023b6:	f004 f9dd 	bl	8006774 <HAL_TIM_ConfigClockSource>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80023c0:	f000 f8ce 	bl	8002560 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023c4:	2300      	movs	r3, #0
 80023c6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023c8:	2300      	movs	r3, #0
 80023ca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80023cc:	463b      	mov	r3, r7
 80023ce:	4619      	mov	r1, r3
 80023d0:	4805      	ldr	r0, [pc, #20]	; (80023e8 <MX_TIM2_Init+0x94>)
 80023d2:	f004 fbd3 	bl	8006b7c <HAL_TIMEx_MasterConfigSynchronization>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80023dc:	f000 f8c0 	bl	8002560 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80023e0:	bf00      	nop
 80023e2:	3718      	adds	r7, #24
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	20000188 	.word	0x20000188

080023ec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023f2:	f107 0308 	add.w	r3, r7, #8
 80023f6:	2200      	movs	r2, #0
 80023f8:	601a      	str	r2, [r3, #0]
 80023fa:	605a      	str	r2, [r3, #4]
 80023fc:	609a      	str	r2, [r3, #8]
 80023fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002400:	463b      	mov	r3, r7
 8002402:	2200      	movs	r2, #0
 8002404:	601a      	str	r2, [r3, #0]
 8002406:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002408:	4b1d      	ldr	r3, [pc, #116]	; (8002480 <MX_TIM3_Init+0x94>)
 800240a:	4a1e      	ldr	r2, [pc, #120]	; (8002484 <MX_TIM3_Init+0x98>)
 800240c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72 - 1;
 800240e:	4b1c      	ldr	r3, [pc, #112]	; (8002480 <MX_TIM3_Init+0x94>)
 8002410:	2247      	movs	r2, #71	; 0x47
 8002412:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002414:	4b1a      	ldr	r3, [pc, #104]	; (8002480 <MX_TIM3_Init+0x94>)
 8002416:	2200      	movs	r2, #0
 8002418:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xFFFF - 1;
 800241a:	4b19      	ldr	r3, [pc, #100]	; (8002480 <MX_TIM3_Init+0x94>)
 800241c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002420:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002422:	4b17      	ldr	r3, [pc, #92]	; (8002480 <MX_TIM3_Init+0x94>)
 8002424:	2200      	movs	r2, #0
 8002426:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002428:	4b15      	ldr	r3, [pc, #84]	; (8002480 <MX_TIM3_Init+0x94>)
 800242a:	2200      	movs	r2, #0
 800242c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800242e:	4814      	ldr	r0, [pc, #80]	; (8002480 <MX_TIM3_Init+0x94>)
 8002430:	f003 ff0a 	bl	8006248 <HAL_TIM_Base_Init>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800243a:	f000 f891 	bl	8002560 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800243e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002442:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002444:	f107 0308 	add.w	r3, r7, #8
 8002448:	4619      	mov	r1, r3
 800244a:	480d      	ldr	r0, [pc, #52]	; (8002480 <MX_TIM3_Init+0x94>)
 800244c:	f004 f992 	bl	8006774 <HAL_TIM_ConfigClockSource>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002456:	f000 f883 	bl	8002560 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800245a:	2300      	movs	r3, #0
 800245c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800245e:	2300      	movs	r3, #0
 8002460:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002462:	463b      	mov	r3, r7
 8002464:	4619      	mov	r1, r3
 8002466:	4806      	ldr	r0, [pc, #24]	; (8002480 <MX_TIM3_Init+0x94>)
 8002468:	f004 fb88 	bl	8006b7c <HAL_TIMEx_MasterConfigSynchronization>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002472:	f000 f875 	bl	8002560 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002476:	bf00      	nop
 8002478:	3718      	adds	r7, #24
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	200001d0 	.word	0x200001d0
 8002484:	40000400 	.word	0x40000400

08002488 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b088      	sub	sp, #32
 800248c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800248e:	f107 0310 	add.w	r3, r7, #16
 8002492:	2200      	movs	r2, #0
 8002494:	601a      	str	r2, [r3, #0]
 8002496:	605a      	str	r2, [r3, #4]
 8002498:	609a      	str	r2, [r3, #8]
 800249a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800249c:	4b2d      	ldr	r3, [pc, #180]	; (8002554 <MX_GPIO_Init+0xcc>)
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	4a2c      	ldr	r2, [pc, #176]	; (8002554 <MX_GPIO_Init+0xcc>)
 80024a2:	f043 0320 	orr.w	r3, r3, #32
 80024a6:	6193      	str	r3, [r2, #24]
 80024a8:	4b2a      	ldr	r3, [pc, #168]	; (8002554 <MX_GPIO_Init+0xcc>)
 80024aa:	699b      	ldr	r3, [r3, #24]
 80024ac:	f003 0320 	and.w	r3, r3, #32
 80024b0:	60fb      	str	r3, [r7, #12]
 80024b2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024b4:	4b27      	ldr	r3, [pc, #156]	; (8002554 <MX_GPIO_Init+0xcc>)
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	4a26      	ldr	r2, [pc, #152]	; (8002554 <MX_GPIO_Init+0xcc>)
 80024ba:	f043 0304 	orr.w	r3, r3, #4
 80024be:	6193      	str	r3, [r2, #24]
 80024c0:	4b24      	ldr	r3, [pc, #144]	; (8002554 <MX_GPIO_Init+0xcc>)
 80024c2:	699b      	ldr	r3, [r3, #24]
 80024c4:	f003 0304 	and.w	r3, r3, #4
 80024c8:	60bb      	str	r3, [r7, #8]
 80024ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024cc:	4b21      	ldr	r3, [pc, #132]	; (8002554 <MX_GPIO_Init+0xcc>)
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	4a20      	ldr	r2, [pc, #128]	; (8002554 <MX_GPIO_Init+0xcc>)
 80024d2:	f043 0308 	orr.w	r3, r3, #8
 80024d6:	6193      	str	r3, [r2, #24]
 80024d8:	4b1e      	ldr	r3, [pc, #120]	; (8002554 <MX_GPIO_Init+0xcc>)
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	f003 0308 	and.w	r3, r3, #8
 80024e0:	607b      	str	r3, [r7, #4]
 80024e2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80024e4:	2200      	movs	r2, #0
 80024e6:	2120      	movs	r1, #32
 80024e8:	481b      	ldr	r0, [pc, #108]	; (8002558 <MX_GPIO_Init+0xd0>)
 80024ea:	f000 fdec 	bl	80030c6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT_GPIO_Port, DHT_Pin, GPIO_PIN_RESET);
 80024ee:	2200      	movs	r2, #0
 80024f0:	2120      	movs	r1, #32
 80024f2:	481a      	ldr	r0, [pc, #104]	; (800255c <MX_GPIO_Init+0xd4>)
 80024f4:	f000 fde7 	bl	80030c6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BT1_Pin BT0_Pin BT2_Pin */
  GPIO_InitStruct.Pin = BT1_Pin|BT0_Pin|BT2_Pin;
 80024f8:	f240 430c 	movw	r3, #1036	; 0x40c
 80024fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024fe:	2300      	movs	r3, #0
 8002500:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002502:	2301      	movs	r3, #1
 8002504:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002506:	f107 0310 	add.w	r3, r7, #16
 800250a:	4619      	mov	r1, r3
 800250c:	4812      	ldr	r0, [pc, #72]	; (8002558 <MX_GPIO_Init+0xd0>)
 800250e:	f000 fc3f 	bl	8002d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002512:	2320      	movs	r3, #32
 8002514:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002516:	2301      	movs	r3, #1
 8002518:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800251a:	2301      	movs	r3, #1
 800251c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800251e:	2302      	movs	r3, #2
 8002520:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002522:	f107 0310 	add.w	r3, r7, #16
 8002526:	4619      	mov	r1, r3
 8002528:	480b      	ldr	r0, [pc, #44]	; (8002558 <MX_GPIO_Init+0xd0>)
 800252a:	f000 fc31 	bl	8002d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT_Pin */
  GPIO_InitStruct.Pin = DHT_Pin;
 800252e:	2320      	movs	r3, #32
 8002530:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002532:	2301      	movs	r3, #1
 8002534:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002536:	2301      	movs	r3, #1
 8002538:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800253a:	2302      	movs	r3, #2
 800253c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DHT_GPIO_Port, &GPIO_InitStruct);
 800253e:	f107 0310 	add.w	r3, r7, #16
 8002542:	4619      	mov	r1, r3
 8002544:	4805      	ldr	r0, [pc, #20]	; (800255c <MX_GPIO_Init+0xd4>)
 8002546:	f000 fc23 	bl	8002d90 <HAL_GPIO_Init>

}
 800254a:	bf00      	nop
 800254c:	3720      	adds	r7, #32
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	40021000 	.word	0x40021000
 8002558:	40010800 	.word	0x40010800
 800255c:	40010c00 	.word	0x40010c00

08002560 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002564:	b672      	cpsid	i
}
 8002566:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002568:	e7fe      	b.n	8002568 <Error_Handler+0x8>
	...

0800256c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800256c:	b480      	push	{r7}
 800256e:	b085      	sub	sp, #20
 8002570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002572:	4b15      	ldr	r3, [pc, #84]	; (80025c8 <HAL_MspInit+0x5c>)
 8002574:	699b      	ldr	r3, [r3, #24]
 8002576:	4a14      	ldr	r2, [pc, #80]	; (80025c8 <HAL_MspInit+0x5c>)
 8002578:	f043 0301 	orr.w	r3, r3, #1
 800257c:	6193      	str	r3, [r2, #24]
 800257e:	4b12      	ldr	r3, [pc, #72]	; (80025c8 <HAL_MspInit+0x5c>)
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	60bb      	str	r3, [r7, #8]
 8002588:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800258a:	4b0f      	ldr	r3, [pc, #60]	; (80025c8 <HAL_MspInit+0x5c>)
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	4a0e      	ldr	r2, [pc, #56]	; (80025c8 <HAL_MspInit+0x5c>)
 8002590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002594:	61d3      	str	r3, [r2, #28]
 8002596:	4b0c      	ldr	r3, [pc, #48]	; (80025c8 <HAL_MspInit+0x5c>)
 8002598:	69db      	ldr	r3, [r3, #28]
 800259a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800259e:	607b      	str	r3, [r7, #4]
 80025a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80025a2:	4b0a      	ldr	r3, [pc, #40]	; (80025cc <HAL_MspInit+0x60>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	60fb      	str	r3, [r7, #12]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80025ae:	60fb      	str	r3, [r7, #12]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025b6:	60fb      	str	r3, [r7, #12]
 80025b8:	4a04      	ldr	r2, [pc, #16]	; (80025cc <HAL_MspInit+0x60>)
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025be:	bf00      	nop
 80025c0:	3714      	adds	r7, #20
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bc80      	pop	{r7}
 80025c6:	4770      	bx	lr
 80025c8:	40021000 	.word	0x40021000
 80025cc:	40010000 	.word	0x40010000

080025d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b08a      	sub	sp, #40	; 0x28
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d8:	f107 0314 	add.w	r3, r7, #20
 80025dc:	2200      	movs	r2, #0
 80025de:	601a      	str	r2, [r3, #0]
 80025e0:	605a      	str	r2, [r3, #4]
 80025e2:	609a      	str	r2, [r3, #8]
 80025e4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a25      	ldr	r2, [pc, #148]	; (8002680 <HAL_I2C_MspInit+0xb0>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d142      	bne.n	8002676 <HAL_I2C_MspInit+0xa6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025f0:	4b24      	ldr	r3, [pc, #144]	; (8002684 <HAL_I2C_MspInit+0xb4>)
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	4a23      	ldr	r2, [pc, #140]	; (8002684 <HAL_I2C_MspInit+0xb4>)
 80025f6:	f043 0308 	orr.w	r3, r3, #8
 80025fa:	6193      	str	r3, [r2, #24]
 80025fc:	4b21      	ldr	r3, [pc, #132]	; (8002684 <HAL_I2C_MspInit+0xb4>)
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	f003 0308 	and.w	r3, r3, #8
 8002604:	613b      	str	r3, [r7, #16]
 8002606:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002608:	f44f 7340 	mov.w	r3, #768	; 0x300
 800260c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800260e:	2312      	movs	r3, #18
 8002610:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002612:	2303      	movs	r3, #3
 8002614:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002616:	f107 0314 	add.w	r3, r7, #20
 800261a:	4619      	mov	r1, r3
 800261c:	481a      	ldr	r0, [pc, #104]	; (8002688 <HAL_I2C_MspInit+0xb8>)
 800261e:	f000 fbb7 	bl	8002d90 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8002622:	4b1a      	ldr	r3, [pc, #104]	; (800268c <HAL_I2C_MspInit+0xbc>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	627b      	str	r3, [r7, #36]	; 0x24
 8002628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800262e:	627b      	str	r3, [r7, #36]	; 0x24
 8002630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002632:	f043 0302 	orr.w	r3, r3, #2
 8002636:	627b      	str	r3, [r7, #36]	; 0x24
 8002638:	4a14      	ldr	r2, [pc, #80]	; (800268c <HAL_I2C_MspInit+0xbc>)
 800263a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263c:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800263e:	4b11      	ldr	r3, [pc, #68]	; (8002684 <HAL_I2C_MspInit+0xb4>)
 8002640:	69db      	ldr	r3, [r3, #28]
 8002642:	4a10      	ldr	r2, [pc, #64]	; (8002684 <HAL_I2C_MspInit+0xb4>)
 8002644:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002648:	61d3      	str	r3, [r2, #28]
 800264a:	4b0e      	ldr	r3, [pc, #56]	; (8002684 <HAL_I2C_MspInit+0xb4>)
 800264c:	69db      	ldr	r3, [r3, #28]
 800264e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002652:	60fb      	str	r3, [r7, #12]
 8002654:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002656:	2200      	movs	r2, #0
 8002658:	2100      	movs	r1, #0
 800265a:	201f      	movs	r0, #31
 800265c:	f000 fadf 	bl	8002c1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002660:	201f      	movs	r0, #31
 8002662:	f000 faf8 	bl	8002c56 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002666:	2200      	movs	r2, #0
 8002668:	2100      	movs	r1, #0
 800266a:	2020      	movs	r0, #32
 800266c:	f000 fad7 	bl	8002c1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002670:	2020      	movs	r0, #32
 8002672:	f000 faf0 	bl	8002c56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002676:	bf00      	nop
 8002678:	3728      	adds	r7, #40	; 0x28
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	40005400 	.word	0x40005400
 8002684:	40021000 	.word	0x40021000
 8002688:	40010c00 	.word	0x40010c00
 800268c:	40010000 	.word	0x40010000

08002690 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026a0:	d114      	bne.n	80026cc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80026a2:	4b15      	ldr	r3, [pc, #84]	; (80026f8 <HAL_TIM_Base_MspInit+0x68>)
 80026a4:	69db      	ldr	r3, [r3, #28]
 80026a6:	4a14      	ldr	r2, [pc, #80]	; (80026f8 <HAL_TIM_Base_MspInit+0x68>)
 80026a8:	f043 0301 	orr.w	r3, r3, #1
 80026ac:	61d3      	str	r3, [r2, #28]
 80026ae:	4b12      	ldr	r3, [pc, #72]	; (80026f8 <HAL_TIM_Base_MspInit+0x68>)
 80026b0:	69db      	ldr	r3, [r3, #28]
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	60fb      	str	r3, [r7, #12]
 80026b8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80026ba:	2200      	movs	r2, #0
 80026bc:	2100      	movs	r1, #0
 80026be:	201c      	movs	r0, #28
 80026c0:	f000 faad 	bl	8002c1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80026c4:	201c      	movs	r0, #28
 80026c6:	f000 fac6 	bl	8002c56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80026ca:	e010      	b.n	80026ee <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a0a      	ldr	r2, [pc, #40]	; (80026fc <HAL_TIM_Base_MspInit+0x6c>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d10b      	bne.n	80026ee <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80026d6:	4b08      	ldr	r3, [pc, #32]	; (80026f8 <HAL_TIM_Base_MspInit+0x68>)
 80026d8:	69db      	ldr	r3, [r3, #28]
 80026da:	4a07      	ldr	r2, [pc, #28]	; (80026f8 <HAL_TIM_Base_MspInit+0x68>)
 80026dc:	f043 0302 	orr.w	r3, r3, #2
 80026e0:	61d3      	str	r3, [r2, #28]
 80026e2:	4b05      	ldr	r3, [pc, #20]	; (80026f8 <HAL_TIM_Base_MspInit+0x68>)
 80026e4:	69db      	ldr	r3, [r3, #28]
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	60bb      	str	r3, [r7, #8]
 80026ec:	68bb      	ldr	r3, [r7, #8]
}
 80026ee:	bf00      	nop
 80026f0:	3710      	adds	r7, #16
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	40021000 	.word	0x40021000
 80026fc:	40000400 	.word	0x40000400

08002700 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002704:	e7fe      	b.n	8002704 <NMI_Handler+0x4>

08002706 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002706:	b480      	push	{r7}
 8002708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800270a:	e7fe      	b.n	800270a <HardFault_Handler+0x4>

0800270c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002710:	e7fe      	b.n	8002710 <MemManage_Handler+0x4>

08002712 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002712:	b480      	push	{r7}
 8002714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002716:	e7fe      	b.n	8002716 <BusFault_Handler+0x4>

08002718 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800271c:	e7fe      	b.n	800271c <UsageFault_Handler+0x4>

0800271e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800271e:	b480      	push	{r7}
 8002720:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002722:	bf00      	nop
 8002724:	46bd      	mov	sp, r7
 8002726:	bc80      	pop	{r7}
 8002728:	4770      	bx	lr

0800272a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800272a:	b480      	push	{r7}
 800272c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800272e:	bf00      	nop
 8002730:	46bd      	mov	sp, r7
 8002732:	bc80      	pop	{r7}
 8002734:	4770      	bx	lr

08002736 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002736:	b480      	push	{r7}
 8002738:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800273a:	bf00      	nop
 800273c:	46bd      	mov	sp, r7
 800273e:	bc80      	pop	{r7}
 8002740:	4770      	bx	lr

08002742 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002742:	b580      	push	{r7, lr}
 8002744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002746:	f000 f953 	bl	80029f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800274a:	bf00      	nop
 800274c:	bd80      	pop	{r7, pc}
	...

08002750 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002754:	4802      	ldr	r0, [pc, #8]	; (8002760 <TIM2_IRQHandler+0x10>)
 8002756:	f003 ff05 	bl	8006564 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800275a:	bf00      	nop
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	20000188 	.word	0x20000188

08002764 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002768:	4802      	ldr	r0, [pc, #8]	; (8002774 <I2C1_EV_IRQHandler+0x10>)
 800276a:	f001 f967 	bl	8003a3c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800276e:	bf00      	nop
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	20000134 	.word	0x20000134

08002778 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800277c:	4802      	ldr	r0, [pc, #8]	; (8002788 <I2C1_ER_IRQHandler+0x10>)
 800277e:	f001 face 	bl	8003d1e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002782:	bf00      	nop
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	20000134 	.word	0x20000134

0800278c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b086      	sub	sp, #24
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002794:	4a14      	ldr	r2, [pc, #80]	; (80027e8 <_sbrk+0x5c>)
 8002796:	4b15      	ldr	r3, [pc, #84]	; (80027ec <_sbrk+0x60>)
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027a0:	4b13      	ldr	r3, [pc, #76]	; (80027f0 <_sbrk+0x64>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d102      	bne.n	80027ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027a8:	4b11      	ldr	r3, [pc, #68]	; (80027f0 <_sbrk+0x64>)
 80027aa:	4a12      	ldr	r2, [pc, #72]	; (80027f4 <_sbrk+0x68>)
 80027ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027ae:	4b10      	ldr	r3, [pc, #64]	; (80027f0 <_sbrk+0x64>)
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4413      	add	r3, r2
 80027b6:	693a      	ldr	r2, [r7, #16]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d207      	bcs.n	80027cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027bc:	f004 fa4e 	bl	8006c5c <__errno>
 80027c0:	4603      	mov	r3, r0
 80027c2:	220c      	movs	r2, #12
 80027c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027c6:	f04f 33ff 	mov.w	r3, #4294967295
 80027ca:	e009      	b.n	80027e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027cc:	4b08      	ldr	r3, [pc, #32]	; (80027f0 <_sbrk+0x64>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027d2:	4b07      	ldr	r3, [pc, #28]	; (80027f0 <_sbrk+0x64>)
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4413      	add	r3, r2
 80027da:	4a05      	ldr	r2, [pc, #20]	; (80027f0 <_sbrk+0x64>)
 80027dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027de:	68fb      	ldr	r3, [r7, #12]
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3718      	adds	r7, #24
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	20005000 	.word	0x20005000
 80027ec:	00000400 	.word	0x00000400
 80027f0:	20000218 	.word	0x20000218
 80027f4:	20000238 	.word	0x20000238

080027f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027fc:	bf00      	nop
 80027fe:	46bd      	mov	sp, r7
 8002800:	bc80      	pop	{r7}
 8002802:	4770      	bx	lr

08002804 <RunSoftwareTimer>:

static uint8_t MUL_timer		= 1;
static uint8_t flag_timer		= 0;
static uint8_t counter_timer 	= 0;

void RunSoftwareTimer(void){
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
	if(counter_timer > 0){
 8002808:	4b0c      	ldr	r3, [pc, #48]	; (800283c <RunSoftwareTimer+0x38>)
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d010      	beq.n	8002832 <RunSoftwareTimer+0x2e>
		counter_timer--;
 8002810:	4b0a      	ldr	r3, [pc, #40]	; (800283c <RunSoftwareTimer+0x38>)
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	3b01      	subs	r3, #1
 8002816:	b2da      	uxtb	r2, r3
 8002818:	4b08      	ldr	r3, [pc, #32]	; (800283c <RunSoftwareTimer+0x38>)
 800281a:	701a      	strb	r2, [r3, #0]
		if(counter_timer == 0){
 800281c:	4b07      	ldr	r3, [pc, #28]	; (800283c <RunSoftwareTimer+0x38>)
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d106      	bne.n	8002832 <RunSoftwareTimer+0x2e>
			counter_timer = MUL_timer;
 8002824:	4b06      	ldr	r3, [pc, #24]	; (8002840 <RunSoftwareTimer+0x3c>)
 8002826:	781a      	ldrb	r2, [r3, #0]
 8002828:	4b04      	ldr	r3, [pc, #16]	; (800283c <RunSoftwareTimer+0x38>)
 800282a:	701a      	strb	r2, [r3, #0]
			flag_timer = 1;
 800282c:	4b05      	ldr	r3, [pc, #20]	; (8002844 <RunSoftwareTimer+0x40>)
 800282e:	2201      	movs	r2, #1
 8002830:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8002832:	bf00      	nop
 8002834:	46bd      	mov	sp, r7
 8002836:	bc80      	pop	{r7}
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	20000221 	.word	0x20000221
 8002840:	20000051 	.word	0x20000051
 8002844:	20000220 	.word	0x20000220

08002848 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == stimer->Instance) {
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	4b05      	ldr	r3, [pc, #20]	; (800286c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	429a      	cmp	r2, r3
 800285c:	d101      	bne.n	8002862 <HAL_TIM_PeriodElapsedCallback+0x1a>
		RunSoftwareTimer();
 800285e:	f7ff ffd1 	bl	8002804 <RunSoftwareTimer>
	}
}
 8002862:	bf00      	nop
 8002864:	3708      	adds	r7, #8
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	2000021c 	.word	0x2000021c

08002870 <TM_Init>:


//==================HIGH LEVEL FUNCTION==================//
void TM_Init(TIM_HandleTypeDef* htim){
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
	stimer = htim;
 8002878:	4a09      	ldr	r2, [pc, #36]	; (80028a0 <TM_Init+0x30>)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6013      	str	r3, [r2, #0]
	counter_timer = MUL_timer;
 800287e:	4b09      	ldr	r3, [pc, #36]	; (80028a4 <TM_Init+0x34>)
 8002880:	781a      	ldrb	r2, [r3, #0]
 8002882:	4b09      	ldr	r3, [pc, #36]	; (80028a8 <TM_Init+0x38>)
 8002884:	701a      	strb	r2, [r3, #0]
	flag_timer = 0;
 8002886:	4b09      	ldr	r3, [pc, #36]	; (80028ac <TM_Init+0x3c>)
 8002888:	2200      	movs	r2, #0
 800288a:	701a      	strb	r2, [r3, #0]

	HAL_TIM_Base_Start_IT(stimer);
 800288c:	4b04      	ldr	r3, [pc, #16]	; (80028a0 <TM_Init+0x30>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4618      	mov	r0, r3
 8002892:	f003 fd73 	bl	800637c <HAL_TIM_Base_Start_IT>
}
 8002896:	bf00      	nop
 8002898:	3708      	adds	r7, #8
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	2000021c 	.word	0x2000021c
 80028a4:	20000051 	.word	0x20000051
 80028a8:	20000221 	.word	0x20000221
 80028ac:	20000220 	.word	0x20000220

080028b0 <TM_SetTime>:

void TM_SetTime(uint16_t duration){
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	4603      	mov	r3, r0
 80028b8:	80fb      	strh	r3, [r7, #6]
	MUL_timer = duration / TIME_CYCLE;
 80028ba:	88fb      	ldrh	r3, [r7, #6]
 80028bc:	4a09      	ldr	r2, [pc, #36]	; (80028e4 <TM_SetTime+0x34>)
 80028be:	7812      	ldrb	r2, [r2, #0]
 80028c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80028c4:	b2da      	uxtb	r2, r3
 80028c6:	4b08      	ldr	r3, [pc, #32]	; (80028e8 <TM_SetTime+0x38>)
 80028c8:	701a      	strb	r2, [r3, #0]
	counter_timer = MUL_timer;
 80028ca:	4b07      	ldr	r3, [pc, #28]	; (80028e8 <TM_SetTime+0x38>)
 80028cc:	781a      	ldrb	r2, [r3, #0]
 80028ce:	4b07      	ldr	r3, [pc, #28]	; (80028ec <TM_SetTime+0x3c>)
 80028d0:	701a      	strb	r2, [r3, #0]
	flag_timer = 0;
 80028d2:	4b07      	ldr	r3, [pc, #28]	; (80028f0 <TM_SetTime+0x40>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	701a      	strb	r2, [r3, #0]
}
 80028d8:	bf00      	nop
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	bc80      	pop	{r7}
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	20000050 	.word	0x20000050
 80028e8:	20000051 	.word	0x20000051
 80028ec:	20000221 	.word	0x20000221
 80028f0:	20000220 	.word	0x20000220

080028f4 <TM_IsFlag>:

uint8_t TM_IsFlag(void){
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
	if(flag_timer) {
 80028f8:	4b06      	ldr	r3, [pc, #24]	; (8002914 <TM_IsFlag+0x20>)
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d004      	beq.n	800290a <TM_IsFlag+0x16>
		flag_timer = 0;
 8002900:	4b04      	ldr	r3, [pc, #16]	; (8002914 <TM_IsFlag+0x20>)
 8002902:	2200      	movs	r2, #0
 8002904:	701a      	strb	r2, [r3, #0]
		return 1;
 8002906:	2301      	movs	r3, #1
 8002908:	e000      	b.n	800290c <TM_IsFlag+0x18>
	}
	return 0;
 800290a:	2300      	movs	r3, #0
}
 800290c:	4618      	mov	r0, r3
 800290e:	46bd      	mov	sp, r7
 8002910:	bc80      	pop	{r7}
 8002912:	4770      	bx	lr
 8002914:	20000220 	.word	0x20000220

08002918 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002918:	480c      	ldr	r0, [pc, #48]	; (800294c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800291a:	490d      	ldr	r1, [pc, #52]	; (8002950 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800291c:	4a0d      	ldr	r2, [pc, #52]	; (8002954 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800291e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002920:	e002      	b.n	8002928 <LoopCopyDataInit>

08002922 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002922:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002924:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002926:	3304      	adds	r3, #4

08002928 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002928:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800292a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800292c:	d3f9      	bcc.n	8002922 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800292e:	4a0a      	ldr	r2, [pc, #40]	; (8002958 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002930:	4c0a      	ldr	r4, [pc, #40]	; (800295c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002932:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002934:	e001      	b.n	800293a <LoopFillZerobss>

08002936 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002936:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002938:	3204      	adds	r2, #4

0800293a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800293a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800293c:	d3fb      	bcc.n	8002936 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800293e:	f7ff ff5b 	bl	80027f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002942:	f004 f991 	bl	8006c68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002946:	f7ff fc21 	bl	800218c <main>
  bx lr
 800294a:	4770      	bx	lr
  ldr r0, =_sdata
 800294c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002950:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 8002954:	08007000 	.word	0x08007000
  ldr r2, =_sbss
 8002958:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 800295c:	20000238 	.word	0x20000238

08002960 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002960:	e7fe      	b.n	8002960 <ADC1_2_IRQHandler>
	...

08002964 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002968:	4b08      	ldr	r3, [pc, #32]	; (800298c <HAL_Init+0x28>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a07      	ldr	r2, [pc, #28]	; (800298c <HAL_Init+0x28>)
 800296e:	f043 0310 	orr.w	r3, r3, #16
 8002972:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002974:	2003      	movs	r0, #3
 8002976:	f000 f947 	bl	8002c08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800297a:	200f      	movs	r0, #15
 800297c:	f000 f808 	bl	8002990 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002980:	f7ff fdf4 	bl	800256c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	40022000 	.word	0x40022000

08002990 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002998:	4b12      	ldr	r3, [pc, #72]	; (80029e4 <HAL_InitTick+0x54>)
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	4b12      	ldr	r3, [pc, #72]	; (80029e8 <HAL_InitTick+0x58>)
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	4619      	mov	r1, r3
 80029a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80029aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ae:	4618      	mov	r0, r3
 80029b0:	f000 f95f 	bl	8002c72 <HAL_SYSTICK_Config>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e00e      	b.n	80029dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2b0f      	cmp	r3, #15
 80029c2:	d80a      	bhi.n	80029da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029c4:	2200      	movs	r2, #0
 80029c6:	6879      	ldr	r1, [r7, #4]
 80029c8:	f04f 30ff 	mov.w	r0, #4294967295
 80029cc:	f000 f927 	bl	8002c1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029d0:	4a06      	ldr	r2, [pc, #24]	; (80029ec <HAL_InitTick+0x5c>)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029d6:	2300      	movs	r3, #0
 80029d8:	e000      	b.n	80029dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3708      	adds	r7, #8
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	2000004c 	.word	0x2000004c
 80029e8:	20000058 	.word	0x20000058
 80029ec:	20000054 	.word	0x20000054

080029f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029f4:	4b05      	ldr	r3, [pc, #20]	; (8002a0c <HAL_IncTick+0x1c>)
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	461a      	mov	r2, r3
 80029fa:	4b05      	ldr	r3, [pc, #20]	; (8002a10 <HAL_IncTick+0x20>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4413      	add	r3, r2
 8002a00:	4a03      	ldr	r2, [pc, #12]	; (8002a10 <HAL_IncTick+0x20>)
 8002a02:	6013      	str	r3, [r2, #0]
}
 8002a04:	bf00      	nop
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bc80      	pop	{r7}
 8002a0a:	4770      	bx	lr
 8002a0c:	20000058 	.word	0x20000058
 8002a10:	20000224 	.word	0x20000224

08002a14 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
  return uwTick;
 8002a18:	4b02      	ldr	r3, [pc, #8]	; (8002a24 <HAL_GetTick+0x10>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bc80      	pop	{r7}
 8002a22:	4770      	bx	lr
 8002a24:	20000224 	.word	0x20000224

08002a28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a30:	f7ff fff0 	bl	8002a14 <HAL_GetTick>
 8002a34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a40:	d005      	beq.n	8002a4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a42:	4b0a      	ldr	r3, [pc, #40]	; (8002a6c <HAL_Delay+0x44>)
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	461a      	mov	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a4e:	bf00      	nop
 8002a50:	f7ff ffe0 	bl	8002a14 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d8f7      	bhi.n	8002a50 <HAL_Delay+0x28>
  {
  }
}
 8002a60:	bf00      	nop
 8002a62:	bf00      	nop
 8002a64:	3710      	adds	r7, #16
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	20000058 	.word	0x20000058

08002a70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f003 0307 	and.w	r3, r3, #7
 8002a7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a80:	4b0c      	ldr	r3, [pc, #48]	; (8002ab4 <__NVIC_SetPriorityGrouping+0x44>)
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a86:	68ba      	ldr	r2, [r7, #8]
 8002a88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aa2:	4a04      	ldr	r2, [pc, #16]	; (8002ab4 <__NVIC_SetPriorityGrouping+0x44>)
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	60d3      	str	r3, [r2, #12]
}
 8002aa8:	bf00      	nop
 8002aaa:	3714      	adds	r7, #20
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bc80      	pop	{r7}
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	e000ed00 	.word	0xe000ed00

08002ab8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002abc:	4b04      	ldr	r3, [pc, #16]	; (8002ad0 <__NVIC_GetPriorityGrouping+0x18>)
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	0a1b      	lsrs	r3, r3, #8
 8002ac2:	f003 0307 	and.w	r3, r3, #7
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bc80      	pop	{r7}
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	e000ed00 	.word	0xe000ed00

08002ad4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	4603      	mov	r3, r0
 8002adc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	db0b      	blt.n	8002afe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ae6:	79fb      	ldrb	r3, [r7, #7]
 8002ae8:	f003 021f 	and.w	r2, r3, #31
 8002aec:	4906      	ldr	r1, [pc, #24]	; (8002b08 <__NVIC_EnableIRQ+0x34>)
 8002aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af2:	095b      	lsrs	r3, r3, #5
 8002af4:	2001      	movs	r0, #1
 8002af6:	fa00 f202 	lsl.w	r2, r0, r2
 8002afa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002afe:	bf00      	nop
 8002b00:	370c      	adds	r7, #12
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bc80      	pop	{r7}
 8002b06:	4770      	bx	lr
 8002b08:	e000e100 	.word	0xe000e100

08002b0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	4603      	mov	r3, r0
 8002b14:	6039      	str	r1, [r7, #0]
 8002b16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	db0a      	blt.n	8002b36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	b2da      	uxtb	r2, r3
 8002b24:	490c      	ldr	r1, [pc, #48]	; (8002b58 <__NVIC_SetPriority+0x4c>)
 8002b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2a:	0112      	lsls	r2, r2, #4
 8002b2c:	b2d2      	uxtb	r2, r2
 8002b2e:	440b      	add	r3, r1
 8002b30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b34:	e00a      	b.n	8002b4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	b2da      	uxtb	r2, r3
 8002b3a:	4908      	ldr	r1, [pc, #32]	; (8002b5c <__NVIC_SetPriority+0x50>)
 8002b3c:	79fb      	ldrb	r3, [r7, #7]
 8002b3e:	f003 030f 	and.w	r3, r3, #15
 8002b42:	3b04      	subs	r3, #4
 8002b44:	0112      	lsls	r2, r2, #4
 8002b46:	b2d2      	uxtb	r2, r2
 8002b48:	440b      	add	r3, r1
 8002b4a:	761a      	strb	r2, [r3, #24]
}
 8002b4c:	bf00      	nop
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bc80      	pop	{r7}
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	e000e100 	.word	0xe000e100
 8002b5c:	e000ed00 	.word	0xe000ed00

08002b60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b089      	sub	sp, #36	; 0x24
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f003 0307 	and.w	r3, r3, #7
 8002b72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	f1c3 0307 	rsb	r3, r3, #7
 8002b7a:	2b04      	cmp	r3, #4
 8002b7c:	bf28      	it	cs
 8002b7e:	2304      	movcs	r3, #4
 8002b80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	3304      	adds	r3, #4
 8002b86:	2b06      	cmp	r3, #6
 8002b88:	d902      	bls.n	8002b90 <NVIC_EncodePriority+0x30>
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	3b03      	subs	r3, #3
 8002b8e:	e000      	b.n	8002b92 <NVIC_EncodePriority+0x32>
 8002b90:	2300      	movs	r3, #0
 8002b92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b94:	f04f 32ff 	mov.w	r2, #4294967295
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9e:	43da      	mvns	r2, r3
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	401a      	ands	r2, r3
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ba8:	f04f 31ff 	mov.w	r1, #4294967295
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb2:	43d9      	mvns	r1, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bb8:	4313      	orrs	r3, r2
         );
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3724      	adds	r7, #36	; 0x24
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bc80      	pop	{r7}
 8002bc2:	4770      	bx	lr

08002bc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bd4:	d301      	bcc.n	8002bda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e00f      	b.n	8002bfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bda:	4a0a      	ldr	r2, [pc, #40]	; (8002c04 <SysTick_Config+0x40>)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	3b01      	subs	r3, #1
 8002be0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002be2:	210f      	movs	r1, #15
 8002be4:	f04f 30ff 	mov.w	r0, #4294967295
 8002be8:	f7ff ff90 	bl	8002b0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bec:	4b05      	ldr	r3, [pc, #20]	; (8002c04 <SysTick_Config+0x40>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bf2:	4b04      	ldr	r3, [pc, #16]	; (8002c04 <SysTick_Config+0x40>)
 8002bf4:	2207      	movs	r2, #7
 8002bf6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3708      	adds	r7, #8
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	e000e010 	.word	0xe000e010

08002c08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f7ff ff2d 	bl	8002a70 <__NVIC_SetPriorityGrouping>
}
 8002c16:	bf00      	nop
 8002c18:	3708      	adds	r7, #8
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b086      	sub	sp, #24
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	4603      	mov	r3, r0
 8002c26:	60b9      	str	r1, [r7, #8]
 8002c28:	607a      	str	r2, [r7, #4]
 8002c2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c30:	f7ff ff42 	bl	8002ab8 <__NVIC_GetPriorityGrouping>
 8002c34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	68b9      	ldr	r1, [r7, #8]
 8002c3a:	6978      	ldr	r0, [r7, #20]
 8002c3c:	f7ff ff90 	bl	8002b60 <NVIC_EncodePriority>
 8002c40:	4602      	mov	r2, r0
 8002c42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c46:	4611      	mov	r1, r2
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7ff ff5f 	bl	8002b0c <__NVIC_SetPriority>
}
 8002c4e:	bf00      	nop
 8002c50:	3718      	adds	r7, #24
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c56:	b580      	push	{r7, lr}
 8002c58:	b082      	sub	sp, #8
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7ff ff35 	bl	8002ad4 <__NVIC_EnableIRQ>
}
 8002c6a:	bf00      	nop
 8002c6c:	3708      	adds	r7, #8
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c72:	b580      	push	{r7, lr}
 8002c74:	b082      	sub	sp, #8
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f7ff ffa2 	bl	8002bc4 <SysTick_Config>
 8002c80:	4603      	mov	r3, r0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
	...

08002c8c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c94:	2300      	movs	r3, #0
 8002c96:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d005      	beq.n	8002cae <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2204      	movs	r2, #4
 8002ca6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	73fb      	strb	r3, [r7, #15]
 8002cac:	e051      	b.n	8002d52 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f022 020e 	bic.w	r2, r2, #14
 8002cbc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f022 0201 	bic.w	r2, r2, #1
 8002ccc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a22      	ldr	r2, [pc, #136]	; (8002d5c <HAL_DMA_Abort_IT+0xd0>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d029      	beq.n	8002d2c <HAL_DMA_Abort_IT+0xa0>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a20      	ldr	r2, [pc, #128]	; (8002d60 <HAL_DMA_Abort_IT+0xd4>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d022      	beq.n	8002d28 <HAL_DMA_Abort_IT+0x9c>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a1f      	ldr	r2, [pc, #124]	; (8002d64 <HAL_DMA_Abort_IT+0xd8>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d01a      	beq.n	8002d22 <HAL_DMA_Abort_IT+0x96>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a1d      	ldr	r2, [pc, #116]	; (8002d68 <HAL_DMA_Abort_IT+0xdc>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d012      	beq.n	8002d1c <HAL_DMA_Abort_IT+0x90>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a1c      	ldr	r2, [pc, #112]	; (8002d6c <HAL_DMA_Abort_IT+0xe0>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d00a      	beq.n	8002d16 <HAL_DMA_Abort_IT+0x8a>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a1a      	ldr	r2, [pc, #104]	; (8002d70 <HAL_DMA_Abort_IT+0xe4>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d102      	bne.n	8002d10 <HAL_DMA_Abort_IT+0x84>
 8002d0a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002d0e:	e00e      	b.n	8002d2e <HAL_DMA_Abort_IT+0xa2>
 8002d10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d14:	e00b      	b.n	8002d2e <HAL_DMA_Abort_IT+0xa2>
 8002d16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d1a:	e008      	b.n	8002d2e <HAL_DMA_Abort_IT+0xa2>
 8002d1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d20:	e005      	b.n	8002d2e <HAL_DMA_Abort_IT+0xa2>
 8002d22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d26:	e002      	b.n	8002d2e <HAL_DMA_Abort_IT+0xa2>
 8002d28:	2310      	movs	r3, #16
 8002d2a:	e000      	b.n	8002d2e <HAL_DMA_Abort_IT+0xa2>
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	4a11      	ldr	r2, [pc, #68]	; (8002d74 <HAL_DMA_Abort_IT+0xe8>)
 8002d30:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2201      	movs	r2, #1
 8002d36:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d003      	beq.n	8002d52 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	4798      	blx	r3
    } 
  }
  return status;
 8002d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3710      	adds	r7, #16
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	40020008 	.word	0x40020008
 8002d60:	4002001c 	.word	0x4002001c
 8002d64:	40020030 	.word	0x40020030
 8002d68:	40020044 	.word	0x40020044
 8002d6c:	40020058 	.word	0x40020058
 8002d70:	4002006c 	.word	0x4002006c
 8002d74:	40020000 	.word	0x40020000

08002d78 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	370c      	adds	r7, #12
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bc80      	pop	{r7}
 8002d8e:	4770      	bx	lr

08002d90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b08b      	sub	sp, #44	; 0x2c
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002da2:	e169      	b.n	8003078 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002da4:	2201      	movs	r2, #1
 8002da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	69fa      	ldr	r2, [r7, #28]
 8002db4:	4013      	ands	r3, r2
 8002db6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	f040 8158 	bne.w	8003072 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	4a9a      	ldr	r2, [pc, #616]	; (8003030 <HAL_GPIO_Init+0x2a0>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d05e      	beq.n	8002e8a <HAL_GPIO_Init+0xfa>
 8002dcc:	4a98      	ldr	r2, [pc, #608]	; (8003030 <HAL_GPIO_Init+0x2a0>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d875      	bhi.n	8002ebe <HAL_GPIO_Init+0x12e>
 8002dd2:	4a98      	ldr	r2, [pc, #608]	; (8003034 <HAL_GPIO_Init+0x2a4>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d058      	beq.n	8002e8a <HAL_GPIO_Init+0xfa>
 8002dd8:	4a96      	ldr	r2, [pc, #600]	; (8003034 <HAL_GPIO_Init+0x2a4>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d86f      	bhi.n	8002ebe <HAL_GPIO_Init+0x12e>
 8002dde:	4a96      	ldr	r2, [pc, #600]	; (8003038 <HAL_GPIO_Init+0x2a8>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d052      	beq.n	8002e8a <HAL_GPIO_Init+0xfa>
 8002de4:	4a94      	ldr	r2, [pc, #592]	; (8003038 <HAL_GPIO_Init+0x2a8>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d869      	bhi.n	8002ebe <HAL_GPIO_Init+0x12e>
 8002dea:	4a94      	ldr	r2, [pc, #592]	; (800303c <HAL_GPIO_Init+0x2ac>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d04c      	beq.n	8002e8a <HAL_GPIO_Init+0xfa>
 8002df0:	4a92      	ldr	r2, [pc, #584]	; (800303c <HAL_GPIO_Init+0x2ac>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d863      	bhi.n	8002ebe <HAL_GPIO_Init+0x12e>
 8002df6:	4a92      	ldr	r2, [pc, #584]	; (8003040 <HAL_GPIO_Init+0x2b0>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d046      	beq.n	8002e8a <HAL_GPIO_Init+0xfa>
 8002dfc:	4a90      	ldr	r2, [pc, #576]	; (8003040 <HAL_GPIO_Init+0x2b0>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d85d      	bhi.n	8002ebe <HAL_GPIO_Init+0x12e>
 8002e02:	2b12      	cmp	r3, #18
 8002e04:	d82a      	bhi.n	8002e5c <HAL_GPIO_Init+0xcc>
 8002e06:	2b12      	cmp	r3, #18
 8002e08:	d859      	bhi.n	8002ebe <HAL_GPIO_Init+0x12e>
 8002e0a:	a201      	add	r2, pc, #4	; (adr r2, 8002e10 <HAL_GPIO_Init+0x80>)
 8002e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e10:	08002e8b 	.word	0x08002e8b
 8002e14:	08002e65 	.word	0x08002e65
 8002e18:	08002e77 	.word	0x08002e77
 8002e1c:	08002eb9 	.word	0x08002eb9
 8002e20:	08002ebf 	.word	0x08002ebf
 8002e24:	08002ebf 	.word	0x08002ebf
 8002e28:	08002ebf 	.word	0x08002ebf
 8002e2c:	08002ebf 	.word	0x08002ebf
 8002e30:	08002ebf 	.word	0x08002ebf
 8002e34:	08002ebf 	.word	0x08002ebf
 8002e38:	08002ebf 	.word	0x08002ebf
 8002e3c:	08002ebf 	.word	0x08002ebf
 8002e40:	08002ebf 	.word	0x08002ebf
 8002e44:	08002ebf 	.word	0x08002ebf
 8002e48:	08002ebf 	.word	0x08002ebf
 8002e4c:	08002ebf 	.word	0x08002ebf
 8002e50:	08002ebf 	.word	0x08002ebf
 8002e54:	08002e6d 	.word	0x08002e6d
 8002e58:	08002e81 	.word	0x08002e81
 8002e5c:	4a79      	ldr	r2, [pc, #484]	; (8003044 <HAL_GPIO_Init+0x2b4>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d013      	beq.n	8002e8a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002e62:	e02c      	b.n	8002ebe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	623b      	str	r3, [r7, #32]
          break;
 8002e6a:	e029      	b.n	8002ec0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	3304      	adds	r3, #4
 8002e72:	623b      	str	r3, [r7, #32]
          break;
 8002e74:	e024      	b.n	8002ec0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	3308      	adds	r3, #8
 8002e7c:	623b      	str	r3, [r7, #32]
          break;
 8002e7e:	e01f      	b.n	8002ec0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	330c      	adds	r3, #12
 8002e86:	623b      	str	r3, [r7, #32]
          break;
 8002e88:	e01a      	b.n	8002ec0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d102      	bne.n	8002e98 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002e92:	2304      	movs	r3, #4
 8002e94:	623b      	str	r3, [r7, #32]
          break;
 8002e96:	e013      	b.n	8002ec0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d105      	bne.n	8002eac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ea0:	2308      	movs	r3, #8
 8002ea2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	69fa      	ldr	r2, [r7, #28]
 8002ea8:	611a      	str	r2, [r3, #16]
          break;
 8002eaa:	e009      	b.n	8002ec0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002eac:	2308      	movs	r3, #8
 8002eae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	69fa      	ldr	r2, [r7, #28]
 8002eb4:	615a      	str	r2, [r3, #20]
          break;
 8002eb6:	e003      	b.n	8002ec0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	623b      	str	r3, [r7, #32]
          break;
 8002ebc:	e000      	b.n	8002ec0 <HAL_GPIO_Init+0x130>
          break;
 8002ebe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	2bff      	cmp	r3, #255	; 0xff
 8002ec4:	d801      	bhi.n	8002eca <HAL_GPIO_Init+0x13a>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	e001      	b.n	8002ece <HAL_GPIO_Init+0x13e>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	3304      	adds	r3, #4
 8002ece:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	2bff      	cmp	r3, #255	; 0xff
 8002ed4:	d802      	bhi.n	8002edc <HAL_GPIO_Init+0x14c>
 8002ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	e002      	b.n	8002ee2 <HAL_GPIO_Init+0x152>
 8002edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ede:	3b08      	subs	r3, #8
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	210f      	movs	r1, #15
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef0:	43db      	mvns	r3, r3
 8002ef2:	401a      	ands	r2, r3
 8002ef4:	6a39      	ldr	r1, [r7, #32]
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8002efc:	431a      	orrs	r2, r3
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	f000 80b1 	beq.w	8003072 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002f10:	4b4d      	ldr	r3, [pc, #308]	; (8003048 <HAL_GPIO_Init+0x2b8>)
 8002f12:	699b      	ldr	r3, [r3, #24]
 8002f14:	4a4c      	ldr	r2, [pc, #304]	; (8003048 <HAL_GPIO_Init+0x2b8>)
 8002f16:	f043 0301 	orr.w	r3, r3, #1
 8002f1a:	6193      	str	r3, [r2, #24]
 8002f1c:	4b4a      	ldr	r3, [pc, #296]	; (8003048 <HAL_GPIO_Init+0x2b8>)
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	f003 0301 	and.w	r3, r3, #1
 8002f24:	60bb      	str	r3, [r7, #8]
 8002f26:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002f28:	4a48      	ldr	r2, [pc, #288]	; (800304c <HAL_GPIO_Init+0x2bc>)
 8002f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2c:	089b      	lsrs	r3, r3, #2
 8002f2e:	3302      	adds	r3, #2
 8002f30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f34:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f38:	f003 0303 	and.w	r3, r3, #3
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	220f      	movs	r2, #15
 8002f40:	fa02 f303 	lsl.w	r3, r2, r3
 8002f44:	43db      	mvns	r3, r3
 8002f46:	68fa      	ldr	r2, [r7, #12]
 8002f48:	4013      	ands	r3, r2
 8002f4a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4a40      	ldr	r2, [pc, #256]	; (8003050 <HAL_GPIO_Init+0x2c0>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d013      	beq.n	8002f7c <HAL_GPIO_Init+0x1ec>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	4a3f      	ldr	r2, [pc, #252]	; (8003054 <HAL_GPIO_Init+0x2c4>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d00d      	beq.n	8002f78 <HAL_GPIO_Init+0x1e8>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4a3e      	ldr	r2, [pc, #248]	; (8003058 <HAL_GPIO_Init+0x2c8>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d007      	beq.n	8002f74 <HAL_GPIO_Init+0x1e4>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	4a3d      	ldr	r2, [pc, #244]	; (800305c <HAL_GPIO_Init+0x2cc>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d101      	bne.n	8002f70 <HAL_GPIO_Init+0x1e0>
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e006      	b.n	8002f7e <HAL_GPIO_Init+0x1ee>
 8002f70:	2304      	movs	r3, #4
 8002f72:	e004      	b.n	8002f7e <HAL_GPIO_Init+0x1ee>
 8002f74:	2302      	movs	r3, #2
 8002f76:	e002      	b.n	8002f7e <HAL_GPIO_Init+0x1ee>
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e000      	b.n	8002f7e <HAL_GPIO_Init+0x1ee>
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f80:	f002 0203 	and.w	r2, r2, #3
 8002f84:	0092      	lsls	r2, r2, #2
 8002f86:	4093      	lsls	r3, r2
 8002f88:	68fa      	ldr	r2, [r7, #12]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002f8e:	492f      	ldr	r1, [pc, #188]	; (800304c <HAL_GPIO_Init+0x2bc>)
 8002f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f92:	089b      	lsrs	r3, r3, #2
 8002f94:	3302      	adds	r3, #2
 8002f96:	68fa      	ldr	r2, [r7, #12]
 8002f98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d006      	beq.n	8002fb6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002fa8:	4b2d      	ldr	r3, [pc, #180]	; (8003060 <HAL_GPIO_Init+0x2d0>)
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	492c      	ldr	r1, [pc, #176]	; (8003060 <HAL_GPIO_Init+0x2d0>)
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	600b      	str	r3, [r1, #0]
 8002fb4:	e006      	b.n	8002fc4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002fb6:	4b2a      	ldr	r3, [pc, #168]	; (8003060 <HAL_GPIO_Init+0x2d0>)
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	43db      	mvns	r3, r3
 8002fbe:	4928      	ldr	r1, [pc, #160]	; (8003060 <HAL_GPIO_Init+0x2d0>)
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d006      	beq.n	8002fde <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002fd0:	4b23      	ldr	r3, [pc, #140]	; (8003060 <HAL_GPIO_Init+0x2d0>)
 8002fd2:	685a      	ldr	r2, [r3, #4]
 8002fd4:	4922      	ldr	r1, [pc, #136]	; (8003060 <HAL_GPIO_Init+0x2d0>)
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	604b      	str	r3, [r1, #4]
 8002fdc:	e006      	b.n	8002fec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002fde:	4b20      	ldr	r3, [pc, #128]	; (8003060 <HAL_GPIO_Init+0x2d0>)
 8002fe0:	685a      	ldr	r2, [r3, #4]
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	43db      	mvns	r3, r3
 8002fe6:	491e      	ldr	r1, [pc, #120]	; (8003060 <HAL_GPIO_Init+0x2d0>)
 8002fe8:	4013      	ands	r3, r2
 8002fea:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d006      	beq.n	8003006 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002ff8:	4b19      	ldr	r3, [pc, #100]	; (8003060 <HAL_GPIO_Init+0x2d0>)
 8002ffa:	689a      	ldr	r2, [r3, #8]
 8002ffc:	4918      	ldr	r1, [pc, #96]	; (8003060 <HAL_GPIO_Init+0x2d0>)
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	4313      	orrs	r3, r2
 8003002:	608b      	str	r3, [r1, #8]
 8003004:	e006      	b.n	8003014 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003006:	4b16      	ldr	r3, [pc, #88]	; (8003060 <HAL_GPIO_Init+0x2d0>)
 8003008:	689a      	ldr	r2, [r3, #8]
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	43db      	mvns	r3, r3
 800300e:	4914      	ldr	r1, [pc, #80]	; (8003060 <HAL_GPIO_Init+0x2d0>)
 8003010:	4013      	ands	r3, r2
 8003012:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d021      	beq.n	8003064 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003020:	4b0f      	ldr	r3, [pc, #60]	; (8003060 <HAL_GPIO_Init+0x2d0>)
 8003022:	68da      	ldr	r2, [r3, #12]
 8003024:	490e      	ldr	r1, [pc, #56]	; (8003060 <HAL_GPIO_Init+0x2d0>)
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	4313      	orrs	r3, r2
 800302a:	60cb      	str	r3, [r1, #12]
 800302c:	e021      	b.n	8003072 <HAL_GPIO_Init+0x2e2>
 800302e:	bf00      	nop
 8003030:	10320000 	.word	0x10320000
 8003034:	10310000 	.word	0x10310000
 8003038:	10220000 	.word	0x10220000
 800303c:	10210000 	.word	0x10210000
 8003040:	10120000 	.word	0x10120000
 8003044:	10110000 	.word	0x10110000
 8003048:	40021000 	.word	0x40021000
 800304c:	40010000 	.word	0x40010000
 8003050:	40010800 	.word	0x40010800
 8003054:	40010c00 	.word	0x40010c00
 8003058:	40011000 	.word	0x40011000
 800305c:	40011400 	.word	0x40011400
 8003060:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003064:	4b0b      	ldr	r3, [pc, #44]	; (8003094 <HAL_GPIO_Init+0x304>)
 8003066:	68da      	ldr	r2, [r3, #12]
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	43db      	mvns	r3, r3
 800306c:	4909      	ldr	r1, [pc, #36]	; (8003094 <HAL_GPIO_Init+0x304>)
 800306e:	4013      	ands	r3, r2
 8003070:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003074:	3301      	adds	r3, #1
 8003076:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307e:	fa22 f303 	lsr.w	r3, r2, r3
 8003082:	2b00      	cmp	r3, #0
 8003084:	f47f ae8e 	bne.w	8002da4 <HAL_GPIO_Init+0x14>
  }
}
 8003088:	bf00      	nop
 800308a:	bf00      	nop
 800308c:	372c      	adds	r7, #44	; 0x2c
 800308e:	46bd      	mov	sp, r7
 8003090:	bc80      	pop	{r7}
 8003092:	4770      	bx	lr
 8003094:	40010400 	.word	0x40010400

08003098 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003098:	b480      	push	{r7}
 800309a:	b085      	sub	sp, #20
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	460b      	mov	r3, r1
 80030a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	689a      	ldr	r2, [r3, #8]
 80030a8:	887b      	ldrh	r3, [r7, #2]
 80030aa:	4013      	ands	r3, r2
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d002      	beq.n	80030b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80030b0:	2301      	movs	r3, #1
 80030b2:	73fb      	strb	r3, [r7, #15]
 80030b4:	e001      	b.n	80030ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80030b6:	2300      	movs	r3, #0
 80030b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80030ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3714      	adds	r7, #20
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bc80      	pop	{r7}
 80030c4:	4770      	bx	lr

080030c6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030c6:	b480      	push	{r7}
 80030c8:	b083      	sub	sp, #12
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
 80030ce:	460b      	mov	r3, r1
 80030d0:	807b      	strh	r3, [r7, #2]
 80030d2:	4613      	mov	r3, r2
 80030d4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80030d6:	787b      	ldrb	r3, [r7, #1]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d003      	beq.n	80030e4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030dc:	887a      	ldrh	r2, [r7, #2]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80030e2:	e003      	b.n	80030ec <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80030e4:	887b      	ldrh	r3, [r7, #2]
 80030e6:	041a      	lsls	r2, r3, #16
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	611a      	str	r2, [r3, #16]
}
 80030ec:	bf00      	nop
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bc80      	pop	{r7}
 80030f4:	4770      	bx	lr
	...

080030f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d101      	bne.n	800310a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e12b      	b.n	8003362 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003110:	b2db      	uxtb	r3, r3
 8003112:	2b00      	cmp	r3, #0
 8003114:	d106      	bne.n	8003124 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f7ff fa56 	bl	80025d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2224      	movs	r2, #36	; 0x24
 8003128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f022 0201 	bic.w	r2, r2, #1
 800313a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800314a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800315a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800315c:	f003 f842 	bl	80061e4 <HAL_RCC_GetPCLK1Freq>
 8003160:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	4a81      	ldr	r2, [pc, #516]	; (800336c <HAL_I2C_Init+0x274>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d807      	bhi.n	800317c <HAL_I2C_Init+0x84>
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	4a80      	ldr	r2, [pc, #512]	; (8003370 <HAL_I2C_Init+0x278>)
 8003170:	4293      	cmp	r3, r2
 8003172:	bf94      	ite	ls
 8003174:	2301      	movls	r3, #1
 8003176:	2300      	movhi	r3, #0
 8003178:	b2db      	uxtb	r3, r3
 800317a:	e006      	b.n	800318a <HAL_I2C_Init+0x92>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	4a7d      	ldr	r2, [pc, #500]	; (8003374 <HAL_I2C_Init+0x27c>)
 8003180:	4293      	cmp	r3, r2
 8003182:	bf94      	ite	ls
 8003184:	2301      	movls	r3, #1
 8003186:	2300      	movhi	r3, #0
 8003188:	b2db      	uxtb	r3, r3
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e0e7      	b.n	8003362 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	4a78      	ldr	r2, [pc, #480]	; (8003378 <HAL_I2C_Init+0x280>)
 8003196:	fba2 2303 	umull	r2, r3, r2, r3
 800319a:	0c9b      	lsrs	r3, r3, #18
 800319c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	68ba      	ldr	r2, [r7, #8]
 80031ae:	430a      	orrs	r2, r1
 80031b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	6a1b      	ldr	r3, [r3, #32]
 80031b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	4a6a      	ldr	r2, [pc, #424]	; (800336c <HAL_I2C_Init+0x274>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d802      	bhi.n	80031cc <HAL_I2C_Init+0xd4>
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	3301      	adds	r3, #1
 80031ca:	e009      	b.n	80031e0 <HAL_I2C_Init+0xe8>
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80031d2:	fb02 f303 	mul.w	r3, r2, r3
 80031d6:	4a69      	ldr	r2, [pc, #420]	; (800337c <HAL_I2C_Init+0x284>)
 80031d8:	fba2 2303 	umull	r2, r3, r2, r3
 80031dc:	099b      	lsrs	r3, r3, #6
 80031de:	3301      	adds	r3, #1
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	6812      	ldr	r2, [r2, #0]
 80031e4:	430b      	orrs	r3, r1
 80031e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	69db      	ldr	r3, [r3, #28]
 80031ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80031f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	495c      	ldr	r1, [pc, #368]	; (800336c <HAL_I2C_Init+0x274>)
 80031fc:	428b      	cmp	r3, r1
 80031fe:	d819      	bhi.n	8003234 <HAL_I2C_Init+0x13c>
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	1e59      	subs	r1, r3, #1
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	005b      	lsls	r3, r3, #1
 800320a:	fbb1 f3f3 	udiv	r3, r1, r3
 800320e:	1c59      	adds	r1, r3, #1
 8003210:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003214:	400b      	ands	r3, r1
 8003216:	2b00      	cmp	r3, #0
 8003218:	d00a      	beq.n	8003230 <HAL_I2C_Init+0x138>
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	1e59      	subs	r1, r3, #1
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	005b      	lsls	r3, r3, #1
 8003224:	fbb1 f3f3 	udiv	r3, r1, r3
 8003228:	3301      	adds	r3, #1
 800322a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800322e:	e051      	b.n	80032d4 <HAL_I2C_Init+0x1dc>
 8003230:	2304      	movs	r3, #4
 8003232:	e04f      	b.n	80032d4 <HAL_I2C_Init+0x1dc>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d111      	bne.n	8003260 <HAL_I2C_Init+0x168>
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	1e58      	subs	r0, r3, #1
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6859      	ldr	r1, [r3, #4]
 8003244:	460b      	mov	r3, r1
 8003246:	005b      	lsls	r3, r3, #1
 8003248:	440b      	add	r3, r1
 800324a:	fbb0 f3f3 	udiv	r3, r0, r3
 800324e:	3301      	adds	r3, #1
 8003250:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003254:	2b00      	cmp	r3, #0
 8003256:	bf0c      	ite	eq
 8003258:	2301      	moveq	r3, #1
 800325a:	2300      	movne	r3, #0
 800325c:	b2db      	uxtb	r3, r3
 800325e:	e012      	b.n	8003286 <HAL_I2C_Init+0x18e>
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	1e58      	subs	r0, r3, #1
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6859      	ldr	r1, [r3, #4]
 8003268:	460b      	mov	r3, r1
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	440b      	add	r3, r1
 800326e:	0099      	lsls	r1, r3, #2
 8003270:	440b      	add	r3, r1
 8003272:	fbb0 f3f3 	udiv	r3, r0, r3
 8003276:	3301      	adds	r3, #1
 8003278:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800327c:	2b00      	cmp	r3, #0
 800327e:	bf0c      	ite	eq
 8003280:	2301      	moveq	r3, #1
 8003282:	2300      	movne	r3, #0
 8003284:	b2db      	uxtb	r3, r3
 8003286:	2b00      	cmp	r3, #0
 8003288:	d001      	beq.n	800328e <HAL_I2C_Init+0x196>
 800328a:	2301      	movs	r3, #1
 800328c:	e022      	b.n	80032d4 <HAL_I2C_Init+0x1dc>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d10e      	bne.n	80032b4 <HAL_I2C_Init+0x1bc>
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	1e58      	subs	r0, r3, #1
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6859      	ldr	r1, [r3, #4]
 800329e:	460b      	mov	r3, r1
 80032a0:	005b      	lsls	r3, r3, #1
 80032a2:	440b      	add	r3, r1
 80032a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80032a8:	3301      	adds	r3, #1
 80032aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032b2:	e00f      	b.n	80032d4 <HAL_I2C_Init+0x1dc>
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	1e58      	subs	r0, r3, #1
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6859      	ldr	r1, [r3, #4]
 80032bc:	460b      	mov	r3, r1
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	440b      	add	r3, r1
 80032c2:	0099      	lsls	r1, r3, #2
 80032c4:	440b      	add	r3, r1
 80032c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80032ca:	3301      	adds	r3, #1
 80032cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032d4:	6879      	ldr	r1, [r7, #4]
 80032d6:	6809      	ldr	r1, [r1, #0]
 80032d8:	4313      	orrs	r3, r2
 80032da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	69da      	ldr	r2, [r3, #28]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a1b      	ldr	r3, [r3, #32]
 80032ee:	431a      	orrs	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	430a      	orrs	r2, r1
 80032f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003302:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	6911      	ldr	r1, [r2, #16]
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	68d2      	ldr	r2, [r2, #12]
 800330e:	4311      	orrs	r1, r2
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	6812      	ldr	r2, [r2, #0]
 8003314:	430b      	orrs	r3, r1
 8003316:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	695a      	ldr	r2, [r3, #20]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	699b      	ldr	r3, [r3, #24]
 800332a:	431a      	orrs	r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	430a      	orrs	r2, r1
 8003332:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f042 0201 	orr.w	r2, r2, #1
 8003342:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2220      	movs	r2, #32
 800334e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3710      	adds	r7, #16
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	000186a0 	.word	0x000186a0
 8003370:	001e847f 	.word	0x001e847f
 8003374:	003d08ff 	.word	0x003d08ff
 8003378:	431bde83 	.word	0x431bde83
 800337c:	10624dd3 	.word	0x10624dd3

08003380 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b088      	sub	sp, #32
 8003384:	af02      	add	r7, sp, #8
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	607a      	str	r2, [r7, #4]
 800338a:	461a      	mov	r2, r3
 800338c:	460b      	mov	r3, r1
 800338e:	817b      	strh	r3, [r7, #10]
 8003390:	4613      	mov	r3, r2
 8003392:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003394:	f7ff fb3e 	bl	8002a14 <HAL_GetTick>
 8003398:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	2b20      	cmp	r3, #32
 80033a4:	f040 80e0 	bne.w	8003568 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	9300      	str	r3, [sp, #0]
 80033ac:	2319      	movs	r3, #25
 80033ae:	2201      	movs	r2, #1
 80033b0:	4970      	ldr	r1, [pc, #448]	; (8003574 <HAL_I2C_Master_Transmit+0x1f4>)
 80033b2:	68f8      	ldr	r0, [r7, #12]
 80033b4:	f002 f91a 	bl	80055ec <I2C_WaitOnFlagUntilTimeout>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d001      	beq.n	80033c2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80033be:	2302      	movs	r3, #2
 80033c0:	e0d3      	b.n	800356a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d101      	bne.n	80033d0 <HAL_I2C_Master_Transmit+0x50>
 80033cc:	2302      	movs	r3, #2
 80033ce:	e0cc      	b.n	800356a <HAL_I2C_Master_Transmit+0x1ea>
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0301 	and.w	r3, r3, #1
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d007      	beq.n	80033f6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f042 0201 	orr.w	r2, r2, #1
 80033f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003404:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2221      	movs	r2, #33	; 0x21
 800340a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2210      	movs	r2, #16
 8003412:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2200      	movs	r2, #0
 800341a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	893a      	ldrh	r2, [r7, #8]
 8003426:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800342c:	b29a      	uxth	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	4a50      	ldr	r2, [pc, #320]	; (8003578 <HAL_I2C_Master_Transmit+0x1f8>)
 8003436:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003438:	8979      	ldrh	r1, [r7, #10]
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	6a3a      	ldr	r2, [r7, #32]
 800343e:	68f8      	ldr	r0, [r7, #12]
 8003440:	f001 fedc 	bl	80051fc <I2C_MasterRequestWrite>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d001      	beq.n	800344e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e08d      	b.n	800356a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800344e:	2300      	movs	r3, #0
 8003450:	613b      	str	r3, [r7, #16]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	695b      	ldr	r3, [r3, #20]
 8003458:	613b      	str	r3, [r7, #16]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	699b      	ldr	r3, [r3, #24]
 8003460:	613b      	str	r3, [r7, #16]
 8003462:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003464:	e066      	b.n	8003534 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003466:	697a      	ldr	r2, [r7, #20]
 8003468:	6a39      	ldr	r1, [r7, #32]
 800346a:	68f8      	ldr	r0, [r7, #12]
 800346c:	f002 f994 	bl	8005798 <I2C_WaitOnTXEFlagUntilTimeout>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00d      	beq.n	8003492 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347a:	2b04      	cmp	r3, #4
 800347c:	d107      	bne.n	800348e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800348c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e06b      	b.n	800356a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003496:	781a      	ldrb	r2, [r3, #0]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a2:	1c5a      	adds	r2, r3, #1
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	3b01      	subs	r3, #1
 80034b0:	b29a      	uxth	r2, r3
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ba:	3b01      	subs	r3, #1
 80034bc:	b29a      	uxth	r2, r3
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	695b      	ldr	r3, [r3, #20]
 80034c8:	f003 0304 	and.w	r3, r3, #4
 80034cc:	2b04      	cmp	r3, #4
 80034ce:	d11b      	bne.n	8003508 <HAL_I2C_Master_Transmit+0x188>
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d017      	beq.n	8003508 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034dc:	781a      	ldrb	r2, [r3, #0]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e8:	1c5a      	adds	r2, r3, #1
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	3b01      	subs	r3, #1
 80034f6:	b29a      	uxth	r2, r3
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003500:	3b01      	subs	r3, #1
 8003502:	b29a      	uxth	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003508:	697a      	ldr	r2, [r7, #20]
 800350a:	6a39      	ldr	r1, [r7, #32]
 800350c:	68f8      	ldr	r0, [r7, #12]
 800350e:	f002 f984 	bl	800581a <I2C_WaitOnBTFFlagUntilTimeout>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d00d      	beq.n	8003534 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351c:	2b04      	cmp	r3, #4
 800351e:	d107      	bne.n	8003530 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800352e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e01a      	b.n	800356a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003538:	2b00      	cmp	r3, #0
 800353a:	d194      	bne.n	8003466 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800354a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2220      	movs	r2, #32
 8003550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003564:	2300      	movs	r3, #0
 8003566:	e000      	b.n	800356a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003568:	2302      	movs	r3, #2
  }
}
 800356a:	4618      	mov	r0, r3
 800356c:	3718      	adds	r7, #24
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	00100002 	.word	0x00100002
 8003578:	ffff0000 	.word	0xffff0000

0800357c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b08c      	sub	sp, #48	; 0x30
 8003580:	af02      	add	r7, sp, #8
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	607a      	str	r2, [r7, #4]
 8003586:	461a      	mov	r2, r3
 8003588:	460b      	mov	r3, r1
 800358a:	817b      	strh	r3, [r7, #10]
 800358c:	4613      	mov	r3, r2
 800358e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003590:	2300      	movs	r3, #0
 8003592:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003594:	f7ff fa3e 	bl	8002a14 <HAL_GetTick>
 8003598:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	2b20      	cmp	r3, #32
 80035a4:	f040 823f 	bne.w	8003a26 <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035aa:	9300      	str	r3, [sp, #0]
 80035ac:	2319      	movs	r3, #25
 80035ae:	2201      	movs	r2, #1
 80035b0:	497f      	ldr	r1, [pc, #508]	; (80037b0 <HAL_I2C_Master_Receive+0x234>)
 80035b2:	68f8      	ldr	r0, [r7, #12]
 80035b4:	f002 f81a 	bl	80055ec <I2C_WaitOnFlagUntilTimeout>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d001      	beq.n	80035c2 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80035be:	2302      	movs	r3, #2
 80035c0:	e232      	b.n	8003a28 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d101      	bne.n	80035d0 <HAL_I2C_Master_Receive+0x54>
 80035cc:	2302      	movs	r3, #2
 80035ce:	e22b      	b.n	8003a28 <HAL_I2C_Master_Receive+0x4ac>
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d007      	beq.n	80035f6 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f042 0201 	orr.w	r2, r2, #1
 80035f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003604:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2222      	movs	r2, #34	; 0x22
 800360a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2210      	movs	r2, #16
 8003612:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	893a      	ldrh	r2, [r7, #8]
 8003626:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800362c:	b29a      	uxth	r2, r3
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	4a5f      	ldr	r2, [pc, #380]	; (80037b4 <HAL_I2C_Master_Receive+0x238>)
 8003636:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003638:	8979      	ldrh	r1, [r7, #10]
 800363a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800363e:	68f8      	ldr	r0, [r7, #12]
 8003640:	f001 fe5e 	bl	8005300 <I2C_MasterRequestRead>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e1ec      	b.n	8003a28 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003652:	2b00      	cmp	r3, #0
 8003654:	d113      	bne.n	800367e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003656:	2300      	movs	r3, #0
 8003658:	61fb      	str	r3, [r7, #28]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	695b      	ldr	r3, [r3, #20]
 8003660:	61fb      	str	r3, [r7, #28]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	699b      	ldr	r3, [r3, #24]
 8003668:	61fb      	str	r3, [r7, #28]
 800366a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800367a:	601a      	str	r2, [r3, #0]
 800367c:	e1c0      	b.n	8003a00 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003682:	2b01      	cmp	r3, #1
 8003684:	d11e      	bne.n	80036c4 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003694:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003696:	b672      	cpsid	i
}
 8003698:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800369a:	2300      	movs	r3, #0
 800369c:	61bb      	str	r3, [r7, #24]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	695b      	ldr	r3, [r3, #20]
 80036a4:	61bb      	str	r3, [r7, #24]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	699b      	ldr	r3, [r3, #24]
 80036ac:	61bb      	str	r3, [r7, #24]
 80036ae:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036be:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80036c0:	b662      	cpsie	i
}
 80036c2:	e035      	b.n	8003730 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	d11e      	bne.n	800370a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036da:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80036dc:	b672      	cpsid	i
}
 80036de:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036e0:	2300      	movs	r3, #0
 80036e2:	617b      	str	r3, [r7, #20]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	617b      	str	r3, [r7, #20]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	617b      	str	r3, [r7, #20]
 80036f4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003704:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003706:	b662      	cpsie	i
}
 8003708:	e012      	b.n	8003730 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003718:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800371a:	2300      	movs	r3, #0
 800371c:	613b      	str	r3, [r7, #16]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	695b      	ldr	r3, [r3, #20]
 8003724:	613b      	str	r3, [r7, #16]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	699b      	ldr	r3, [r3, #24]
 800372c:	613b      	str	r3, [r7, #16]
 800372e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003730:	e166      	b.n	8003a00 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003736:	2b03      	cmp	r3, #3
 8003738:	f200 811f 	bhi.w	800397a <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003740:	2b01      	cmp	r3, #1
 8003742:	d123      	bne.n	800378c <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003744:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003746:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003748:	68f8      	ldr	r0, [r7, #12]
 800374a:	f002 f8d9 	bl	8005900 <I2C_WaitOnRXNEFlagUntilTimeout>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d001      	beq.n	8003758 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e167      	b.n	8003a28 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	691a      	ldr	r2, [r3, #16]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003762:	b2d2      	uxtb	r2, r2
 8003764:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376a:	1c5a      	adds	r2, r3, #1
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003774:	3b01      	subs	r3, #1
 8003776:	b29a      	uxth	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003780:	b29b      	uxth	r3, r3
 8003782:	3b01      	subs	r3, #1
 8003784:	b29a      	uxth	r2, r3
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	855a      	strh	r2, [r3, #42]	; 0x2a
 800378a:	e139      	b.n	8003a00 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003790:	2b02      	cmp	r3, #2
 8003792:	d152      	bne.n	800383a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003796:	9300      	str	r3, [sp, #0]
 8003798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800379a:	2200      	movs	r2, #0
 800379c:	4906      	ldr	r1, [pc, #24]	; (80037b8 <HAL_I2C_Master_Receive+0x23c>)
 800379e:	68f8      	ldr	r0, [r7, #12]
 80037a0:	f001 ff24 	bl	80055ec <I2C_WaitOnFlagUntilTimeout>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d008      	beq.n	80037bc <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e13c      	b.n	8003a28 <HAL_I2C_Master_Receive+0x4ac>
 80037ae:	bf00      	nop
 80037b0:	00100002 	.word	0x00100002
 80037b4:	ffff0000 	.word	0xffff0000
 80037b8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80037bc:	b672      	cpsid	i
}
 80037be:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	691a      	ldr	r2, [r3, #16]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037da:	b2d2      	uxtb	r2, r2
 80037dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e2:	1c5a      	adds	r2, r3, #1
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ec:	3b01      	subs	r3, #1
 80037ee:	b29a      	uxth	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	3b01      	subs	r3, #1
 80037fc:	b29a      	uxth	r2, r3
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003802:	b662      	cpsie	i
}
 8003804:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	691a      	ldr	r2, [r3, #16]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003810:	b2d2      	uxtb	r2, r2
 8003812:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003818:	1c5a      	adds	r2, r3, #1
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003822:	3b01      	subs	r3, #1
 8003824:	b29a      	uxth	r2, r3
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800382e:	b29b      	uxth	r3, r3
 8003830:	3b01      	subs	r3, #1
 8003832:	b29a      	uxth	r2, r3
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003838:	e0e2      	b.n	8003a00 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800383a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383c:	9300      	str	r3, [sp, #0]
 800383e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003840:	2200      	movs	r2, #0
 8003842:	497b      	ldr	r1, [pc, #492]	; (8003a30 <HAL_I2C_Master_Receive+0x4b4>)
 8003844:	68f8      	ldr	r0, [r7, #12]
 8003846:	f001 fed1 	bl	80055ec <I2C_WaitOnFlagUntilTimeout>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d001      	beq.n	8003854 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e0e9      	b.n	8003a28 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003862:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003864:	b672      	cpsid	i
}
 8003866:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	691a      	ldr	r2, [r3, #16]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003872:	b2d2      	uxtb	r2, r2
 8003874:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387a:	1c5a      	adds	r2, r3, #1
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003884:	3b01      	subs	r3, #1
 8003886:	b29a      	uxth	r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003890:	b29b      	uxth	r3, r3
 8003892:	3b01      	subs	r3, #1
 8003894:	b29a      	uxth	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800389a:	4b66      	ldr	r3, [pc, #408]	; (8003a34 <HAL_I2C_Master_Receive+0x4b8>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	08db      	lsrs	r3, r3, #3
 80038a0:	4a65      	ldr	r2, [pc, #404]	; (8003a38 <HAL_I2C_Master_Receive+0x4bc>)
 80038a2:	fba2 2303 	umull	r2, r3, r2, r3
 80038a6:	0a1a      	lsrs	r2, r3, #8
 80038a8:	4613      	mov	r3, r2
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	4413      	add	r3, r2
 80038ae:	00da      	lsls	r2, r3, #3
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80038b4:	6a3b      	ldr	r3, [r7, #32]
 80038b6:	3b01      	subs	r3, #1
 80038b8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80038ba:	6a3b      	ldr	r3, [r7, #32]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d118      	bne.n	80038f2 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2220      	movs	r2, #32
 80038ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038da:	f043 0220 	orr.w	r2, r3, #32
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80038e2:	b662      	cpsie	i
}
 80038e4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e09a      	b.n	8003a28 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	695b      	ldr	r3, [r3, #20]
 80038f8:	f003 0304 	and.w	r3, r3, #4
 80038fc:	2b04      	cmp	r3, #4
 80038fe:	d1d9      	bne.n	80038b4 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800390e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	691a      	ldr	r2, [r3, #16]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391a:	b2d2      	uxtb	r2, r2
 800391c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003922:	1c5a      	adds	r2, r3, #1
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800392c:	3b01      	subs	r3, #1
 800392e:	b29a      	uxth	r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003938:	b29b      	uxth	r3, r3
 800393a:	3b01      	subs	r3, #1
 800393c:	b29a      	uxth	r2, r3
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003942:	b662      	cpsie	i
}
 8003944:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	691a      	ldr	r2, [r3, #16]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003950:	b2d2      	uxtb	r2, r2
 8003952:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003958:	1c5a      	adds	r2, r3, #1
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003962:	3b01      	subs	r3, #1
 8003964:	b29a      	uxth	r2, r3
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800396e:	b29b      	uxth	r3, r3
 8003970:	3b01      	subs	r3, #1
 8003972:	b29a      	uxth	r2, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003978:	e042      	b.n	8003a00 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800397a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800397c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800397e:	68f8      	ldr	r0, [r7, #12]
 8003980:	f001 ffbe 	bl	8005900 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d001      	beq.n	800398e <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e04c      	b.n	8003a28 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	691a      	ldr	r2, [r3, #16]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003998:	b2d2      	uxtb	r2, r2
 800399a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a0:	1c5a      	adds	r2, r3, #1
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039aa:	3b01      	subs	r3, #1
 80039ac:	b29a      	uxth	r2, r3
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	3b01      	subs	r3, #1
 80039ba:	b29a      	uxth	r2, r3
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	695b      	ldr	r3, [r3, #20]
 80039c6:	f003 0304 	and.w	r3, r3, #4
 80039ca:	2b04      	cmp	r3, #4
 80039cc:	d118      	bne.n	8003a00 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	691a      	ldr	r2, [r3, #16]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d8:	b2d2      	uxtb	r2, r2
 80039da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e0:	1c5a      	adds	r2, r3, #1
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ea:	3b01      	subs	r3, #1
 80039ec:	b29a      	uxth	r2, r3
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	3b01      	subs	r3, #1
 80039fa:	b29a      	uxth	r2, r3
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f47f ae94 	bne.w	8003732 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2220      	movs	r2, #32
 8003a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003a22:	2300      	movs	r3, #0
 8003a24:	e000      	b.n	8003a28 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 8003a26:	2302      	movs	r3, #2
  }
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3728      	adds	r7, #40	; 0x28
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	00010004 	.word	0x00010004
 8003a34:	2000004c 	.word	0x2000004c
 8003a38:	14f8b589 	.word	0x14f8b589

08003a3c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b088      	sub	sp, #32
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003a44:	2300      	movs	r3, #0
 8003a46:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a54:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a5c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a64:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003a66:	7bfb      	ldrb	r3, [r7, #15]
 8003a68:	2b10      	cmp	r3, #16
 8003a6a:	d003      	beq.n	8003a74 <HAL_I2C_EV_IRQHandler+0x38>
 8003a6c:	7bfb      	ldrb	r3, [r7, #15]
 8003a6e:	2b40      	cmp	r3, #64	; 0x40
 8003a70:	f040 80c1 	bne.w	8003bf6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	699b      	ldr	r3, [r3, #24]
 8003a7a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	695b      	ldr	r3, [r3, #20]
 8003a82:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d10d      	bne.n	8003aaa <HAL_I2C_EV_IRQHandler+0x6e>
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003a94:	d003      	beq.n	8003a9e <HAL_I2C_EV_IRQHandler+0x62>
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003a9c:	d101      	bne.n	8003aa2 <HAL_I2C_EV_IRQHandler+0x66>
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e000      	b.n	8003aa4 <HAL_I2C_EV_IRQHandler+0x68>
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	f000 8132 	beq.w	8003d0e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	f003 0301 	and.w	r3, r3, #1
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d00c      	beq.n	8003ace <HAL_I2C_EV_IRQHandler+0x92>
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	0a5b      	lsrs	r3, r3, #9
 8003ab8:	f003 0301 	and.w	r3, r3, #1
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d006      	beq.n	8003ace <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f001 ffa1 	bl	8005a08 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 fd77 	bl	80045ba <I2C_Master_SB>
 8003acc:	e092      	b.n	8003bf4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	08db      	lsrs	r3, r3, #3
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d009      	beq.n	8003aee <HAL_I2C_EV_IRQHandler+0xb2>
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	0a5b      	lsrs	r3, r3, #9
 8003ade:	f003 0301 	and.w	r3, r3, #1
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d003      	beq.n	8003aee <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f000 fdec 	bl	80046c4 <I2C_Master_ADD10>
 8003aec:	e082      	b.n	8003bf4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	085b      	lsrs	r3, r3, #1
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d009      	beq.n	8003b0e <HAL_I2C_EV_IRQHandler+0xd2>
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	0a5b      	lsrs	r3, r3, #9
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d003      	beq.n	8003b0e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 fe05 	bl	8004716 <I2C_Master_ADDR>
 8003b0c:	e072      	b.n	8003bf4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	089b      	lsrs	r3, r3, #2
 8003b12:	f003 0301 	and.w	r3, r3, #1
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d03b      	beq.n	8003b92 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b28:	f000 80f3 	beq.w	8003d12 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	09db      	lsrs	r3, r3, #7
 8003b30:	f003 0301 	and.w	r3, r3, #1
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d00f      	beq.n	8003b58 <HAL_I2C_EV_IRQHandler+0x11c>
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	0a9b      	lsrs	r3, r3, #10
 8003b3c:	f003 0301 	and.w	r3, r3, #1
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d009      	beq.n	8003b58 <HAL_I2C_EV_IRQHandler+0x11c>
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	089b      	lsrs	r3, r3, #2
 8003b48:	f003 0301 	and.w	r3, r3, #1
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d103      	bne.n	8003b58 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f000 f9f1 	bl	8003f38 <I2C_MasterTransmit_TXE>
 8003b56:	e04d      	b.n	8003bf4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	089b      	lsrs	r3, r3, #2
 8003b5c:	f003 0301 	and.w	r3, r3, #1
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f000 80d6 	beq.w	8003d12 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	0a5b      	lsrs	r3, r3, #9
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	f000 80cf 	beq.w	8003d12 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003b74:	7bbb      	ldrb	r3, [r7, #14]
 8003b76:	2b21      	cmp	r3, #33	; 0x21
 8003b78:	d103      	bne.n	8003b82 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 fa78 	bl	8004070 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b80:	e0c7      	b.n	8003d12 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003b82:	7bfb      	ldrb	r3, [r7, #15]
 8003b84:	2b40      	cmp	r3, #64	; 0x40
 8003b86:	f040 80c4 	bne.w	8003d12 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 fae6 	bl	800415c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b90:	e0bf      	b.n	8003d12 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ba0:	f000 80b7 	beq.w	8003d12 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	099b      	lsrs	r3, r3, #6
 8003ba8:	f003 0301 	and.w	r3, r3, #1
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00f      	beq.n	8003bd0 <HAL_I2C_EV_IRQHandler+0x194>
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	0a9b      	lsrs	r3, r3, #10
 8003bb4:	f003 0301 	and.w	r3, r3, #1
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d009      	beq.n	8003bd0 <HAL_I2C_EV_IRQHandler+0x194>
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	089b      	lsrs	r3, r3, #2
 8003bc0:	f003 0301 	and.w	r3, r3, #1
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d103      	bne.n	8003bd0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 fb5b 	bl	8004284 <I2C_MasterReceive_RXNE>
 8003bce:	e011      	b.n	8003bf4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	089b      	lsrs	r3, r3, #2
 8003bd4:	f003 0301 	and.w	r3, r3, #1
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	f000 809a 	beq.w	8003d12 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	0a5b      	lsrs	r3, r3, #9
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	f000 8093 	beq.w	8003d12 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f000 fbfa 	bl	80043e6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003bf2:	e08e      	b.n	8003d12 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003bf4:	e08d      	b.n	8003d12 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d004      	beq.n	8003c08 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	695b      	ldr	r3, [r3, #20]
 8003c04:	61fb      	str	r3, [r7, #28]
 8003c06:	e007      	b.n	8003c18 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	695b      	ldr	r3, [r3, #20]
 8003c16:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	085b      	lsrs	r3, r3, #1
 8003c1c:	f003 0301 	and.w	r3, r3, #1
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d012      	beq.n	8003c4a <HAL_I2C_EV_IRQHandler+0x20e>
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	0a5b      	lsrs	r3, r3, #9
 8003c28:	f003 0301 	and.w	r3, r3, #1
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d00c      	beq.n	8003c4a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d003      	beq.n	8003c40 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	699b      	ldr	r3, [r3, #24]
 8003c3e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003c40:	69b9      	ldr	r1, [r7, #24]
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 ffbe 	bl	8004bc4 <I2C_Slave_ADDR>
 8003c48:	e066      	b.n	8003d18 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	091b      	lsrs	r3, r3, #4
 8003c4e:	f003 0301 	and.w	r3, r3, #1
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d009      	beq.n	8003c6a <HAL_I2C_EV_IRQHandler+0x22e>
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	0a5b      	lsrs	r3, r3, #9
 8003c5a:	f003 0301 	and.w	r3, r3, #1
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d003      	beq.n	8003c6a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 fff8 	bl	8004c58 <I2C_Slave_STOPF>
 8003c68:	e056      	b.n	8003d18 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003c6a:	7bbb      	ldrb	r3, [r7, #14]
 8003c6c:	2b21      	cmp	r3, #33	; 0x21
 8003c6e:	d002      	beq.n	8003c76 <HAL_I2C_EV_IRQHandler+0x23a>
 8003c70:	7bbb      	ldrb	r3, [r7, #14]
 8003c72:	2b29      	cmp	r3, #41	; 0x29
 8003c74:	d125      	bne.n	8003cc2 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	09db      	lsrs	r3, r3, #7
 8003c7a:	f003 0301 	and.w	r3, r3, #1
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d00f      	beq.n	8003ca2 <HAL_I2C_EV_IRQHandler+0x266>
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	0a9b      	lsrs	r3, r3, #10
 8003c86:	f003 0301 	and.w	r3, r3, #1
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d009      	beq.n	8003ca2 <HAL_I2C_EV_IRQHandler+0x266>
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	089b      	lsrs	r3, r3, #2
 8003c92:	f003 0301 	and.w	r3, r3, #1
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d103      	bne.n	8003ca2 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 fed6 	bl	8004a4c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ca0:	e039      	b.n	8003d16 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	089b      	lsrs	r3, r3, #2
 8003ca6:	f003 0301 	and.w	r3, r3, #1
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d033      	beq.n	8003d16 <HAL_I2C_EV_IRQHandler+0x2da>
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	0a5b      	lsrs	r3, r3, #9
 8003cb2:	f003 0301 	and.w	r3, r3, #1
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d02d      	beq.n	8003d16 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f000 ff03 	bl	8004ac6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003cc0:	e029      	b.n	8003d16 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	099b      	lsrs	r3, r3, #6
 8003cc6:	f003 0301 	and.w	r3, r3, #1
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00f      	beq.n	8003cee <HAL_I2C_EV_IRQHandler+0x2b2>
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	0a9b      	lsrs	r3, r3, #10
 8003cd2:	f003 0301 	and.w	r3, r3, #1
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d009      	beq.n	8003cee <HAL_I2C_EV_IRQHandler+0x2b2>
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	089b      	lsrs	r3, r3, #2
 8003cde:	f003 0301 	and.w	r3, r3, #1
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d103      	bne.n	8003cee <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 ff0d 	bl	8004b06 <I2C_SlaveReceive_RXNE>
 8003cec:	e014      	b.n	8003d18 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	089b      	lsrs	r3, r3, #2
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00e      	beq.n	8003d18 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	0a5b      	lsrs	r3, r3, #9
 8003cfe:	f003 0301 	and.w	r3, r3, #1
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d008      	beq.n	8003d18 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 ff3b 	bl	8004b82 <I2C_SlaveReceive_BTF>
 8003d0c:	e004      	b.n	8003d18 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003d0e:	bf00      	nop
 8003d10:	e002      	b.n	8003d18 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d12:	bf00      	nop
 8003d14:	e000      	b.n	8003d18 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d16:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003d18:	3720      	adds	r7, #32
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}

08003d1e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003d1e:	b580      	push	{r7, lr}
 8003d20:	b08a      	sub	sp, #40	; 0x28
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	695b      	ldr	r3, [r3, #20]
 8003d2c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003d36:	2300      	movs	r3, #0
 8003d38:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d40:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003d42:	6a3b      	ldr	r3, [r7, #32]
 8003d44:	0a1b      	lsrs	r3, r3, #8
 8003d46:	f003 0301 	and.w	r3, r3, #1
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d016      	beq.n	8003d7c <HAL_I2C_ER_IRQHandler+0x5e>
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	0a1b      	lsrs	r3, r3, #8
 8003d52:	f003 0301 	and.w	r3, r3, #1
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d010      	beq.n	8003d7c <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5c:	f043 0301 	orr.w	r3, r3, #1
 8003d60:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003d6a:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d7a:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003d7c:	6a3b      	ldr	r3, [r7, #32]
 8003d7e:	0a5b      	lsrs	r3, r3, #9
 8003d80:	f003 0301 	and.w	r3, r3, #1
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d00e      	beq.n	8003da6 <HAL_I2C_ER_IRQHandler+0x88>
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	0a1b      	lsrs	r3, r3, #8
 8003d8c:	f003 0301 	and.w	r3, r3, #1
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d008      	beq.n	8003da6 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d96:	f043 0302 	orr.w	r3, r3, #2
 8003d9a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003da4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003da6:	6a3b      	ldr	r3, [r7, #32]
 8003da8:	0a9b      	lsrs	r3, r3, #10
 8003daa:	f003 0301 	and.w	r3, r3, #1
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d03f      	beq.n	8003e32 <HAL_I2C_ER_IRQHandler+0x114>
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	0a1b      	lsrs	r3, r3, #8
 8003db6:	f003 0301 	and.w	r3, r3, #1
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d039      	beq.n	8003e32 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 8003dbe:	7efb      	ldrb	r3, [r7, #27]
 8003dc0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dd0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003dd8:	7ebb      	ldrb	r3, [r7, #26]
 8003dda:	2b20      	cmp	r3, #32
 8003ddc:	d112      	bne.n	8003e04 <HAL_I2C_ER_IRQHandler+0xe6>
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d10f      	bne.n	8003e04 <HAL_I2C_ER_IRQHandler+0xe6>
 8003de4:	7cfb      	ldrb	r3, [r7, #19]
 8003de6:	2b21      	cmp	r3, #33	; 0x21
 8003de8:	d008      	beq.n	8003dfc <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003dea:	7cfb      	ldrb	r3, [r7, #19]
 8003dec:	2b29      	cmp	r3, #41	; 0x29
 8003dee:	d005      	beq.n	8003dfc <HAL_I2C_ER_IRQHandler+0xde>
 8003df0:	7cfb      	ldrb	r3, [r7, #19]
 8003df2:	2b28      	cmp	r3, #40	; 0x28
 8003df4:	d106      	bne.n	8003e04 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2b21      	cmp	r3, #33	; 0x21
 8003dfa:	d103      	bne.n	8003e04 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f001 f85b 	bl	8004eb8 <I2C_Slave_AF>
 8003e02:	e016      	b.n	8003e32 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e0c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e10:	f043 0304 	orr.w	r3, r3, #4
 8003e14:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003e16:	7efb      	ldrb	r3, [r7, #27]
 8003e18:	2b10      	cmp	r3, #16
 8003e1a:	d002      	beq.n	8003e22 <HAL_I2C_ER_IRQHandler+0x104>
 8003e1c:	7efb      	ldrb	r3, [r7, #27]
 8003e1e:	2b40      	cmp	r3, #64	; 0x40
 8003e20:	d107      	bne.n	8003e32 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e30:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003e32:	6a3b      	ldr	r3, [r7, #32]
 8003e34:	0adb      	lsrs	r3, r3, #11
 8003e36:	f003 0301 	and.w	r3, r3, #1
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00e      	beq.n	8003e5c <HAL_I2C_ER_IRQHandler+0x13e>
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	0a1b      	lsrs	r3, r3, #8
 8003e42:	f003 0301 	and.w	r3, r3, #1
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d008      	beq.n	8003e5c <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4c:	f043 0308 	orr.w	r3, r3, #8
 8003e50:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003e5a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d008      	beq.n	8003e74 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e68:	431a      	orrs	r2, r3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f001 f892 	bl	8004f98 <I2C_ITError>
  }
}
 8003e74:	bf00      	nop
 8003e76:	3728      	adds	r7, #40	; 0x28
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003e84:	bf00      	nop
 8003e86:	370c      	adds	r7, #12
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bc80      	pop	{r7}
 8003e8c:	4770      	bx	lr

08003e8e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e8e:	b480      	push	{r7}
 8003e90:	b083      	sub	sp, #12
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003e96:	bf00      	nop
 8003e98:	370c      	adds	r7, #12
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bc80      	pop	{r7}
 8003e9e:	4770      	bx	lr

08003ea0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003ea8:	bf00      	nop
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bc80      	pop	{r7}
 8003eb0:	4770      	bx	lr

08003eb2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003eb2:	b480      	push	{r7}
 8003eb4:	b083      	sub	sp, #12
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003eba:	bf00      	nop
 8003ebc:	370c      	adds	r7, #12
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bc80      	pop	{r7}
 8003ec2:	4770      	bx	lr

08003ec4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	460b      	mov	r3, r1
 8003ece:	70fb      	strb	r3, [r7, #3]
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003ed4:	bf00      	nop
 8003ed6:	370c      	adds	r7, #12
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bc80      	pop	{r7}
 8003edc:	4770      	bx	lr

08003ede <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ede:	b480      	push	{r7}
 8003ee0:	b083      	sub	sp, #12
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003ee6:	bf00      	nop
 8003ee8:	370c      	adds	r7, #12
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bc80      	pop	{r7}
 8003eee:	4770      	bx	lr

08003ef0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003ef8:	bf00      	nop
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bc80      	pop	{r7}
 8003f00:	4770      	bx	lr

08003f02 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f02:	b480      	push	{r7}
 8003f04:	b083      	sub	sp, #12
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003f0a:	bf00      	nop
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bc80      	pop	{r7}
 8003f12:	4770      	bx	lr

08003f14 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003f1c:	bf00      	nop
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bc80      	pop	{r7}
 8003f24:	4770      	bx	lr

08003f26 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f26:	b480      	push	{r7}
 8003f28:	b083      	sub	sp, #12
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003f2e:	bf00      	nop
 8003f30:	370c      	adds	r7, #12
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bc80      	pop	{r7}
 8003f36:	4770      	bx	lr

08003f38 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f46:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f4e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f54:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d150      	bne.n	8004000 <I2C_MasterTransmit_TXE+0xc8>
 8003f5e:	7bfb      	ldrb	r3, [r7, #15]
 8003f60:	2b21      	cmp	r3, #33	; 0x21
 8003f62:	d14d      	bne.n	8004000 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	2b08      	cmp	r3, #8
 8003f68:	d01d      	beq.n	8003fa6 <I2C_MasterTransmit_TXE+0x6e>
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	2b20      	cmp	r3, #32
 8003f6e:	d01a      	beq.n	8003fa6 <I2C_MasterTransmit_TXE+0x6e>
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f76:	d016      	beq.n	8003fa6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	685a      	ldr	r2, [r3, #4]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f86:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2211      	movs	r2, #17
 8003f8c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2220      	movs	r2, #32
 8003f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f7ff ff6c 	bl	8003e7c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003fa4:	e060      	b.n	8004068 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	685a      	ldr	r2, [r3, #4]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003fb4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fc4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2220      	movs	r2, #32
 8003fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	2b40      	cmp	r3, #64	; 0x40
 8003fde:	d107      	bne.n	8003ff0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f7ff ff81 	bl	8003ef0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003fee:	e03b      	b.n	8004068 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f7ff ff3f 	bl	8003e7c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003ffe:	e033      	b.n	8004068 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004000:	7bfb      	ldrb	r3, [r7, #15]
 8004002:	2b21      	cmp	r3, #33	; 0x21
 8004004:	d005      	beq.n	8004012 <I2C_MasterTransmit_TXE+0xda>
 8004006:	7bbb      	ldrb	r3, [r7, #14]
 8004008:	2b40      	cmp	r3, #64	; 0x40
 800400a:	d12d      	bne.n	8004068 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800400c:	7bfb      	ldrb	r3, [r7, #15]
 800400e:	2b22      	cmp	r3, #34	; 0x22
 8004010:	d12a      	bne.n	8004068 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004016:	b29b      	uxth	r3, r3
 8004018:	2b00      	cmp	r3, #0
 800401a:	d108      	bne.n	800402e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	685a      	ldr	r2, [r3, #4]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800402a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800402c:	e01c      	b.n	8004068 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004034:	b2db      	uxtb	r3, r3
 8004036:	2b40      	cmp	r3, #64	; 0x40
 8004038:	d103      	bne.n	8004042 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f000 f88e 	bl	800415c <I2C_MemoryTransmit_TXE_BTF>
}
 8004040:	e012      	b.n	8004068 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004046:	781a      	ldrb	r2, [r3, #0]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004052:	1c5a      	adds	r2, r3, #1
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800405c:	b29b      	uxth	r3, r3
 800405e:	3b01      	subs	r3, #1
 8004060:	b29a      	uxth	r2, r3
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004066:	e7ff      	b.n	8004068 <I2C_MasterTransmit_TXE+0x130>
 8004068:	bf00      	nop
 800406a:	3710      	adds	r7, #16
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800407c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004084:	b2db      	uxtb	r3, r3
 8004086:	2b21      	cmp	r3, #33	; 0x21
 8004088:	d164      	bne.n	8004154 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800408e:	b29b      	uxth	r3, r3
 8004090:	2b00      	cmp	r3, #0
 8004092:	d012      	beq.n	80040ba <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004098:	781a      	ldrb	r2, [r3, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a4:	1c5a      	adds	r2, r3, #1
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	3b01      	subs	r3, #1
 80040b2:	b29a      	uxth	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80040b8:	e04c      	b.n	8004154 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2b08      	cmp	r3, #8
 80040be:	d01d      	beq.n	80040fc <I2C_MasterTransmit_BTF+0x8c>
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2b20      	cmp	r3, #32
 80040c4:	d01a      	beq.n	80040fc <I2C_MasterTransmit_BTF+0x8c>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80040cc:	d016      	beq.n	80040fc <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	685a      	ldr	r2, [r3, #4]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80040dc:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2211      	movs	r2, #17
 80040e2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2220      	movs	r2, #32
 80040f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f7ff fec1 	bl	8003e7c <HAL_I2C_MasterTxCpltCallback>
}
 80040fa:	e02b      	b.n	8004154 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	685a      	ldr	r2, [r3, #4]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800410a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800411a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2220      	movs	r2, #32
 8004126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004130:	b2db      	uxtb	r3, r3
 8004132:	2b40      	cmp	r3, #64	; 0x40
 8004134:	d107      	bne.n	8004146 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f7ff fed6 	bl	8003ef0 <HAL_I2C_MemTxCpltCallback>
}
 8004144:	e006      	b.n	8004154 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f7ff fe94 	bl	8003e7c <HAL_I2C_MasterTxCpltCallback>
}
 8004154:	bf00      	nop
 8004156:	3710      	adds	r7, #16
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800416a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004170:	2b00      	cmp	r3, #0
 8004172:	d11d      	bne.n	80041b0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004178:	2b01      	cmp	r3, #1
 800417a:	d10b      	bne.n	8004194 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004180:	b2da      	uxtb	r2, r3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800418c:	1c9a      	adds	r2, r3, #2
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004192:	e073      	b.n	800427c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004198:	b29b      	uxth	r3, r3
 800419a:	121b      	asrs	r3, r3, #8
 800419c:	b2da      	uxtb	r2, r3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041a8:	1c5a      	adds	r2, r3, #1
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	651a      	str	r2, [r3, #80]	; 0x50
}
 80041ae:	e065      	b.n	800427c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d10b      	bne.n	80041d0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041bc:	b2da      	uxtb	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041c8:	1c5a      	adds	r2, r3, #1
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80041ce:	e055      	b.n	800427c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	d151      	bne.n	800427c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80041d8:	7bfb      	ldrb	r3, [r7, #15]
 80041da:	2b22      	cmp	r3, #34	; 0x22
 80041dc:	d10d      	bne.n	80041fa <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041ec:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041f2:	1c5a      	adds	r2, r3, #1
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80041f8:	e040      	b.n	800427c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041fe:	b29b      	uxth	r3, r3
 8004200:	2b00      	cmp	r3, #0
 8004202:	d015      	beq.n	8004230 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004204:	7bfb      	ldrb	r3, [r7, #15]
 8004206:	2b21      	cmp	r3, #33	; 0x21
 8004208:	d112      	bne.n	8004230 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420e:	781a      	ldrb	r2, [r3, #0]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421a:	1c5a      	adds	r2, r3, #1
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004224:	b29b      	uxth	r3, r3
 8004226:	3b01      	subs	r3, #1
 8004228:	b29a      	uxth	r2, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800422e:	e025      	b.n	800427c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004234:	b29b      	uxth	r3, r3
 8004236:	2b00      	cmp	r3, #0
 8004238:	d120      	bne.n	800427c <I2C_MemoryTransmit_TXE_BTF+0x120>
 800423a:	7bfb      	ldrb	r3, [r7, #15]
 800423c:	2b21      	cmp	r3, #33	; 0x21
 800423e:	d11d      	bne.n	800427c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	685a      	ldr	r2, [r3, #4]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800424e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800425e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2220      	movs	r2, #32
 800426a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f7ff fe3a 	bl	8003ef0 <HAL_I2C_MemTxCpltCallback>
}
 800427c:	bf00      	nop
 800427e:	3710      	adds	r7, #16
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004292:	b2db      	uxtb	r3, r3
 8004294:	2b22      	cmp	r3, #34	; 0x22
 8004296:	f040 80a2 	bne.w	80043de <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800429e:	b29b      	uxth	r3, r3
 80042a0:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2b03      	cmp	r3, #3
 80042a6:	d921      	bls.n	80042ec <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	691a      	ldr	r2, [r3, #16]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b2:	b2d2      	uxtb	r2, r2
 80042b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ba:	1c5a      	adds	r2, r3, #1
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	3b01      	subs	r3, #1
 80042c8:	b29a      	uxth	r2, r3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	2b03      	cmp	r3, #3
 80042d6:	f040 8082 	bne.w	80043de <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	685a      	ldr	r2, [r3, #4]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042e8:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80042ea:	e078      	b.n	80043de <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d074      	beq.n	80043de <I2C_MasterReceive_RXNE+0x15a>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d002      	beq.n	8004300 <I2C_MasterReceive_RXNE+0x7c>
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d16e      	bne.n	80043de <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f001 facb 	bl	800589c <I2C_WaitOnSTOPRequestThroughIT>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d142      	bne.n	8004392 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800431a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	685a      	ldr	r2, [r3, #4]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800432a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	691a      	ldr	r2, [r3, #16]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004336:	b2d2      	uxtb	r2, r2
 8004338:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433e:	1c5a      	adds	r2, r3, #1
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004348:	b29b      	uxth	r3, r3
 800434a:	3b01      	subs	r3, #1
 800434c:	b29a      	uxth	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2220      	movs	r2, #32
 8004356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004360:	b2db      	uxtb	r3, r3
 8004362:	2b40      	cmp	r3, #64	; 0x40
 8004364:	d10a      	bne.n	800437c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f7ff fdc4 	bl	8003f02 <HAL_I2C_MemRxCpltCallback>
}
 800437a:	e030      	b.n	80043de <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2212      	movs	r2, #18
 8004388:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f7ff fd7f 	bl	8003e8e <HAL_I2C_MasterRxCpltCallback>
}
 8004390:	e025      	b.n	80043de <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	685a      	ldr	r2, [r3, #4]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80043a0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	691a      	ldr	r2, [r3, #16]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ac:	b2d2      	uxtb	r2, r2
 80043ae:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b4:	1c5a      	adds	r2, r3, #1
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043be:	b29b      	uxth	r3, r3
 80043c0:	3b01      	subs	r3, #1
 80043c2:	b29a      	uxth	r2, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2220      	movs	r2, #32
 80043cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f7ff fd9b 	bl	8003f14 <HAL_I2C_ErrorCallback>
}
 80043de:	bf00      	nop
 80043e0:	3710      	adds	r7, #16
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}

080043e6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80043e6:	b580      	push	{r7, lr}
 80043e8:	b084      	sub	sp, #16
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	2b04      	cmp	r3, #4
 80043fc:	d11b      	bne.n	8004436 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	685a      	ldr	r2, [r3, #4]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800440c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	691a      	ldr	r2, [r3, #16]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004418:	b2d2      	uxtb	r2, r2
 800441a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004420:	1c5a      	adds	r2, r3, #1
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800442a:	b29b      	uxth	r3, r3
 800442c:	3b01      	subs	r3, #1
 800442e:	b29a      	uxth	r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004434:	e0bd      	b.n	80045b2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800443a:	b29b      	uxth	r3, r3
 800443c:	2b03      	cmp	r3, #3
 800443e:	d129      	bne.n	8004494 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	685a      	ldr	r2, [r3, #4]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800444e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2b04      	cmp	r3, #4
 8004454:	d00a      	beq.n	800446c <I2C_MasterReceive_BTF+0x86>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2b02      	cmp	r3, #2
 800445a:	d007      	beq.n	800446c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800446a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	691a      	ldr	r2, [r3, #16]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004476:	b2d2      	uxtb	r2, r2
 8004478:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447e:	1c5a      	adds	r2, r3, #1
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004488:	b29b      	uxth	r3, r3
 800448a:	3b01      	subs	r3, #1
 800448c:	b29a      	uxth	r2, r3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004492:	e08e      	b.n	80045b2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004498:	b29b      	uxth	r3, r3
 800449a:	2b02      	cmp	r3, #2
 800449c:	d176      	bne.n	800458c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d002      	beq.n	80044aa <I2C_MasterReceive_BTF+0xc4>
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2b10      	cmp	r3, #16
 80044a8:	d108      	bne.n	80044bc <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044b8:	601a      	str	r2, [r3, #0]
 80044ba:	e019      	b.n	80044f0 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2b04      	cmp	r3, #4
 80044c0:	d002      	beq.n	80044c8 <I2C_MasterReceive_BTF+0xe2>
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	d108      	bne.n	80044da <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80044d6:	601a      	str	r2, [r3, #0]
 80044d8:	e00a      	b.n	80044f0 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2b10      	cmp	r3, #16
 80044de:	d007      	beq.n	80044f0 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044ee:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	691a      	ldr	r2, [r3, #16]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fa:	b2d2      	uxtb	r2, r2
 80044fc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004502:	1c5a      	adds	r2, r3, #1
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800450c:	b29b      	uxth	r3, r3
 800450e:	3b01      	subs	r3, #1
 8004510:	b29a      	uxth	r2, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	691a      	ldr	r2, [r3, #16]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004520:	b2d2      	uxtb	r2, r2
 8004522:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004528:	1c5a      	adds	r2, r3, #1
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004532:	b29b      	uxth	r3, r3
 8004534:	3b01      	subs	r3, #1
 8004536:	b29a      	uxth	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	685a      	ldr	r2, [r3, #4]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800454a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2220      	movs	r2, #32
 8004550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800455a:	b2db      	uxtb	r3, r3
 800455c:	2b40      	cmp	r3, #64	; 0x40
 800455e:	d10a      	bne.n	8004576 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f7ff fcc7 	bl	8003f02 <HAL_I2C_MemRxCpltCallback>
}
 8004574:	e01d      	b.n	80045b2 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2212      	movs	r2, #18
 8004582:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f7ff fc82 	bl	8003e8e <HAL_I2C_MasterRxCpltCallback>
}
 800458a:	e012      	b.n	80045b2 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	691a      	ldr	r2, [r3, #16]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004596:	b2d2      	uxtb	r2, r2
 8004598:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459e:	1c5a      	adds	r2, r3, #1
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	3b01      	subs	r3, #1
 80045ac:	b29a      	uxth	r2, r3
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80045b2:	bf00      	nop
 80045b4:	3710      	adds	r7, #16
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}

080045ba <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80045ba:	b480      	push	{r7}
 80045bc:	b083      	sub	sp, #12
 80045be:	af00      	add	r7, sp, #0
 80045c0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	2b40      	cmp	r3, #64	; 0x40
 80045cc:	d117      	bne.n	80045fe <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d109      	bne.n	80045ea <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	461a      	mov	r2, r3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80045e6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80045e8:	e067      	b.n	80046ba <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	f043 0301 	orr.w	r3, r3, #1
 80045f4:	b2da      	uxtb	r2, r3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	611a      	str	r2, [r3, #16]
}
 80045fc:	e05d      	b.n	80046ba <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004606:	d133      	bne.n	8004670 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800460e:	b2db      	uxtb	r3, r3
 8004610:	2b21      	cmp	r3, #33	; 0x21
 8004612:	d109      	bne.n	8004628 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004618:	b2db      	uxtb	r3, r3
 800461a:	461a      	mov	r2, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004624:	611a      	str	r2, [r3, #16]
 8004626:	e008      	b.n	800463a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800462c:	b2db      	uxtb	r3, r3
 800462e:	f043 0301 	orr.w	r3, r3, #1
 8004632:	b2da      	uxtb	r2, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800463e:	2b00      	cmp	r3, #0
 8004640:	d004      	beq.n	800464c <I2C_Master_SB+0x92>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004648:	2b00      	cmp	r3, #0
 800464a:	d108      	bne.n	800465e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004650:	2b00      	cmp	r3, #0
 8004652:	d032      	beq.n	80046ba <I2C_Master_SB+0x100>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800465a:	2b00      	cmp	r3, #0
 800465c:	d02d      	beq.n	80046ba <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	685a      	ldr	r2, [r3, #4]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800466c:	605a      	str	r2, [r3, #4]
}
 800466e:	e024      	b.n	80046ba <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004674:	2b00      	cmp	r3, #0
 8004676:	d10e      	bne.n	8004696 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800467c:	b29b      	uxth	r3, r3
 800467e:	11db      	asrs	r3, r3, #7
 8004680:	b2db      	uxtb	r3, r3
 8004682:	f003 0306 	and.w	r3, r3, #6
 8004686:	b2db      	uxtb	r3, r3
 8004688:	f063 030f 	orn	r3, r3, #15
 800468c:	b2da      	uxtb	r2, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	611a      	str	r2, [r3, #16]
}
 8004694:	e011      	b.n	80046ba <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800469a:	2b01      	cmp	r3, #1
 800469c:	d10d      	bne.n	80046ba <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	11db      	asrs	r3, r3, #7
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	f003 0306 	and.w	r3, r3, #6
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	f063 030e 	orn	r3, r3, #14
 80046b2:	b2da      	uxtb	r2, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	611a      	str	r2, [r3, #16]
}
 80046ba:	bf00      	nop
 80046bc:	370c      	adds	r7, #12
 80046be:	46bd      	mov	sp, r7
 80046c0:	bc80      	pop	{r7}
 80046c2:	4770      	bx	lr

080046c4 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046d0:	b2da      	uxtb	r2, r3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d004      	beq.n	80046ea <I2C_Master_ADD10+0x26>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d108      	bne.n	80046fc <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00c      	beq.n	800470c <I2C_Master_ADD10+0x48>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d007      	beq.n	800470c <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	685a      	ldr	r2, [r3, #4]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800470a:	605a      	str	r2, [r3, #4]
  }
}
 800470c:	bf00      	nop
 800470e:	370c      	adds	r7, #12
 8004710:	46bd      	mov	sp, r7
 8004712:	bc80      	pop	{r7}
 8004714:	4770      	bx	lr

08004716 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004716:	b480      	push	{r7}
 8004718:	b091      	sub	sp, #68	; 0x44
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004724:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800472c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004732:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800473a:	b2db      	uxtb	r3, r3
 800473c:	2b22      	cmp	r3, #34	; 0x22
 800473e:	f040 8174 	bne.w	8004a2a <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004746:	2b00      	cmp	r3, #0
 8004748:	d10f      	bne.n	800476a <I2C_Master_ADDR+0x54>
 800474a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800474e:	2b40      	cmp	r3, #64	; 0x40
 8004750:	d10b      	bne.n	800476a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004752:	2300      	movs	r3, #0
 8004754:	633b      	str	r3, [r7, #48]	; 0x30
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	695b      	ldr	r3, [r3, #20]
 800475c:	633b      	str	r3, [r7, #48]	; 0x30
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	699b      	ldr	r3, [r3, #24]
 8004764:	633b      	str	r3, [r7, #48]	; 0x30
 8004766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004768:	e16b      	b.n	8004a42 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800476e:	2b00      	cmp	r3, #0
 8004770:	d11d      	bne.n	80047ae <I2C_Master_ADDR+0x98>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800477a:	d118      	bne.n	80047ae <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800477c:	2300      	movs	r3, #0
 800477e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	695b      	ldr	r3, [r3, #20]
 8004786:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	699b      	ldr	r3, [r3, #24]
 800478e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004790:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047a0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047a6:	1c5a      	adds	r2, r3, #1
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	651a      	str	r2, [r3, #80]	; 0x50
 80047ac:	e149      	b.n	8004a42 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d113      	bne.n	80047e0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047b8:	2300      	movs	r3, #0
 80047ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	699b      	ldr	r3, [r3, #24]
 80047ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80047cc:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047dc:	601a      	str	r2, [r3, #0]
 80047de:	e120      	b.n	8004a22 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	f040 808a 	bne.w	8004900 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80047ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ee:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80047f2:	d137      	bne.n	8004864 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004802:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800480e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004812:	d113      	bne.n	800483c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004822:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004824:	2300      	movs	r3, #0
 8004826:	627b      	str	r3, [r7, #36]	; 0x24
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	695b      	ldr	r3, [r3, #20]
 800482e:	627b      	str	r3, [r7, #36]	; 0x24
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	699b      	ldr	r3, [r3, #24]
 8004836:	627b      	str	r3, [r7, #36]	; 0x24
 8004838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483a:	e0f2      	b.n	8004a22 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800483c:	2300      	movs	r3, #0
 800483e:	623b      	str	r3, [r7, #32]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	695b      	ldr	r3, [r3, #20]
 8004846:	623b      	str	r3, [r7, #32]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	699b      	ldr	r3, [r3, #24]
 800484e:	623b      	str	r3, [r7, #32]
 8004850:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004860:	601a      	str	r2, [r3, #0]
 8004862:	e0de      	b.n	8004a22 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004866:	2b08      	cmp	r3, #8
 8004868:	d02e      	beq.n	80048c8 <I2C_Master_ADDR+0x1b2>
 800486a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800486c:	2b20      	cmp	r3, #32
 800486e:	d02b      	beq.n	80048c8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004872:	2b12      	cmp	r3, #18
 8004874:	d102      	bne.n	800487c <I2C_Master_ADDR+0x166>
 8004876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004878:	2b01      	cmp	r3, #1
 800487a:	d125      	bne.n	80048c8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800487c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800487e:	2b04      	cmp	r3, #4
 8004880:	d00e      	beq.n	80048a0 <I2C_Master_ADDR+0x18a>
 8004882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004884:	2b02      	cmp	r3, #2
 8004886:	d00b      	beq.n	80048a0 <I2C_Master_ADDR+0x18a>
 8004888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800488a:	2b10      	cmp	r3, #16
 800488c:	d008      	beq.n	80048a0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800489c:	601a      	str	r2, [r3, #0]
 800489e:	e007      	b.n	80048b0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80048ae:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048b0:	2300      	movs	r3, #0
 80048b2:	61fb      	str	r3, [r7, #28]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	695b      	ldr	r3, [r3, #20]
 80048ba:	61fb      	str	r3, [r7, #28]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	699b      	ldr	r3, [r3, #24]
 80048c2:	61fb      	str	r3, [r7, #28]
 80048c4:	69fb      	ldr	r3, [r7, #28]
 80048c6:	e0ac      	b.n	8004a22 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048d6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048d8:	2300      	movs	r3, #0
 80048da:	61bb      	str	r3, [r7, #24]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	61bb      	str	r3, [r7, #24]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	699b      	ldr	r3, [r3, #24]
 80048ea:	61bb      	str	r3, [r7, #24]
 80048ec:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048fc:	601a      	str	r2, [r3, #0]
 80048fe:	e090      	b.n	8004a22 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004904:	b29b      	uxth	r3, r3
 8004906:	2b02      	cmp	r3, #2
 8004908:	d158      	bne.n	80049bc <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800490a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800490c:	2b04      	cmp	r3, #4
 800490e:	d021      	beq.n	8004954 <I2C_Master_ADDR+0x23e>
 8004910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004912:	2b02      	cmp	r3, #2
 8004914:	d01e      	beq.n	8004954 <I2C_Master_ADDR+0x23e>
 8004916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004918:	2b10      	cmp	r3, #16
 800491a:	d01b      	beq.n	8004954 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800492a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800492c:	2300      	movs	r3, #0
 800492e:	617b      	str	r3, [r7, #20]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	695b      	ldr	r3, [r3, #20]
 8004936:	617b      	str	r3, [r7, #20]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	699b      	ldr	r3, [r3, #24]
 800493e:	617b      	str	r3, [r7, #20]
 8004940:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004950:	601a      	str	r2, [r3, #0]
 8004952:	e012      	b.n	800497a <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004962:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004964:	2300      	movs	r3, #0
 8004966:	613b      	str	r3, [r7, #16]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	695b      	ldr	r3, [r3, #20]
 800496e:	613b      	str	r3, [r7, #16]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	699b      	ldr	r3, [r3, #24]
 8004976:	613b      	str	r3, [r7, #16]
 8004978:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004984:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004988:	d14b      	bne.n	8004a22 <I2C_Master_ADDR+0x30c>
 800498a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800498c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004990:	d00b      	beq.n	80049aa <I2C_Master_ADDR+0x294>
 8004992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004994:	2b01      	cmp	r3, #1
 8004996:	d008      	beq.n	80049aa <I2C_Master_ADDR+0x294>
 8004998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800499a:	2b08      	cmp	r3, #8
 800499c:	d005      	beq.n	80049aa <I2C_Master_ADDR+0x294>
 800499e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049a0:	2b10      	cmp	r3, #16
 80049a2:	d002      	beq.n	80049aa <I2C_Master_ADDR+0x294>
 80049a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049a6:	2b20      	cmp	r3, #32
 80049a8:	d13b      	bne.n	8004a22 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	685a      	ldr	r2, [r3, #4]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80049b8:	605a      	str	r2, [r3, #4]
 80049ba:	e032      	b.n	8004a22 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80049ca:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049da:	d117      	bne.n	8004a0c <I2C_Master_ADDR+0x2f6>
 80049dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049de:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80049e2:	d00b      	beq.n	80049fc <I2C_Master_ADDR+0x2e6>
 80049e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d008      	beq.n	80049fc <I2C_Master_ADDR+0x2e6>
 80049ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ec:	2b08      	cmp	r3, #8
 80049ee:	d005      	beq.n	80049fc <I2C_Master_ADDR+0x2e6>
 80049f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049f2:	2b10      	cmp	r3, #16
 80049f4:	d002      	beq.n	80049fc <I2C_Master_ADDR+0x2e6>
 80049f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049f8:	2b20      	cmp	r3, #32
 80049fa:	d107      	bne.n	8004a0c <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	685a      	ldr	r2, [r3, #4]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a0a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	60fb      	str	r3, [r7, #12]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	695b      	ldr	r3, [r3, #20]
 8004a16:	60fb      	str	r3, [r7, #12]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	699b      	ldr	r3, [r3, #24]
 8004a1e:	60fb      	str	r3, [r7, #12]
 8004a20:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004a28:	e00b      	b.n	8004a42 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	60bb      	str	r3, [r7, #8]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	695b      	ldr	r3, [r3, #20]
 8004a34:	60bb      	str	r3, [r7, #8]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	699b      	ldr	r3, [r3, #24]
 8004a3c:	60bb      	str	r3, [r7, #8]
 8004a3e:	68bb      	ldr	r3, [r7, #8]
}
 8004a40:	e7ff      	b.n	8004a42 <I2C_Master_ADDR+0x32c>
 8004a42:	bf00      	nop
 8004a44:	3744      	adds	r7, #68	; 0x44
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bc80      	pop	{r7}
 8004a4a:	4770      	bx	lr

08004a4c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a5a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d02b      	beq.n	8004abe <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6a:	781a      	ldrb	r2, [r3, #0]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a76:	1c5a      	adds	r2, r3, #1
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	3b01      	subs	r3, #1
 8004a84:	b29a      	uxth	r2, r3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d114      	bne.n	8004abe <I2C_SlaveTransmit_TXE+0x72>
 8004a94:	7bfb      	ldrb	r3, [r7, #15]
 8004a96:	2b29      	cmp	r3, #41	; 0x29
 8004a98:	d111      	bne.n	8004abe <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	685a      	ldr	r2, [r3, #4]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004aa8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2221      	movs	r2, #33	; 0x21
 8004aae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2228      	movs	r2, #40	; 0x28
 8004ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f7ff f9f1 	bl	8003ea0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004abe:	bf00      	nop
 8004ac0:	3710      	adds	r7, #16
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}

08004ac6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004ac6:	b480      	push	{r7}
 8004ac8:	b083      	sub	sp, #12
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d011      	beq.n	8004afc <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004adc:	781a      	ldrb	r2, [r3, #0]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae8:	1c5a      	adds	r2, r3, #1
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	3b01      	subs	r3, #1
 8004af6:	b29a      	uxth	r2, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004afc:	bf00      	nop
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bc80      	pop	{r7}
 8004b04:	4770      	bx	lr

08004b06 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004b06:	b580      	push	{r7, lr}
 8004b08:	b084      	sub	sp, #16
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b14:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d02c      	beq.n	8004b7a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	691a      	ldr	r2, [r3, #16]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2a:	b2d2      	uxtb	r2, r2
 8004b2c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b32:	1c5a      	adds	r2, r3, #1
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	3b01      	subs	r3, #1
 8004b40:	b29a      	uxth	r2, r3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d114      	bne.n	8004b7a <I2C_SlaveReceive_RXNE+0x74>
 8004b50:	7bfb      	ldrb	r3, [r7, #15]
 8004b52:	2b2a      	cmp	r3, #42	; 0x2a
 8004b54:	d111      	bne.n	8004b7a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	685a      	ldr	r2, [r3, #4]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b64:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2222      	movs	r2, #34	; 0x22
 8004b6a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2228      	movs	r2, #40	; 0x28
 8004b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f7ff f99c 	bl	8003eb2 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004b7a:	bf00      	nop
 8004b7c:	3710      	adds	r7, #16
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}

08004b82 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004b82:	b480      	push	{r7}
 8004b84:	b083      	sub	sp, #12
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d012      	beq.n	8004bba <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	691a      	ldr	r2, [r3, #16]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9e:	b2d2      	uxtb	r2, r2
 8004ba0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba6:	1c5a      	adds	r2, r3, #1
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	3b01      	subs	r3, #1
 8004bb4:	b29a      	uxth	r2, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004bba:	bf00      	nop
 8004bbc:	370c      	adds	r7, #12
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bc80      	pop	{r7}
 8004bc2:	4770      	bx	lr

08004bc4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b084      	sub	sp, #16
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004bde:	2b28      	cmp	r3, #40	; 0x28
 8004be0:	d127      	bne.n	8004c32 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	685a      	ldr	r2, [r3, #4]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bf0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	089b      	lsrs	r3, r3, #2
 8004bf6:	f003 0301 	and.w	r3, r3, #1
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d101      	bne.n	8004c02 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	09db      	lsrs	r3, r3, #7
 8004c06:	f003 0301 	and.w	r3, r3, #1
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d103      	bne.n	8004c16 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	81bb      	strh	r3, [r7, #12]
 8004c14:	e002      	b.n	8004c1c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	699b      	ldr	r3, [r3, #24]
 8004c1a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004c24:	89ba      	ldrh	r2, [r7, #12]
 8004c26:	7bfb      	ldrb	r3, [r7, #15]
 8004c28:	4619      	mov	r1, r3
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f7ff f94a 	bl	8003ec4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004c30:	e00e      	b.n	8004c50 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c32:	2300      	movs	r3, #0
 8004c34:	60bb      	str	r3, [r7, #8]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	695b      	ldr	r3, [r3, #20]
 8004c3c:	60bb      	str	r3, [r7, #8]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	699b      	ldr	r3, [r3, #24]
 8004c44:	60bb      	str	r3, [r7, #8]
 8004c46:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004c50:	bf00      	nop
 8004c52:	3710      	adds	r7, #16
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c66:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	685a      	ldr	r2, [r3, #4]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c76:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004c78:	2300      	movs	r3, #0
 8004c7a:	60bb      	str	r3, [r7, #8]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	695b      	ldr	r3, [r3, #20]
 8004c82:	60bb      	str	r3, [r7, #8]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f042 0201 	orr.w	r2, r2, #1
 8004c92:	601a      	str	r2, [r3, #0]
 8004c94:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ca4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cb4:	d172      	bne.n	8004d9c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004cb6:	7bfb      	ldrb	r3, [r7, #15]
 8004cb8:	2b22      	cmp	r3, #34	; 0x22
 8004cba:	d002      	beq.n	8004cc2 <I2C_Slave_STOPF+0x6a>
 8004cbc:	7bfb      	ldrb	r3, [r7, #15]
 8004cbe:	2b2a      	cmp	r3, #42	; 0x2a
 8004cc0:	d135      	bne.n	8004d2e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	b29a      	uxth	r2, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d005      	beq.n	8004ce6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cde:	f043 0204 	orr.w	r2, r3, #4
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	685a      	ldr	r2, [r3, #4]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cf4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f7fe f83c 	bl	8002d78 <HAL_DMA_GetState>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d049      	beq.n	8004d9a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d0a:	4a69      	ldr	r2, [pc, #420]	; (8004eb0 <I2C_Slave_STOPF+0x258>)
 8004d0c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d12:	4618      	mov	r0, r3
 8004d14:	f7fd ffba 	bl	8002c8c <HAL_DMA_Abort_IT>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d03d      	beq.n	8004d9a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d28:	4610      	mov	r0, r2
 8004d2a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004d2c:	e035      	b.n	8004d9a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	b29a      	uxth	r2, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d005      	beq.n	8004d52 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4a:	f043 0204 	orr.w	r2, r3, #4
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	685a      	ldr	r2, [r3, #4]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d60:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d66:	4618      	mov	r0, r3
 8004d68:	f7fe f806 	bl	8002d78 <HAL_DMA_GetState>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d014      	beq.n	8004d9c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d76:	4a4e      	ldr	r2, [pc, #312]	; (8004eb0 <I2C_Slave_STOPF+0x258>)
 8004d78:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f7fd ff84 	bl	8002c8c <HAL_DMA_Abort_IT>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d008      	beq.n	8004d9c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004d94:	4610      	mov	r0, r2
 8004d96:	4798      	blx	r3
 8004d98:	e000      	b.n	8004d9c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004d9a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d03e      	beq.n	8004e24 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	695b      	ldr	r3, [r3, #20]
 8004dac:	f003 0304 	and.w	r3, r3, #4
 8004db0:	2b04      	cmp	r3, #4
 8004db2:	d112      	bne.n	8004dda <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	691a      	ldr	r2, [r3, #16]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbe:	b2d2      	uxtb	r2, r2
 8004dc0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc6:	1c5a      	adds	r2, r3, #1
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	b29a      	uxth	r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	695b      	ldr	r3, [r3, #20]
 8004de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004de4:	2b40      	cmp	r3, #64	; 0x40
 8004de6:	d112      	bne.n	8004e0e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	691a      	ldr	r2, [r3, #16]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df2:	b2d2      	uxtb	r2, r2
 8004df4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfa:	1c5a      	adds	r2, r3, #1
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	3b01      	subs	r3, #1
 8004e08:	b29a      	uxth	r2, r3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d005      	beq.n	8004e24 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1c:	f043 0204 	orr.w	r2, r3, #4
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d003      	beq.n	8004e34 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f000 f8b3 	bl	8004f98 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004e32:	e039      	b.n	8004ea8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004e34:	7bfb      	ldrb	r3, [r7, #15]
 8004e36:	2b2a      	cmp	r3, #42	; 0x2a
 8004e38:	d109      	bne.n	8004e4e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2228      	movs	r2, #40	; 0x28
 8004e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f7ff f832 	bl	8003eb2 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	2b28      	cmp	r3, #40	; 0x28
 8004e58:	d111      	bne.n	8004e7e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a15      	ldr	r2, [pc, #84]	; (8004eb4 <I2C_Slave_STOPF+0x25c>)
 8004e5e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2220      	movs	r2, #32
 8004e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f7ff f831 	bl	8003ede <HAL_I2C_ListenCpltCallback>
}
 8004e7c:	e014      	b.n	8004ea8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e82:	2b22      	cmp	r3, #34	; 0x22
 8004e84:	d002      	beq.n	8004e8c <I2C_Slave_STOPF+0x234>
 8004e86:	7bfb      	ldrb	r3, [r7, #15]
 8004e88:	2b22      	cmp	r3, #34	; 0x22
 8004e8a:	d10d      	bne.n	8004ea8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2220      	movs	r2, #32
 8004e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f7ff f805 	bl	8003eb2 <HAL_I2C_SlaveRxCpltCallback>
}
 8004ea8:	bf00      	nop
 8004eaa:	3710      	adds	r7, #16
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	0800549d 	.word	0x0800549d
 8004eb4:	ffff0000 	.word	0xffff0000

08004eb8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b084      	sub	sp, #16
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ec6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ecc:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	2b08      	cmp	r3, #8
 8004ed2:	d002      	beq.n	8004eda <I2C_Slave_AF+0x22>
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	2b20      	cmp	r3, #32
 8004ed8:	d129      	bne.n	8004f2e <I2C_Slave_AF+0x76>
 8004eda:	7bfb      	ldrb	r3, [r7, #15]
 8004edc:	2b28      	cmp	r3, #40	; 0x28
 8004ede:	d126      	bne.n	8004f2e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4a2c      	ldr	r2, [pc, #176]	; (8004f94 <I2C_Slave_AF+0xdc>)
 8004ee4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	685a      	ldr	r2, [r3, #4]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ef4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004efe:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f0e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2200      	movs	r2, #0
 8004f14:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2220      	movs	r2, #32
 8004f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f7fe ffd9 	bl	8003ede <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004f2c:	e02e      	b.n	8004f8c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004f2e:	7bfb      	ldrb	r3, [r7, #15]
 8004f30:	2b21      	cmp	r3, #33	; 0x21
 8004f32:	d126      	bne.n	8004f82 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4a17      	ldr	r2, [pc, #92]	; (8004f94 <I2C_Slave_AF+0xdc>)
 8004f38:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2221      	movs	r2, #33	; 0x21
 8004f3e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2220      	movs	r2, #32
 8004f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	685a      	ldr	r2, [r3, #4]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f5e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f68:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f78:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f7fe ff90 	bl	8003ea0 <HAL_I2C_SlaveTxCpltCallback>
}
 8004f80:	e004      	b.n	8004f8c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f8a:	615a      	str	r2, [r3, #20]
}
 8004f8c:	bf00      	nop
 8004f8e:	3710      	adds	r7, #16
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	ffff0000 	.word	0xffff0000

08004f98 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fa6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fae:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004fb0:	7bbb      	ldrb	r3, [r7, #14]
 8004fb2:	2b10      	cmp	r3, #16
 8004fb4:	d002      	beq.n	8004fbc <I2C_ITError+0x24>
 8004fb6:	7bbb      	ldrb	r3, [r7, #14]
 8004fb8:	2b40      	cmp	r3, #64	; 0x40
 8004fba:	d10a      	bne.n	8004fd2 <I2C_ITError+0x3a>
 8004fbc:	7bfb      	ldrb	r3, [r7, #15]
 8004fbe:	2b22      	cmp	r3, #34	; 0x22
 8004fc0:	d107      	bne.n	8004fd2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fd0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004fd2:	7bfb      	ldrb	r3, [r7, #15]
 8004fd4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004fd8:	2b28      	cmp	r3, #40	; 0x28
 8004fda:	d107      	bne.n	8004fec <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2228      	movs	r2, #40	; 0x28
 8004fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004fea:	e015      	b.n	8005018 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ff6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ffa:	d00a      	beq.n	8005012 <I2C_ITError+0x7a>
 8004ffc:	7bfb      	ldrb	r3, [r7, #15]
 8004ffe:	2b60      	cmp	r3, #96	; 0x60
 8005000:	d007      	beq.n	8005012 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2220      	movs	r2, #32
 8005006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005022:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005026:	d161      	bne.n	80050ec <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	685a      	ldr	r2, [r3, #4]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005036:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800503c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005040:	2b01      	cmp	r3, #1
 8005042:	d020      	beq.n	8005086 <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005048:	4a6a      	ldr	r2, [pc, #424]	; (80051f4 <I2C_ITError+0x25c>)
 800504a:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005050:	4618      	mov	r0, r3
 8005052:	f7fd fe1b 	bl	8002c8c <HAL_DMA_Abort_IT>
 8005056:	4603      	mov	r3, r0
 8005058:	2b00      	cmp	r3, #0
 800505a:	f000 8089 	beq.w	8005170 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f022 0201 	bic.w	r2, r2, #1
 800506c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2220      	movs	r2, #32
 8005072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800507a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005080:	4610      	mov	r0, r2
 8005082:	4798      	blx	r3
 8005084:	e074      	b.n	8005170 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800508a:	4a5a      	ldr	r2, [pc, #360]	; (80051f4 <I2C_ITError+0x25c>)
 800508c:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005092:	4618      	mov	r0, r3
 8005094:	f7fd fdfa 	bl	8002c8c <HAL_DMA_Abort_IT>
 8005098:	4603      	mov	r3, r0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d068      	beq.n	8005170 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	695b      	ldr	r3, [r3, #20]
 80050a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050a8:	2b40      	cmp	r3, #64	; 0x40
 80050aa:	d10b      	bne.n	80050c4 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	691a      	ldr	r2, [r3, #16]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b6:	b2d2      	uxtb	r2, r2
 80050b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050be:	1c5a      	adds	r2, r3, #1
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f022 0201 	bic.w	r2, r2, #1
 80050d2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2220      	movs	r2, #32
 80050d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80050e6:	4610      	mov	r0, r2
 80050e8:	4798      	blx	r3
 80050ea:	e041      	b.n	8005170 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	2b60      	cmp	r3, #96	; 0x60
 80050f6:	d125      	bne.n	8005144 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2220      	movs	r2, #32
 80050fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	695b      	ldr	r3, [r3, #20]
 800510c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005110:	2b40      	cmp	r3, #64	; 0x40
 8005112:	d10b      	bne.n	800512c <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	691a      	ldr	r2, [r3, #16]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511e:	b2d2      	uxtb	r2, r2
 8005120:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005126:	1c5a      	adds	r2, r3, #1
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f022 0201 	bic.w	r2, r2, #1
 800513a:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f7fe fef2 	bl	8003f26 <HAL_I2C_AbortCpltCallback>
 8005142:	e015      	b.n	8005170 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800514e:	2b40      	cmp	r3, #64	; 0x40
 8005150:	d10b      	bne.n	800516a <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	691a      	ldr	r2, [r3, #16]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515c:	b2d2      	uxtb	r2, r2
 800515e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005164:	1c5a      	adds	r2, r3, #1
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f7fe fed2 	bl	8003f14 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005174:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	f003 0301 	and.w	r3, r3, #1
 800517c:	2b00      	cmp	r3, #0
 800517e:	d10e      	bne.n	800519e <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005186:	2b00      	cmp	r3, #0
 8005188:	d109      	bne.n	800519e <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005190:	2b00      	cmp	r3, #0
 8005192:	d104      	bne.n	800519e <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800519a:	2b00      	cmp	r3, #0
 800519c:	d007      	beq.n	80051ae <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	685a      	ldr	r2, [r3, #4]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80051ac:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051b4:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ba:	f003 0304 	and.w	r3, r3, #4
 80051be:	2b04      	cmp	r3, #4
 80051c0:	d113      	bne.n	80051ea <I2C_ITError+0x252>
 80051c2:	7bfb      	ldrb	r3, [r7, #15]
 80051c4:	2b28      	cmp	r3, #40	; 0x28
 80051c6:	d110      	bne.n	80051ea <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4a0b      	ldr	r2, [pc, #44]	; (80051f8 <I2C_ITError+0x260>)
 80051cc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2220      	movs	r2, #32
 80051d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f7fe fe7a 	bl	8003ede <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80051ea:	bf00      	nop
 80051ec:	3710      	adds	r7, #16
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
 80051f2:	bf00      	nop
 80051f4:	0800549d 	.word	0x0800549d
 80051f8:	ffff0000 	.word	0xffff0000

080051fc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b088      	sub	sp, #32
 8005200:	af02      	add	r7, sp, #8
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	607a      	str	r2, [r7, #4]
 8005206:	603b      	str	r3, [r7, #0]
 8005208:	460b      	mov	r3, r1
 800520a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005210:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	2b08      	cmp	r3, #8
 8005216:	d006      	beq.n	8005226 <I2C_MasterRequestWrite+0x2a>
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	2b01      	cmp	r3, #1
 800521c:	d003      	beq.n	8005226 <I2C_MasterRequestWrite+0x2a>
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005224:	d108      	bne.n	8005238 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005234:	601a      	str	r2, [r3, #0]
 8005236:	e00b      	b.n	8005250 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800523c:	2b12      	cmp	r3, #18
 800523e:	d107      	bne.n	8005250 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800524e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	9300      	str	r3, [sp, #0]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800525c:	68f8      	ldr	r0, [r7, #12]
 800525e:	f000 f9c5 	bl	80055ec <I2C_WaitOnFlagUntilTimeout>
 8005262:	4603      	mov	r3, r0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d00d      	beq.n	8005284 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005272:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005276:	d103      	bne.n	8005280 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800527e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005280:	2303      	movs	r3, #3
 8005282:	e035      	b.n	80052f0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	691b      	ldr	r3, [r3, #16]
 8005288:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800528c:	d108      	bne.n	80052a0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800528e:	897b      	ldrh	r3, [r7, #10]
 8005290:	b2db      	uxtb	r3, r3
 8005292:	461a      	mov	r2, r3
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800529c:	611a      	str	r2, [r3, #16]
 800529e:	e01b      	b.n	80052d8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80052a0:	897b      	ldrh	r3, [r7, #10]
 80052a2:	11db      	asrs	r3, r3, #7
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	f003 0306 	and.w	r3, r3, #6
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	f063 030f 	orn	r3, r3, #15
 80052b0:	b2da      	uxtb	r2, r3
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	490e      	ldr	r1, [pc, #56]	; (80052f8 <I2C_MasterRequestWrite+0xfc>)
 80052be:	68f8      	ldr	r0, [r7, #12]
 80052c0:	f000 f9eb 	bl	800569a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d001      	beq.n	80052ce <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e010      	b.n	80052f0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80052ce:	897b      	ldrh	r3, [r7, #10]
 80052d0:	b2da      	uxtb	r2, r3
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	4907      	ldr	r1, [pc, #28]	; (80052fc <I2C_MasterRequestWrite+0x100>)
 80052de:	68f8      	ldr	r0, [r7, #12]
 80052e0:	f000 f9db 	bl	800569a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052e4:	4603      	mov	r3, r0
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d001      	beq.n	80052ee <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e000      	b.n	80052f0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80052ee:	2300      	movs	r3, #0
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3718      	adds	r7, #24
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	00010008 	.word	0x00010008
 80052fc:	00010002 	.word	0x00010002

08005300 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b088      	sub	sp, #32
 8005304:	af02      	add	r7, sp, #8
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	607a      	str	r2, [r7, #4]
 800530a:	603b      	str	r3, [r7, #0]
 800530c:	460b      	mov	r3, r1
 800530e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005314:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005324:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	2b08      	cmp	r3, #8
 800532a:	d006      	beq.n	800533a <I2C_MasterRequestRead+0x3a>
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	2b01      	cmp	r3, #1
 8005330:	d003      	beq.n	800533a <I2C_MasterRequestRead+0x3a>
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005338:	d108      	bne.n	800534c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005348:	601a      	str	r2, [r3, #0]
 800534a:	e00b      	b.n	8005364 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005350:	2b11      	cmp	r3, #17
 8005352:	d107      	bne.n	8005364 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005362:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	9300      	str	r3, [sp, #0]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005370:	68f8      	ldr	r0, [r7, #12]
 8005372:	f000 f93b 	bl	80055ec <I2C_WaitOnFlagUntilTimeout>
 8005376:	4603      	mov	r3, r0
 8005378:	2b00      	cmp	r3, #0
 800537a:	d00d      	beq.n	8005398 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005386:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800538a:	d103      	bne.n	8005394 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005392:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005394:	2303      	movs	r3, #3
 8005396:	e079      	b.n	800548c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	691b      	ldr	r3, [r3, #16]
 800539c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053a0:	d108      	bne.n	80053b4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80053a2:	897b      	ldrh	r3, [r7, #10]
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	f043 0301 	orr.w	r3, r3, #1
 80053aa:	b2da      	uxtb	r2, r3
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	611a      	str	r2, [r3, #16]
 80053b2:	e05f      	b.n	8005474 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80053b4:	897b      	ldrh	r3, [r7, #10]
 80053b6:	11db      	asrs	r3, r3, #7
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	f003 0306 	and.w	r3, r3, #6
 80053be:	b2db      	uxtb	r3, r3
 80053c0:	f063 030f 	orn	r3, r3, #15
 80053c4:	b2da      	uxtb	r2, r3
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	4930      	ldr	r1, [pc, #192]	; (8005494 <I2C_MasterRequestRead+0x194>)
 80053d2:	68f8      	ldr	r0, [r7, #12]
 80053d4:	f000 f961 	bl	800569a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d001      	beq.n	80053e2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	e054      	b.n	800548c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80053e2:	897b      	ldrh	r3, [r7, #10]
 80053e4:	b2da      	uxtb	r2, r3
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	4929      	ldr	r1, [pc, #164]	; (8005498 <I2C_MasterRequestRead+0x198>)
 80053f2:	68f8      	ldr	r0, [r7, #12]
 80053f4:	f000 f951 	bl	800569a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d001      	beq.n	8005402 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	e044      	b.n	800548c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005402:	2300      	movs	r3, #0
 8005404:	613b      	str	r3, [r7, #16]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	695b      	ldr	r3, [r3, #20]
 800540c:	613b      	str	r3, [r7, #16]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	699b      	ldr	r3, [r3, #24]
 8005414:	613b      	str	r3, [r7, #16]
 8005416:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005426:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	9300      	str	r3, [sp, #0]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005434:	68f8      	ldr	r0, [r7, #12]
 8005436:	f000 f8d9 	bl	80055ec <I2C_WaitOnFlagUntilTimeout>
 800543a:	4603      	mov	r3, r0
 800543c:	2b00      	cmp	r3, #0
 800543e:	d00d      	beq.n	800545c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800544a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800544e:	d103      	bne.n	8005458 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005456:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005458:	2303      	movs	r3, #3
 800545a:	e017      	b.n	800548c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800545c:	897b      	ldrh	r3, [r7, #10]
 800545e:	11db      	asrs	r3, r3, #7
 8005460:	b2db      	uxtb	r3, r3
 8005462:	f003 0306 	and.w	r3, r3, #6
 8005466:	b2db      	uxtb	r3, r3
 8005468:	f063 030e 	orn	r3, r3, #14
 800546c:	b2da      	uxtb	r2, r3
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	4907      	ldr	r1, [pc, #28]	; (8005498 <I2C_MasterRequestRead+0x198>)
 800547a:	68f8      	ldr	r0, [r7, #12]
 800547c:	f000 f90d 	bl	800569a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005480:	4603      	mov	r3, r0
 8005482:	2b00      	cmp	r3, #0
 8005484:	d001      	beq.n	800548a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e000      	b.n	800548c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800548a:	2300      	movs	r3, #0
}
 800548c:	4618      	mov	r0, r3
 800548e:	3718      	adds	r7, #24
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}
 8005494:	00010008 	.word	0x00010008
 8005498:	00010002 	.word	0x00010002

0800549c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b086      	sub	sp, #24
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80054a4:	2300      	movs	r3, #0
 80054a6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ac:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054b4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80054b6:	4b4b      	ldr	r3, [pc, #300]	; (80055e4 <I2C_DMAAbort+0x148>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	08db      	lsrs	r3, r3, #3
 80054bc:	4a4a      	ldr	r2, [pc, #296]	; (80055e8 <I2C_DMAAbort+0x14c>)
 80054be:	fba2 2303 	umull	r2, r3, r2, r3
 80054c2:	0a1a      	lsrs	r2, r3, #8
 80054c4:	4613      	mov	r3, r2
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	4413      	add	r3, r2
 80054ca:	00da      	lsls	r2, r3, #3
 80054cc:	1ad3      	subs	r3, r2, r3
 80054ce:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d106      	bne.n	80054e4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054da:	f043 0220 	orr.w	r2, r3, #32
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80054e2:	e00a      	b.n	80054fa <I2C_DMAAbort+0x5e>
    }
    count--;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	3b01      	subs	r3, #1
 80054e8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054f8:	d0ea      	beq.n	80054d0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d003      	beq.n	800550a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005506:	2200      	movs	r2, #0
 8005508:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800550e:	2b00      	cmp	r3, #0
 8005510:	d003      	beq.n	800551a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005516:	2200      	movs	r2, #0
 8005518:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005528:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	2200      	movs	r2, #0
 800552e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005534:	2b00      	cmp	r3, #0
 8005536:	d003      	beq.n	8005540 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800553c:	2200      	movs	r2, #0
 800553e:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005544:	2b00      	cmp	r3, #0
 8005546:	d003      	beq.n	8005550 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800554c:	2200      	movs	r2, #0
 800554e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f022 0201 	bic.w	r2, r2, #1
 800555e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005566:	b2db      	uxtb	r3, r3
 8005568:	2b60      	cmp	r3, #96	; 0x60
 800556a:	d10e      	bne.n	800558a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	2220      	movs	r2, #32
 8005570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	2200      	movs	r2, #0
 8005578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	2200      	movs	r2, #0
 8005580:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005582:	6978      	ldr	r0, [r7, #20]
 8005584:	f7fe fccf 	bl	8003f26 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005588:	e027      	b.n	80055da <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800558a:	7cfb      	ldrb	r3, [r7, #19]
 800558c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005590:	2b28      	cmp	r3, #40	; 0x28
 8005592:	d117      	bne.n	80055c4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f042 0201 	orr.w	r2, r2, #1
 80055a2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80055b2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	2200      	movs	r2, #0
 80055b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	2228      	movs	r2, #40	; 0x28
 80055be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80055c2:	e007      	b.n	80055d4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	2220      	movs	r2, #32
 80055c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80055d4:	6978      	ldr	r0, [r7, #20]
 80055d6:	f7fe fc9d 	bl	8003f14 <HAL_I2C_ErrorCallback>
}
 80055da:	bf00      	nop
 80055dc:	3718      	adds	r7, #24
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	2000004c 	.word	0x2000004c
 80055e8:	14f8b589 	.word	0x14f8b589

080055ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b084      	sub	sp, #16
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	60b9      	str	r1, [r7, #8]
 80055f6:	603b      	str	r3, [r7, #0]
 80055f8:	4613      	mov	r3, r2
 80055fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055fc:	e025      	b.n	800564a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005604:	d021      	beq.n	800564a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005606:	f7fd fa05 	bl	8002a14 <HAL_GetTick>
 800560a:	4602      	mov	r2, r0
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	1ad3      	subs	r3, r2, r3
 8005610:	683a      	ldr	r2, [r7, #0]
 8005612:	429a      	cmp	r2, r3
 8005614:	d302      	bcc.n	800561c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d116      	bne.n	800564a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2200      	movs	r2, #0
 8005620:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2220      	movs	r2, #32
 8005626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2200      	movs	r2, #0
 800562e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005636:	f043 0220 	orr.w	r2, r3, #32
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2200      	movs	r2, #0
 8005642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e023      	b.n	8005692 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	0c1b      	lsrs	r3, r3, #16
 800564e:	b2db      	uxtb	r3, r3
 8005650:	2b01      	cmp	r3, #1
 8005652:	d10d      	bne.n	8005670 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	695b      	ldr	r3, [r3, #20]
 800565a:	43da      	mvns	r2, r3
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	4013      	ands	r3, r2
 8005660:	b29b      	uxth	r3, r3
 8005662:	2b00      	cmp	r3, #0
 8005664:	bf0c      	ite	eq
 8005666:	2301      	moveq	r3, #1
 8005668:	2300      	movne	r3, #0
 800566a:	b2db      	uxtb	r3, r3
 800566c:	461a      	mov	r2, r3
 800566e:	e00c      	b.n	800568a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	699b      	ldr	r3, [r3, #24]
 8005676:	43da      	mvns	r2, r3
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	4013      	ands	r3, r2
 800567c:	b29b      	uxth	r3, r3
 800567e:	2b00      	cmp	r3, #0
 8005680:	bf0c      	ite	eq
 8005682:	2301      	moveq	r3, #1
 8005684:	2300      	movne	r3, #0
 8005686:	b2db      	uxtb	r3, r3
 8005688:	461a      	mov	r2, r3
 800568a:	79fb      	ldrb	r3, [r7, #7]
 800568c:	429a      	cmp	r2, r3
 800568e:	d0b6      	beq.n	80055fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005690:	2300      	movs	r3, #0
}
 8005692:	4618      	mov	r0, r3
 8005694:	3710      	adds	r7, #16
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}

0800569a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800569a:	b580      	push	{r7, lr}
 800569c:	b084      	sub	sp, #16
 800569e:	af00      	add	r7, sp, #0
 80056a0:	60f8      	str	r0, [r7, #12]
 80056a2:	60b9      	str	r1, [r7, #8]
 80056a4:	607a      	str	r2, [r7, #4]
 80056a6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80056a8:	e051      	b.n	800574e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	695b      	ldr	r3, [r3, #20]
 80056b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056b8:	d123      	bne.n	8005702 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056c8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80056d2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2200      	movs	r2, #0
 80056d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2220      	movs	r2, #32
 80056de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2200      	movs	r2, #0
 80056e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ee:	f043 0204 	orr.w	r2, r3, #4
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2200      	movs	r2, #0
 80056fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e046      	b.n	8005790 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005708:	d021      	beq.n	800574e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800570a:	f7fd f983 	bl	8002a14 <HAL_GetTick>
 800570e:	4602      	mov	r2, r0
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	1ad3      	subs	r3, r2, r3
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	429a      	cmp	r2, r3
 8005718:	d302      	bcc.n	8005720 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d116      	bne.n	800574e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2200      	movs	r2, #0
 8005724:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2220      	movs	r2, #32
 800572a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2200      	movs	r2, #0
 8005732:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800573a:	f043 0220 	orr.w	r2, r3, #32
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2200      	movs	r2, #0
 8005746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	e020      	b.n	8005790 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	0c1b      	lsrs	r3, r3, #16
 8005752:	b2db      	uxtb	r3, r3
 8005754:	2b01      	cmp	r3, #1
 8005756:	d10c      	bne.n	8005772 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	695b      	ldr	r3, [r3, #20]
 800575e:	43da      	mvns	r2, r3
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	4013      	ands	r3, r2
 8005764:	b29b      	uxth	r3, r3
 8005766:	2b00      	cmp	r3, #0
 8005768:	bf14      	ite	ne
 800576a:	2301      	movne	r3, #1
 800576c:	2300      	moveq	r3, #0
 800576e:	b2db      	uxtb	r3, r3
 8005770:	e00b      	b.n	800578a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	699b      	ldr	r3, [r3, #24]
 8005778:	43da      	mvns	r2, r3
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	4013      	ands	r3, r2
 800577e:	b29b      	uxth	r3, r3
 8005780:	2b00      	cmp	r3, #0
 8005782:	bf14      	ite	ne
 8005784:	2301      	movne	r3, #1
 8005786:	2300      	moveq	r3, #0
 8005788:	b2db      	uxtb	r3, r3
 800578a:	2b00      	cmp	r3, #0
 800578c:	d18d      	bne.n	80056aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800578e:	2300      	movs	r3, #0
}
 8005790:	4618      	mov	r0, r3
 8005792:	3710      	adds	r7, #16
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}

08005798 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b084      	sub	sp, #16
 800579c:	af00      	add	r7, sp, #0
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	60b9      	str	r1, [r7, #8]
 80057a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80057a4:	e02d      	b.n	8005802 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80057a6:	68f8      	ldr	r0, [r7, #12]
 80057a8:	f000 f900 	bl	80059ac <I2C_IsAcknowledgeFailed>
 80057ac:	4603      	mov	r3, r0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d001      	beq.n	80057b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e02d      	b.n	8005812 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057bc:	d021      	beq.n	8005802 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057be:	f7fd f929 	bl	8002a14 <HAL_GetTick>
 80057c2:	4602      	mov	r2, r0
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	1ad3      	subs	r3, r2, r3
 80057c8:	68ba      	ldr	r2, [r7, #8]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d302      	bcc.n	80057d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d116      	bne.n	8005802 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2200      	movs	r2, #0
 80057d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2220      	movs	r2, #32
 80057de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2200      	movs	r2, #0
 80057e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ee:	f043 0220 	orr.w	r2, r3, #32
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e007      	b.n	8005812 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	695b      	ldr	r3, [r3, #20]
 8005808:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800580c:	2b80      	cmp	r3, #128	; 0x80
 800580e:	d1ca      	bne.n	80057a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	3710      	adds	r7, #16
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}

0800581a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800581a:	b580      	push	{r7, lr}
 800581c:	b084      	sub	sp, #16
 800581e:	af00      	add	r7, sp, #0
 8005820:	60f8      	str	r0, [r7, #12]
 8005822:	60b9      	str	r1, [r7, #8]
 8005824:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005826:	e02d      	b.n	8005884 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005828:	68f8      	ldr	r0, [r7, #12]
 800582a:	f000 f8bf 	bl	80059ac <I2C_IsAcknowledgeFailed>
 800582e:	4603      	mov	r3, r0
 8005830:	2b00      	cmp	r3, #0
 8005832:	d001      	beq.n	8005838 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	e02d      	b.n	8005894 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800583e:	d021      	beq.n	8005884 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005840:	f7fd f8e8 	bl	8002a14 <HAL_GetTick>
 8005844:	4602      	mov	r2, r0
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	68ba      	ldr	r2, [r7, #8]
 800584c:	429a      	cmp	r2, r3
 800584e:	d302      	bcc.n	8005856 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d116      	bne.n	8005884 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2200      	movs	r2, #0
 800585a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2220      	movs	r2, #32
 8005860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2200      	movs	r2, #0
 8005868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005870:	f043 0220 	orr.w	r2, r3, #32
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2200      	movs	r2, #0
 800587c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	e007      	b.n	8005894 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	695b      	ldr	r3, [r3, #20]
 800588a:	f003 0304 	and.w	r3, r3, #4
 800588e:	2b04      	cmp	r3, #4
 8005890:	d1ca      	bne.n	8005828 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005892:	2300      	movs	r3, #0
}
 8005894:	4618      	mov	r0, r3
 8005896:	3710      	adds	r7, #16
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800589c:	b480      	push	{r7}
 800589e:	b085      	sub	sp, #20
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80058a4:	2300      	movs	r3, #0
 80058a6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80058a8:	4b13      	ldr	r3, [pc, #76]	; (80058f8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	08db      	lsrs	r3, r3, #3
 80058ae:	4a13      	ldr	r2, [pc, #76]	; (80058fc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80058b0:	fba2 2303 	umull	r2, r3, r2, r3
 80058b4:	0a1a      	lsrs	r2, r3, #8
 80058b6:	4613      	mov	r3, r2
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	4413      	add	r3, r2
 80058bc:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	3b01      	subs	r3, #1
 80058c2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d107      	bne.n	80058da <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ce:	f043 0220 	orr.w	r2, r3, #32
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e008      	b.n	80058ec <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058e8:	d0e9      	beq.n	80058be <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80058ea:	2300      	movs	r3, #0
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3714      	adds	r7, #20
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bc80      	pop	{r7}
 80058f4:	4770      	bx	lr
 80058f6:	bf00      	nop
 80058f8:	2000004c 	.word	0x2000004c
 80058fc:	14f8b589 	.word	0x14f8b589

08005900 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b084      	sub	sp, #16
 8005904:	af00      	add	r7, sp, #0
 8005906:	60f8      	str	r0, [r7, #12]
 8005908:	60b9      	str	r1, [r7, #8]
 800590a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800590c:	e042      	b.n	8005994 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	695b      	ldr	r3, [r3, #20]
 8005914:	f003 0310 	and.w	r3, r3, #16
 8005918:	2b10      	cmp	r3, #16
 800591a:	d119      	bne.n	8005950 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f06f 0210 	mvn.w	r2, #16
 8005924:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2200      	movs	r2, #0
 800592a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2220      	movs	r2, #32
 8005930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2200      	movs	r2, #0
 8005938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2200      	movs	r2, #0
 8005948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	e029      	b.n	80059a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005950:	f7fd f860 	bl	8002a14 <HAL_GetTick>
 8005954:	4602      	mov	r2, r0
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	1ad3      	subs	r3, r2, r3
 800595a:	68ba      	ldr	r2, [r7, #8]
 800595c:	429a      	cmp	r2, r3
 800595e:	d302      	bcc.n	8005966 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d116      	bne.n	8005994 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2200      	movs	r2, #0
 800596a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2220      	movs	r2, #32
 8005970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2200      	movs	r2, #0
 8005978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005980:	f043 0220 	orr.w	r2, r3, #32
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2200      	movs	r2, #0
 800598c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	e007      	b.n	80059a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	695b      	ldr	r3, [r3, #20]
 800599a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800599e:	2b40      	cmp	r3, #64	; 0x40
 80059a0:	d1b5      	bne.n	800590e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80059a2:	2300      	movs	r3, #0
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3710      	adds	r7, #16
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}

080059ac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	695b      	ldr	r3, [r3, #20]
 80059ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059c2:	d11b      	bne.n	80059fc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80059cc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2200      	movs	r2, #0
 80059d2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2220      	movs	r2, #32
 80059d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e8:	f043 0204 	orr.w	r2, r3, #4
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	e000      	b.n	80059fe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80059fc:	2300      	movs	r3, #0
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	370c      	adds	r7, #12
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bc80      	pop	{r7}
 8005a06:	4770      	bx	lr

08005a08 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b083      	sub	sp, #12
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a14:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005a18:	d103      	bne.n	8005a22 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005a20:	e007      	b.n	8005a32 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a26:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005a2a:	d102      	bne.n	8005a32 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2208      	movs	r2, #8
 8005a30:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005a32:	bf00      	nop
 8005a34:	370c      	adds	r7, #12
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bc80      	pop	{r7}
 8005a3a:	4770      	bx	lr

08005a3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b086      	sub	sp, #24
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d101      	bne.n	8005a4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e272      	b.n	8005f34 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 0301 	and.w	r3, r3, #1
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	f000 8087 	beq.w	8005b6a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005a5c:	4b92      	ldr	r3, [pc, #584]	; (8005ca8 <HAL_RCC_OscConfig+0x26c>)
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	f003 030c 	and.w	r3, r3, #12
 8005a64:	2b04      	cmp	r3, #4
 8005a66:	d00c      	beq.n	8005a82 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005a68:	4b8f      	ldr	r3, [pc, #572]	; (8005ca8 <HAL_RCC_OscConfig+0x26c>)
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	f003 030c 	and.w	r3, r3, #12
 8005a70:	2b08      	cmp	r3, #8
 8005a72:	d112      	bne.n	8005a9a <HAL_RCC_OscConfig+0x5e>
 8005a74:	4b8c      	ldr	r3, [pc, #560]	; (8005ca8 <HAL_RCC_OscConfig+0x26c>)
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a80:	d10b      	bne.n	8005a9a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a82:	4b89      	ldr	r3, [pc, #548]	; (8005ca8 <HAL_RCC_OscConfig+0x26c>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d06c      	beq.n	8005b68 <HAL_RCC_OscConfig+0x12c>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d168      	bne.n	8005b68 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	e24c      	b.n	8005f34 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005aa2:	d106      	bne.n	8005ab2 <HAL_RCC_OscConfig+0x76>
 8005aa4:	4b80      	ldr	r3, [pc, #512]	; (8005ca8 <HAL_RCC_OscConfig+0x26c>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a7f      	ldr	r2, [pc, #508]	; (8005ca8 <HAL_RCC_OscConfig+0x26c>)
 8005aaa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005aae:	6013      	str	r3, [r2, #0]
 8005ab0:	e02e      	b.n	8005b10 <HAL_RCC_OscConfig+0xd4>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d10c      	bne.n	8005ad4 <HAL_RCC_OscConfig+0x98>
 8005aba:	4b7b      	ldr	r3, [pc, #492]	; (8005ca8 <HAL_RCC_OscConfig+0x26c>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a7a      	ldr	r2, [pc, #488]	; (8005ca8 <HAL_RCC_OscConfig+0x26c>)
 8005ac0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ac4:	6013      	str	r3, [r2, #0]
 8005ac6:	4b78      	ldr	r3, [pc, #480]	; (8005ca8 <HAL_RCC_OscConfig+0x26c>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a77      	ldr	r2, [pc, #476]	; (8005ca8 <HAL_RCC_OscConfig+0x26c>)
 8005acc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ad0:	6013      	str	r3, [r2, #0]
 8005ad2:	e01d      	b.n	8005b10 <HAL_RCC_OscConfig+0xd4>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005adc:	d10c      	bne.n	8005af8 <HAL_RCC_OscConfig+0xbc>
 8005ade:	4b72      	ldr	r3, [pc, #456]	; (8005ca8 <HAL_RCC_OscConfig+0x26c>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a71      	ldr	r2, [pc, #452]	; (8005ca8 <HAL_RCC_OscConfig+0x26c>)
 8005ae4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ae8:	6013      	str	r3, [r2, #0]
 8005aea:	4b6f      	ldr	r3, [pc, #444]	; (8005ca8 <HAL_RCC_OscConfig+0x26c>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a6e      	ldr	r2, [pc, #440]	; (8005ca8 <HAL_RCC_OscConfig+0x26c>)
 8005af0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005af4:	6013      	str	r3, [r2, #0]
 8005af6:	e00b      	b.n	8005b10 <HAL_RCC_OscConfig+0xd4>
 8005af8:	4b6b      	ldr	r3, [pc, #428]	; (8005ca8 <HAL_RCC_OscConfig+0x26c>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a6a      	ldr	r2, [pc, #424]	; (8005ca8 <HAL_RCC_OscConfig+0x26c>)
 8005afe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b02:	6013      	str	r3, [r2, #0]
 8005b04:	4b68      	ldr	r3, [pc, #416]	; (8005ca8 <HAL_RCC_OscConfig+0x26c>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a67      	ldr	r2, [pc, #412]	; (8005ca8 <HAL_RCC_OscConfig+0x26c>)
 8005b0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b0e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d013      	beq.n	8005b40 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b18:	f7fc ff7c 	bl	8002a14 <HAL_GetTick>
 8005b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b1e:	e008      	b.n	8005b32 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b20:	f7fc ff78 	bl	8002a14 <HAL_GetTick>
 8005b24:	4602      	mov	r2, r0
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	1ad3      	subs	r3, r2, r3
 8005b2a:	2b64      	cmp	r3, #100	; 0x64
 8005b2c:	d901      	bls.n	8005b32 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005b2e:	2303      	movs	r3, #3
 8005b30:	e200      	b.n	8005f34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b32:	4b5d      	ldr	r3, [pc, #372]	; (8005ca8 <HAL_RCC_OscConfig+0x26c>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d0f0      	beq.n	8005b20 <HAL_RCC_OscConfig+0xe4>
 8005b3e:	e014      	b.n	8005b6a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b40:	f7fc ff68 	bl	8002a14 <HAL_GetTick>
 8005b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b46:	e008      	b.n	8005b5a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b48:	f7fc ff64 	bl	8002a14 <HAL_GetTick>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	1ad3      	subs	r3, r2, r3
 8005b52:	2b64      	cmp	r3, #100	; 0x64
 8005b54:	d901      	bls.n	8005b5a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005b56:	2303      	movs	r3, #3
 8005b58:	e1ec      	b.n	8005f34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b5a:	4b53      	ldr	r3, [pc, #332]	; (8005ca8 <HAL_RCC_OscConfig+0x26c>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d1f0      	bne.n	8005b48 <HAL_RCC_OscConfig+0x10c>
 8005b66:	e000      	b.n	8005b6a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 0302 	and.w	r3, r3, #2
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d063      	beq.n	8005c3e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005b76:	4b4c      	ldr	r3, [pc, #304]	; (8005ca8 <HAL_RCC_OscConfig+0x26c>)
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	f003 030c 	and.w	r3, r3, #12
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d00b      	beq.n	8005b9a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005b82:	4b49      	ldr	r3, [pc, #292]	; (8005ca8 <HAL_RCC_OscConfig+0x26c>)
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	f003 030c 	and.w	r3, r3, #12
 8005b8a:	2b08      	cmp	r3, #8
 8005b8c:	d11c      	bne.n	8005bc8 <HAL_RCC_OscConfig+0x18c>
 8005b8e:	4b46      	ldr	r3, [pc, #280]	; (8005ca8 <HAL_RCC_OscConfig+0x26c>)
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d116      	bne.n	8005bc8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b9a:	4b43      	ldr	r3, [pc, #268]	; (8005ca8 <HAL_RCC_OscConfig+0x26c>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f003 0302 	and.w	r3, r3, #2
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d005      	beq.n	8005bb2 <HAL_RCC_OscConfig+0x176>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	691b      	ldr	r3, [r3, #16]
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d001      	beq.n	8005bb2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e1c0      	b.n	8005f34 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bb2:	4b3d      	ldr	r3, [pc, #244]	; (8005ca8 <HAL_RCC_OscConfig+0x26c>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	695b      	ldr	r3, [r3, #20]
 8005bbe:	00db      	lsls	r3, r3, #3
 8005bc0:	4939      	ldr	r1, [pc, #228]	; (8005ca8 <HAL_RCC_OscConfig+0x26c>)
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bc6:	e03a      	b.n	8005c3e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	691b      	ldr	r3, [r3, #16]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d020      	beq.n	8005c12 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005bd0:	4b36      	ldr	r3, [pc, #216]	; (8005cac <HAL_RCC_OscConfig+0x270>)
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bd6:	f7fc ff1d 	bl	8002a14 <HAL_GetTick>
 8005bda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bdc:	e008      	b.n	8005bf0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005bde:	f7fc ff19 	bl	8002a14 <HAL_GetTick>
 8005be2:	4602      	mov	r2, r0
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	1ad3      	subs	r3, r2, r3
 8005be8:	2b02      	cmp	r3, #2
 8005bea:	d901      	bls.n	8005bf0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005bec:	2303      	movs	r3, #3
 8005bee:	e1a1      	b.n	8005f34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bf0:	4b2d      	ldr	r3, [pc, #180]	; (8005ca8 <HAL_RCC_OscConfig+0x26c>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f003 0302 	and.w	r3, r3, #2
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d0f0      	beq.n	8005bde <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bfc:	4b2a      	ldr	r3, [pc, #168]	; (8005ca8 <HAL_RCC_OscConfig+0x26c>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	695b      	ldr	r3, [r3, #20]
 8005c08:	00db      	lsls	r3, r3, #3
 8005c0a:	4927      	ldr	r1, [pc, #156]	; (8005ca8 <HAL_RCC_OscConfig+0x26c>)
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	600b      	str	r3, [r1, #0]
 8005c10:	e015      	b.n	8005c3e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c12:	4b26      	ldr	r3, [pc, #152]	; (8005cac <HAL_RCC_OscConfig+0x270>)
 8005c14:	2200      	movs	r2, #0
 8005c16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c18:	f7fc fefc 	bl	8002a14 <HAL_GetTick>
 8005c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c1e:	e008      	b.n	8005c32 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c20:	f7fc fef8 	bl	8002a14 <HAL_GetTick>
 8005c24:	4602      	mov	r2, r0
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	1ad3      	subs	r3, r2, r3
 8005c2a:	2b02      	cmp	r3, #2
 8005c2c:	d901      	bls.n	8005c32 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005c2e:	2303      	movs	r3, #3
 8005c30:	e180      	b.n	8005f34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c32:	4b1d      	ldr	r3, [pc, #116]	; (8005ca8 <HAL_RCC_OscConfig+0x26c>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f003 0302 	and.w	r3, r3, #2
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d1f0      	bne.n	8005c20 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f003 0308 	and.w	r3, r3, #8
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d03a      	beq.n	8005cc0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	699b      	ldr	r3, [r3, #24]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d019      	beq.n	8005c86 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c52:	4b17      	ldr	r3, [pc, #92]	; (8005cb0 <HAL_RCC_OscConfig+0x274>)
 8005c54:	2201      	movs	r2, #1
 8005c56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c58:	f7fc fedc 	bl	8002a14 <HAL_GetTick>
 8005c5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c5e:	e008      	b.n	8005c72 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c60:	f7fc fed8 	bl	8002a14 <HAL_GetTick>
 8005c64:	4602      	mov	r2, r0
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	1ad3      	subs	r3, r2, r3
 8005c6a:	2b02      	cmp	r3, #2
 8005c6c:	d901      	bls.n	8005c72 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005c6e:	2303      	movs	r3, #3
 8005c70:	e160      	b.n	8005f34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c72:	4b0d      	ldr	r3, [pc, #52]	; (8005ca8 <HAL_RCC_OscConfig+0x26c>)
 8005c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c76:	f003 0302 	and.w	r3, r3, #2
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d0f0      	beq.n	8005c60 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005c7e:	2001      	movs	r0, #1
 8005c80:	f000 fac4 	bl	800620c <RCC_Delay>
 8005c84:	e01c      	b.n	8005cc0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c86:	4b0a      	ldr	r3, [pc, #40]	; (8005cb0 <HAL_RCC_OscConfig+0x274>)
 8005c88:	2200      	movs	r2, #0
 8005c8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c8c:	f7fc fec2 	bl	8002a14 <HAL_GetTick>
 8005c90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c92:	e00f      	b.n	8005cb4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c94:	f7fc febe 	bl	8002a14 <HAL_GetTick>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	1ad3      	subs	r3, r2, r3
 8005c9e:	2b02      	cmp	r3, #2
 8005ca0:	d908      	bls.n	8005cb4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005ca2:	2303      	movs	r3, #3
 8005ca4:	e146      	b.n	8005f34 <HAL_RCC_OscConfig+0x4f8>
 8005ca6:	bf00      	nop
 8005ca8:	40021000 	.word	0x40021000
 8005cac:	42420000 	.word	0x42420000
 8005cb0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cb4:	4b92      	ldr	r3, [pc, #584]	; (8005f00 <HAL_RCC_OscConfig+0x4c4>)
 8005cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb8:	f003 0302 	and.w	r3, r3, #2
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d1e9      	bne.n	8005c94 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 0304 	and.w	r3, r3, #4
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	f000 80a6 	beq.w	8005e1a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005cd2:	4b8b      	ldr	r3, [pc, #556]	; (8005f00 <HAL_RCC_OscConfig+0x4c4>)
 8005cd4:	69db      	ldr	r3, [r3, #28]
 8005cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d10d      	bne.n	8005cfa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cde:	4b88      	ldr	r3, [pc, #544]	; (8005f00 <HAL_RCC_OscConfig+0x4c4>)
 8005ce0:	69db      	ldr	r3, [r3, #28]
 8005ce2:	4a87      	ldr	r2, [pc, #540]	; (8005f00 <HAL_RCC_OscConfig+0x4c4>)
 8005ce4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ce8:	61d3      	str	r3, [r2, #28]
 8005cea:	4b85      	ldr	r3, [pc, #532]	; (8005f00 <HAL_RCC_OscConfig+0x4c4>)
 8005cec:	69db      	ldr	r3, [r3, #28]
 8005cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cf2:	60bb      	str	r3, [r7, #8]
 8005cf4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cfa:	4b82      	ldr	r3, [pc, #520]	; (8005f04 <HAL_RCC_OscConfig+0x4c8>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d118      	bne.n	8005d38 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d06:	4b7f      	ldr	r3, [pc, #508]	; (8005f04 <HAL_RCC_OscConfig+0x4c8>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a7e      	ldr	r2, [pc, #504]	; (8005f04 <HAL_RCC_OscConfig+0x4c8>)
 8005d0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d12:	f7fc fe7f 	bl	8002a14 <HAL_GetTick>
 8005d16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d18:	e008      	b.n	8005d2c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d1a:	f7fc fe7b 	bl	8002a14 <HAL_GetTick>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	1ad3      	subs	r3, r2, r3
 8005d24:	2b64      	cmp	r3, #100	; 0x64
 8005d26:	d901      	bls.n	8005d2c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005d28:	2303      	movs	r3, #3
 8005d2a:	e103      	b.n	8005f34 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d2c:	4b75      	ldr	r3, [pc, #468]	; (8005f04 <HAL_RCC_OscConfig+0x4c8>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d0f0      	beq.n	8005d1a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d106      	bne.n	8005d4e <HAL_RCC_OscConfig+0x312>
 8005d40:	4b6f      	ldr	r3, [pc, #444]	; (8005f00 <HAL_RCC_OscConfig+0x4c4>)
 8005d42:	6a1b      	ldr	r3, [r3, #32]
 8005d44:	4a6e      	ldr	r2, [pc, #440]	; (8005f00 <HAL_RCC_OscConfig+0x4c4>)
 8005d46:	f043 0301 	orr.w	r3, r3, #1
 8005d4a:	6213      	str	r3, [r2, #32]
 8005d4c:	e02d      	b.n	8005daa <HAL_RCC_OscConfig+0x36e>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d10c      	bne.n	8005d70 <HAL_RCC_OscConfig+0x334>
 8005d56:	4b6a      	ldr	r3, [pc, #424]	; (8005f00 <HAL_RCC_OscConfig+0x4c4>)
 8005d58:	6a1b      	ldr	r3, [r3, #32]
 8005d5a:	4a69      	ldr	r2, [pc, #420]	; (8005f00 <HAL_RCC_OscConfig+0x4c4>)
 8005d5c:	f023 0301 	bic.w	r3, r3, #1
 8005d60:	6213      	str	r3, [r2, #32]
 8005d62:	4b67      	ldr	r3, [pc, #412]	; (8005f00 <HAL_RCC_OscConfig+0x4c4>)
 8005d64:	6a1b      	ldr	r3, [r3, #32]
 8005d66:	4a66      	ldr	r2, [pc, #408]	; (8005f00 <HAL_RCC_OscConfig+0x4c4>)
 8005d68:	f023 0304 	bic.w	r3, r3, #4
 8005d6c:	6213      	str	r3, [r2, #32]
 8005d6e:	e01c      	b.n	8005daa <HAL_RCC_OscConfig+0x36e>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	2b05      	cmp	r3, #5
 8005d76:	d10c      	bne.n	8005d92 <HAL_RCC_OscConfig+0x356>
 8005d78:	4b61      	ldr	r3, [pc, #388]	; (8005f00 <HAL_RCC_OscConfig+0x4c4>)
 8005d7a:	6a1b      	ldr	r3, [r3, #32]
 8005d7c:	4a60      	ldr	r2, [pc, #384]	; (8005f00 <HAL_RCC_OscConfig+0x4c4>)
 8005d7e:	f043 0304 	orr.w	r3, r3, #4
 8005d82:	6213      	str	r3, [r2, #32]
 8005d84:	4b5e      	ldr	r3, [pc, #376]	; (8005f00 <HAL_RCC_OscConfig+0x4c4>)
 8005d86:	6a1b      	ldr	r3, [r3, #32]
 8005d88:	4a5d      	ldr	r2, [pc, #372]	; (8005f00 <HAL_RCC_OscConfig+0x4c4>)
 8005d8a:	f043 0301 	orr.w	r3, r3, #1
 8005d8e:	6213      	str	r3, [r2, #32]
 8005d90:	e00b      	b.n	8005daa <HAL_RCC_OscConfig+0x36e>
 8005d92:	4b5b      	ldr	r3, [pc, #364]	; (8005f00 <HAL_RCC_OscConfig+0x4c4>)
 8005d94:	6a1b      	ldr	r3, [r3, #32]
 8005d96:	4a5a      	ldr	r2, [pc, #360]	; (8005f00 <HAL_RCC_OscConfig+0x4c4>)
 8005d98:	f023 0301 	bic.w	r3, r3, #1
 8005d9c:	6213      	str	r3, [r2, #32]
 8005d9e:	4b58      	ldr	r3, [pc, #352]	; (8005f00 <HAL_RCC_OscConfig+0x4c4>)
 8005da0:	6a1b      	ldr	r3, [r3, #32]
 8005da2:	4a57      	ldr	r2, [pc, #348]	; (8005f00 <HAL_RCC_OscConfig+0x4c4>)
 8005da4:	f023 0304 	bic.w	r3, r3, #4
 8005da8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d015      	beq.n	8005dde <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005db2:	f7fc fe2f 	bl	8002a14 <HAL_GetTick>
 8005db6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005db8:	e00a      	b.n	8005dd0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dba:	f7fc fe2b 	bl	8002a14 <HAL_GetTick>
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	1ad3      	subs	r3, r2, r3
 8005dc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d901      	bls.n	8005dd0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005dcc:	2303      	movs	r3, #3
 8005dce:	e0b1      	b.n	8005f34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dd0:	4b4b      	ldr	r3, [pc, #300]	; (8005f00 <HAL_RCC_OscConfig+0x4c4>)
 8005dd2:	6a1b      	ldr	r3, [r3, #32]
 8005dd4:	f003 0302 	and.w	r3, r3, #2
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d0ee      	beq.n	8005dba <HAL_RCC_OscConfig+0x37e>
 8005ddc:	e014      	b.n	8005e08 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005dde:	f7fc fe19 	bl	8002a14 <HAL_GetTick>
 8005de2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005de4:	e00a      	b.n	8005dfc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005de6:	f7fc fe15 	bl	8002a14 <HAL_GetTick>
 8005dea:	4602      	mov	r2, r0
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	1ad3      	subs	r3, r2, r3
 8005df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d901      	bls.n	8005dfc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005df8:	2303      	movs	r3, #3
 8005dfa:	e09b      	b.n	8005f34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005dfc:	4b40      	ldr	r3, [pc, #256]	; (8005f00 <HAL_RCC_OscConfig+0x4c4>)
 8005dfe:	6a1b      	ldr	r3, [r3, #32]
 8005e00:	f003 0302 	and.w	r3, r3, #2
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d1ee      	bne.n	8005de6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005e08:	7dfb      	ldrb	r3, [r7, #23]
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d105      	bne.n	8005e1a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e0e:	4b3c      	ldr	r3, [pc, #240]	; (8005f00 <HAL_RCC_OscConfig+0x4c4>)
 8005e10:	69db      	ldr	r3, [r3, #28]
 8005e12:	4a3b      	ldr	r2, [pc, #236]	; (8005f00 <HAL_RCC_OscConfig+0x4c4>)
 8005e14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e18:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	69db      	ldr	r3, [r3, #28]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	f000 8087 	beq.w	8005f32 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e24:	4b36      	ldr	r3, [pc, #216]	; (8005f00 <HAL_RCC_OscConfig+0x4c4>)
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	f003 030c 	and.w	r3, r3, #12
 8005e2c:	2b08      	cmp	r3, #8
 8005e2e:	d061      	beq.n	8005ef4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	69db      	ldr	r3, [r3, #28]
 8005e34:	2b02      	cmp	r3, #2
 8005e36:	d146      	bne.n	8005ec6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e38:	4b33      	ldr	r3, [pc, #204]	; (8005f08 <HAL_RCC_OscConfig+0x4cc>)
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e3e:	f7fc fde9 	bl	8002a14 <HAL_GetTick>
 8005e42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e44:	e008      	b.n	8005e58 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e46:	f7fc fde5 	bl	8002a14 <HAL_GetTick>
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	1ad3      	subs	r3, r2, r3
 8005e50:	2b02      	cmp	r3, #2
 8005e52:	d901      	bls.n	8005e58 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005e54:	2303      	movs	r3, #3
 8005e56:	e06d      	b.n	8005f34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e58:	4b29      	ldr	r3, [pc, #164]	; (8005f00 <HAL_RCC_OscConfig+0x4c4>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d1f0      	bne.n	8005e46 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6a1b      	ldr	r3, [r3, #32]
 8005e68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e6c:	d108      	bne.n	8005e80 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005e6e:	4b24      	ldr	r3, [pc, #144]	; (8005f00 <HAL_RCC_OscConfig+0x4c4>)
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	4921      	ldr	r1, [pc, #132]	; (8005f00 <HAL_RCC_OscConfig+0x4c4>)
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e80:	4b1f      	ldr	r3, [pc, #124]	; (8005f00 <HAL_RCC_OscConfig+0x4c4>)
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6a19      	ldr	r1, [r3, #32]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e90:	430b      	orrs	r3, r1
 8005e92:	491b      	ldr	r1, [pc, #108]	; (8005f00 <HAL_RCC_OscConfig+0x4c4>)
 8005e94:	4313      	orrs	r3, r2
 8005e96:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e98:	4b1b      	ldr	r3, [pc, #108]	; (8005f08 <HAL_RCC_OscConfig+0x4cc>)
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e9e:	f7fc fdb9 	bl	8002a14 <HAL_GetTick>
 8005ea2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005ea4:	e008      	b.n	8005eb8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ea6:	f7fc fdb5 	bl	8002a14 <HAL_GetTick>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	1ad3      	subs	r3, r2, r3
 8005eb0:	2b02      	cmp	r3, #2
 8005eb2:	d901      	bls.n	8005eb8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005eb4:	2303      	movs	r3, #3
 8005eb6:	e03d      	b.n	8005f34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005eb8:	4b11      	ldr	r3, [pc, #68]	; (8005f00 <HAL_RCC_OscConfig+0x4c4>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d0f0      	beq.n	8005ea6 <HAL_RCC_OscConfig+0x46a>
 8005ec4:	e035      	b.n	8005f32 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ec6:	4b10      	ldr	r3, [pc, #64]	; (8005f08 <HAL_RCC_OscConfig+0x4cc>)
 8005ec8:	2200      	movs	r2, #0
 8005eca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ecc:	f7fc fda2 	bl	8002a14 <HAL_GetTick>
 8005ed0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ed2:	e008      	b.n	8005ee6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ed4:	f7fc fd9e 	bl	8002a14 <HAL_GetTick>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	1ad3      	subs	r3, r2, r3
 8005ede:	2b02      	cmp	r3, #2
 8005ee0:	d901      	bls.n	8005ee6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005ee2:	2303      	movs	r3, #3
 8005ee4:	e026      	b.n	8005f34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ee6:	4b06      	ldr	r3, [pc, #24]	; (8005f00 <HAL_RCC_OscConfig+0x4c4>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d1f0      	bne.n	8005ed4 <HAL_RCC_OscConfig+0x498>
 8005ef2:	e01e      	b.n	8005f32 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	69db      	ldr	r3, [r3, #28]
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d107      	bne.n	8005f0c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005efc:	2301      	movs	r3, #1
 8005efe:	e019      	b.n	8005f34 <HAL_RCC_OscConfig+0x4f8>
 8005f00:	40021000 	.word	0x40021000
 8005f04:	40007000 	.word	0x40007000
 8005f08:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005f0c:	4b0b      	ldr	r3, [pc, #44]	; (8005f3c <HAL_RCC_OscConfig+0x500>)
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6a1b      	ldr	r3, [r3, #32]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d106      	bne.n	8005f2e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d001      	beq.n	8005f32 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e000      	b.n	8005f34 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005f32:	2300      	movs	r3, #0
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3718      	adds	r7, #24
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}
 8005f3c:	40021000 	.word	0x40021000

08005f40 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b084      	sub	sp, #16
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d101      	bne.n	8005f54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	e0d0      	b.n	80060f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005f54:	4b6a      	ldr	r3, [pc, #424]	; (8006100 <HAL_RCC_ClockConfig+0x1c0>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f003 0307 	and.w	r3, r3, #7
 8005f5c:	683a      	ldr	r2, [r7, #0]
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d910      	bls.n	8005f84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f62:	4b67      	ldr	r3, [pc, #412]	; (8006100 <HAL_RCC_ClockConfig+0x1c0>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f023 0207 	bic.w	r2, r3, #7
 8005f6a:	4965      	ldr	r1, [pc, #404]	; (8006100 <HAL_RCC_ClockConfig+0x1c0>)
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f72:	4b63      	ldr	r3, [pc, #396]	; (8006100 <HAL_RCC_ClockConfig+0x1c0>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f003 0307 	and.w	r3, r3, #7
 8005f7a:	683a      	ldr	r2, [r7, #0]
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d001      	beq.n	8005f84 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	e0b8      	b.n	80060f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f003 0302 	and.w	r3, r3, #2
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d020      	beq.n	8005fd2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f003 0304 	and.w	r3, r3, #4
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d005      	beq.n	8005fa8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f9c:	4b59      	ldr	r3, [pc, #356]	; (8006104 <HAL_RCC_ClockConfig+0x1c4>)
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	4a58      	ldr	r2, [pc, #352]	; (8006104 <HAL_RCC_ClockConfig+0x1c4>)
 8005fa2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005fa6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f003 0308 	and.w	r3, r3, #8
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d005      	beq.n	8005fc0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005fb4:	4b53      	ldr	r3, [pc, #332]	; (8006104 <HAL_RCC_ClockConfig+0x1c4>)
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	4a52      	ldr	r2, [pc, #328]	; (8006104 <HAL_RCC_ClockConfig+0x1c4>)
 8005fba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005fbe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005fc0:	4b50      	ldr	r3, [pc, #320]	; (8006104 <HAL_RCC_ClockConfig+0x1c4>)
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	494d      	ldr	r1, [pc, #308]	; (8006104 <HAL_RCC_ClockConfig+0x1c4>)
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f003 0301 	and.w	r3, r3, #1
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d040      	beq.n	8006060 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d107      	bne.n	8005ff6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fe6:	4b47      	ldr	r3, [pc, #284]	; (8006104 <HAL_RCC_ClockConfig+0x1c4>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d115      	bne.n	800601e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e07f      	b.n	80060f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	2b02      	cmp	r3, #2
 8005ffc:	d107      	bne.n	800600e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ffe:	4b41      	ldr	r3, [pc, #260]	; (8006104 <HAL_RCC_ClockConfig+0x1c4>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006006:	2b00      	cmp	r3, #0
 8006008:	d109      	bne.n	800601e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	e073      	b.n	80060f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800600e:	4b3d      	ldr	r3, [pc, #244]	; (8006104 <HAL_RCC_ClockConfig+0x1c4>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f003 0302 	and.w	r3, r3, #2
 8006016:	2b00      	cmp	r3, #0
 8006018:	d101      	bne.n	800601e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	e06b      	b.n	80060f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800601e:	4b39      	ldr	r3, [pc, #228]	; (8006104 <HAL_RCC_ClockConfig+0x1c4>)
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	f023 0203 	bic.w	r2, r3, #3
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	4936      	ldr	r1, [pc, #216]	; (8006104 <HAL_RCC_ClockConfig+0x1c4>)
 800602c:	4313      	orrs	r3, r2
 800602e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006030:	f7fc fcf0 	bl	8002a14 <HAL_GetTick>
 8006034:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006036:	e00a      	b.n	800604e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006038:	f7fc fcec 	bl	8002a14 <HAL_GetTick>
 800603c:	4602      	mov	r2, r0
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	1ad3      	subs	r3, r2, r3
 8006042:	f241 3288 	movw	r2, #5000	; 0x1388
 8006046:	4293      	cmp	r3, r2
 8006048:	d901      	bls.n	800604e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800604a:	2303      	movs	r3, #3
 800604c:	e053      	b.n	80060f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800604e:	4b2d      	ldr	r3, [pc, #180]	; (8006104 <HAL_RCC_ClockConfig+0x1c4>)
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	f003 020c 	and.w	r2, r3, #12
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	429a      	cmp	r2, r3
 800605e:	d1eb      	bne.n	8006038 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006060:	4b27      	ldr	r3, [pc, #156]	; (8006100 <HAL_RCC_ClockConfig+0x1c0>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f003 0307 	and.w	r3, r3, #7
 8006068:	683a      	ldr	r2, [r7, #0]
 800606a:	429a      	cmp	r2, r3
 800606c:	d210      	bcs.n	8006090 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800606e:	4b24      	ldr	r3, [pc, #144]	; (8006100 <HAL_RCC_ClockConfig+0x1c0>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f023 0207 	bic.w	r2, r3, #7
 8006076:	4922      	ldr	r1, [pc, #136]	; (8006100 <HAL_RCC_ClockConfig+0x1c0>)
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	4313      	orrs	r3, r2
 800607c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800607e:	4b20      	ldr	r3, [pc, #128]	; (8006100 <HAL_RCC_ClockConfig+0x1c0>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f003 0307 	and.w	r3, r3, #7
 8006086:	683a      	ldr	r2, [r7, #0]
 8006088:	429a      	cmp	r2, r3
 800608a:	d001      	beq.n	8006090 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	e032      	b.n	80060f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f003 0304 	and.w	r3, r3, #4
 8006098:	2b00      	cmp	r3, #0
 800609a:	d008      	beq.n	80060ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800609c:	4b19      	ldr	r3, [pc, #100]	; (8006104 <HAL_RCC_ClockConfig+0x1c4>)
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	4916      	ldr	r1, [pc, #88]	; (8006104 <HAL_RCC_ClockConfig+0x1c4>)
 80060aa:	4313      	orrs	r3, r2
 80060ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f003 0308 	and.w	r3, r3, #8
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d009      	beq.n	80060ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80060ba:	4b12      	ldr	r3, [pc, #72]	; (8006104 <HAL_RCC_ClockConfig+0x1c4>)
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	00db      	lsls	r3, r3, #3
 80060c8:	490e      	ldr	r1, [pc, #56]	; (8006104 <HAL_RCC_ClockConfig+0x1c4>)
 80060ca:	4313      	orrs	r3, r2
 80060cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80060ce:	f000 f821 	bl	8006114 <HAL_RCC_GetSysClockFreq>
 80060d2:	4602      	mov	r2, r0
 80060d4:	4b0b      	ldr	r3, [pc, #44]	; (8006104 <HAL_RCC_ClockConfig+0x1c4>)
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	091b      	lsrs	r3, r3, #4
 80060da:	f003 030f 	and.w	r3, r3, #15
 80060de:	490a      	ldr	r1, [pc, #40]	; (8006108 <HAL_RCC_ClockConfig+0x1c8>)
 80060e0:	5ccb      	ldrb	r3, [r1, r3]
 80060e2:	fa22 f303 	lsr.w	r3, r2, r3
 80060e6:	4a09      	ldr	r2, [pc, #36]	; (800610c <HAL_RCC_ClockConfig+0x1cc>)
 80060e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80060ea:	4b09      	ldr	r3, [pc, #36]	; (8006110 <HAL_RCC_ClockConfig+0x1d0>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4618      	mov	r0, r3
 80060f0:	f7fc fc4e 	bl	8002990 <HAL_InitTick>

  return HAL_OK;
 80060f4:	2300      	movs	r3, #0
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3710      	adds	r7, #16
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	bf00      	nop
 8006100:	40022000 	.word	0x40022000
 8006104:	40021000 	.word	0x40021000
 8006108:	08006fe0 	.word	0x08006fe0
 800610c:	2000004c 	.word	0x2000004c
 8006110:	20000054 	.word	0x20000054

08006114 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006114:	b490      	push	{r4, r7}
 8006116:	b08a      	sub	sp, #40	; 0x28
 8006118:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800611a:	4b29      	ldr	r3, [pc, #164]	; (80061c0 <HAL_RCC_GetSysClockFreq+0xac>)
 800611c:	1d3c      	adds	r4, r7, #4
 800611e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006120:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006124:	f240 2301 	movw	r3, #513	; 0x201
 8006128:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800612a:	2300      	movs	r3, #0
 800612c:	61fb      	str	r3, [r7, #28]
 800612e:	2300      	movs	r3, #0
 8006130:	61bb      	str	r3, [r7, #24]
 8006132:	2300      	movs	r3, #0
 8006134:	627b      	str	r3, [r7, #36]	; 0x24
 8006136:	2300      	movs	r3, #0
 8006138:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800613a:	2300      	movs	r3, #0
 800613c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800613e:	4b21      	ldr	r3, [pc, #132]	; (80061c4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006144:	69fb      	ldr	r3, [r7, #28]
 8006146:	f003 030c 	and.w	r3, r3, #12
 800614a:	2b04      	cmp	r3, #4
 800614c:	d002      	beq.n	8006154 <HAL_RCC_GetSysClockFreq+0x40>
 800614e:	2b08      	cmp	r3, #8
 8006150:	d003      	beq.n	800615a <HAL_RCC_GetSysClockFreq+0x46>
 8006152:	e02b      	b.n	80061ac <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006154:	4b1c      	ldr	r3, [pc, #112]	; (80061c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006156:	623b      	str	r3, [r7, #32]
      break;
 8006158:	e02b      	b.n	80061b2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800615a:	69fb      	ldr	r3, [r7, #28]
 800615c:	0c9b      	lsrs	r3, r3, #18
 800615e:	f003 030f 	and.w	r3, r3, #15
 8006162:	3328      	adds	r3, #40	; 0x28
 8006164:	443b      	add	r3, r7
 8006166:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800616a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800616c:	69fb      	ldr	r3, [r7, #28]
 800616e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006172:	2b00      	cmp	r3, #0
 8006174:	d012      	beq.n	800619c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006176:	4b13      	ldr	r3, [pc, #76]	; (80061c4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	0c5b      	lsrs	r3, r3, #17
 800617c:	f003 0301 	and.w	r3, r3, #1
 8006180:	3328      	adds	r3, #40	; 0x28
 8006182:	443b      	add	r3, r7
 8006184:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006188:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	4a0e      	ldr	r2, [pc, #56]	; (80061c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800618e:	fb03 f202 	mul.w	r2, r3, r2
 8006192:	69bb      	ldr	r3, [r7, #24]
 8006194:	fbb2 f3f3 	udiv	r3, r2, r3
 8006198:	627b      	str	r3, [r7, #36]	; 0x24
 800619a:	e004      	b.n	80061a6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	4a0b      	ldr	r2, [pc, #44]	; (80061cc <HAL_RCC_GetSysClockFreq+0xb8>)
 80061a0:	fb02 f303 	mul.w	r3, r2, r3
 80061a4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80061a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a8:	623b      	str	r3, [r7, #32]
      break;
 80061aa:	e002      	b.n	80061b2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80061ac:	4b06      	ldr	r3, [pc, #24]	; (80061c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80061ae:	623b      	str	r3, [r7, #32]
      break;
 80061b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80061b2:	6a3b      	ldr	r3, [r7, #32]
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3728      	adds	r7, #40	; 0x28
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bc90      	pop	{r4, r7}
 80061bc:	4770      	bx	lr
 80061be:	bf00      	nop
 80061c0:	08006fd0 	.word	0x08006fd0
 80061c4:	40021000 	.word	0x40021000
 80061c8:	007a1200 	.word	0x007a1200
 80061cc:	003d0900 	.word	0x003d0900

080061d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061d0:	b480      	push	{r7}
 80061d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80061d4:	4b02      	ldr	r3, [pc, #8]	; (80061e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80061d6:	681b      	ldr	r3, [r3, #0]
}
 80061d8:	4618      	mov	r0, r3
 80061da:	46bd      	mov	sp, r7
 80061dc:	bc80      	pop	{r7}
 80061de:	4770      	bx	lr
 80061e0:	2000004c 	.word	0x2000004c

080061e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80061e8:	f7ff fff2 	bl	80061d0 <HAL_RCC_GetHCLKFreq>
 80061ec:	4602      	mov	r2, r0
 80061ee:	4b05      	ldr	r3, [pc, #20]	; (8006204 <HAL_RCC_GetPCLK1Freq+0x20>)
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	0a1b      	lsrs	r3, r3, #8
 80061f4:	f003 0307 	and.w	r3, r3, #7
 80061f8:	4903      	ldr	r1, [pc, #12]	; (8006208 <HAL_RCC_GetPCLK1Freq+0x24>)
 80061fa:	5ccb      	ldrb	r3, [r1, r3]
 80061fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006200:	4618      	mov	r0, r3
 8006202:	bd80      	pop	{r7, pc}
 8006204:	40021000 	.word	0x40021000
 8006208:	08006ff0 	.word	0x08006ff0

0800620c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800620c:	b480      	push	{r7}
 800620e:	b085      	sub	sp, #20
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006214:	4b0a      	ldr	r3, [pc, #40]	; (8006240 <RCC_Delay+0x34>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a0a      	ldr	r2, [pc, #40]	; (8006244 <RCC_Delay+0x38>)
 800621a:	fba2 2303 	umull	r2, r3, r2, r3
 800621e:	0a5b      	lsrs	r3, r3, #9
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	fb02 f303 	mul.w	r3, r2, r3
 8006226:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006228:	bf00      	nop
  }
  while (Delay --);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	1e5a      	subs	r2, r3, #1
 800622e:	60fa      	str	r2, [r7, #12]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d1f9      	bne.n	8006228 <RCC_Delay+0x1c>
}
 8006234:	bf00      	nop
 8006236:	bf00      	nop
 8006238:	3714      	adds	r7, #20
 800623a:	46bd      	mov	sp, r7
 800623c:	bc80      	pop	{r7}
 800623e:	4770      	bx	lr
 8006240:	2000004c 	.word	0x2000004c
 8006244:	10624dd3 	.word	0x10624dd3

08006248 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b082      	sub	sp, #8
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d101      	bne.n	800625a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	e041      	b.n	80062de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006260:	b2db      	uxtb	r3, r3
 8006262:	2b00      	cmp	r3, #0
 8006264:	d106      	bne.n	8006274 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2200      	movs	r2, #0
 800626a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f7fc fa0e 	bl	8002690 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2202      	movs	r2, #2
 8006278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	3304      	adds	r3, #4
 8006284:	4619      	mov	r1, r3
 8006286:	4610      	mov	r0, r2
 8006288:	f000 fb5c 	bl	8006944 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2201      	movs	r2, #1
 8006290:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2201      	movs	r2, #1
 8006298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2201      	movs	r2, #1
 80062a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2201      	movs	r2, #1
 80062a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2201      	movs	r2, #1
 80062b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2201      	movs	r2, #1
 80062b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2201      	movs	r2, #1
 80062c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2201      	movs	r2, #1
 80062d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062dc:	2300      	movs	r3, #0
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3708      	adds	r7, #8
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}
	...

080062e8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b085      	sub	sp, #20
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d001      	beq.n	8006300 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	e032      	b.n	8006366 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2202      	movs	r2, #2
 8006304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a18      	ldr	r2, [pc, #96]	; (8006370 <HAL_TIM_Base_Start+0x88>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d00e      	beq.n	8006330 <HAL_TIM_Base_Start+0x48>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800631a:	d009      	beq.n	8006330 <HAL_TIM_Base_Start+0x48>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a14      	ldr	r2, [pc, #80]	; (8006374 <HAL_TIM_Base_Start+0x8c>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d004      	beq.n	8006330 <HAL_TIM_Base_Start+0x48>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a13      	ldr	r2, [pc, #76]	; (8006378 <HAL_TIM_Base_Start+0x90>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d111      	bne.n	8006354 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	f003 0307 	and.w	r3, r3, #7
 800633a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2b06      	cmp	r3, #6
 8006340:	d010      	beq.n	8006364 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f042 0201 	orr.w	r2, r2, #1
 8006350:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006352:	e007      	b.n	8006364 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	681a      	ldr	r2, [r3, #0]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f042 0201 	orr.w	r2, r2, #1
 8006362:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006364:	2300      	movs	r3, #0
}
 8006366:	4618      	mov	r0, r3
 8006368:	3714      	adds	r7, #20
 800636a:	46bd      	mov	sp, r7
 800636c:	bc80      	pop	{r7}
 800636e:	4770      	bx	lr
 8006370:	40012c00 	.word	0x40012c00
 8006374:	40000400 	.word	0x40000400
 8006378:	40000800 	.word	0x40000800

0800637c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800637c:	b480      	push	{r7}
 800637e:	b085      	sub	sp, #20
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800638a:	b2db      	uxtb	r3, r3
 800638c:	2b01      	cmp	r3, #1
 800638e:	d001      	beq.n	8006394 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006390:	2301      	movs	r3, #1
 8006392:	e03a      	b.n	800640a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2202      	movs	r2, #2
 8006398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	68da      	ldr	r2, [r3, #12]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f042 0201 	orr.w	r2, r2, #1
 80063aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a18      	ldr	r2, [pc, #96]	; (8006414 <HAL_TIM_Base_Start_IT+0x98>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d00e      	beq.n	80063d4 <HAL_TIM_Base_Start_IT+0x58>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063be:	d009      	beq.n	80063d4 <HAL_TIM_Base_Start_IT+0x58>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a14      	ldr	r2, [pc, #80]	; (8006418 <HAL_TIM_Base_Start_IT+0x9c>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d004      	beq.n	80063d4 <HAL_TIM_Base_Start_IT+0x58>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a13      	ldr	r2, [pc, #76]	; (800641c <HAL_TIM_Base_Start_IT+0xa0>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d111      	bne.n	80063f8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	f003 0307 	and.w	r3, r3, #7
 80063de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2b06      	cmp	r3, #6
 80063e4:	d010      	beq.n	8006408 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f042 0201 	orr.w	r2, r2, #1
 80063f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063f6:	e007      	b.n	8006408 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f042 0201 	orr.w	r2, r2, #1
 8006406:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	3714      	adds	r7, #20
 800640e:	46bd      	mov	sp, r7
 8006410:	bc80      	pop	{r7}
 8006412:	4770      	bx	lr
 8006414:	40012c00 	.word	0x40012c00
 8006418:	40000400 	.word	0x40000400
 800641c:	40000800 	.word	0x40000800

08006420 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b084      	sub	sp, #16
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d109      	bne.n	8006444 <HAL_TIM_PWM_Start+0x24>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006436:	b2db      	uxtb	r3, r3
 8006438:	2b01      	cmp	r3, #1
 800643a:	bf14      	ite	ne
 800643c:	2301      	movne	r3, #1
 800643e:	2300      	moveq	r3, #0
 8006440:	b2db      	uxtb	r3, r3
 8006442:	e022      	b.n	800648a <HAL_TIM_PWM_Start+0x6a>
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	2b04      	cmp	r3, #4
 8006448:	d109      	bne.n	800645e <HAL_TIM_PWM_Start+0x3e>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006450:	b2db      	uxtb	r3, r3
 8006452:	2b01      	cmp	r3, #1
 8006454:	bf14      	ite	ne
 8006456:	2301      	movne	r3, #1
 8006458:	2300      	moveq	r3, #0
 800645a:	b2db      	uxtb	r3, r3
 800645c:	e015      	b.n	800648a <HAL_TIM_PWM_Start+0x6a>
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	2b08      	cmp	r3, #8
 8006462:	d109      	bne.n	8006478 <HAL_TIM_PWM_Start+0x58>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800646a:	b2db      	uxtb	r3, r3
 800646c:	2b01      	cmp	r3, #1
 800646e:	bf14      	ite	ne
 8006470:	2301      	movne	r3, #1
 8006472:	2300      	moveq	r3, #0
 8006474:	b2db      	uxtb	r3, r3
 8006476:	e008      	b.n	800648a <HAL_TIM_PWM_Start+0x6a>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800647e:	b2db      	uxtb	r3, r3
 8006480:	2b01      	cmp	r3, #1
 8006482:	bf14      	ite	ne
 8006484:	2301      	movne	r3, #1
 8006486:	2300      	moveq	r3, #0
 8006488:	b2db      	uxtb	r3, r3
 800648a:	2b00      	cmp	r3, #0
 800648c:	d001      	beq.n	8006492 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	e05e      	b.n	8006550 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d104      	bne.n	80064a2 <HAL_TIM_PWM_Start+0x82>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2202      	movs	r2, #2
 800649c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064a0:	e013      	b.n	80064ca <HAL_TIM_PWM_Start+0xaa>
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	2b04      	cmp	r3, #4
 80064a6:	d104      	bne.n	80064b2 <HAL_TIM_PWM_Start+0x92>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2202      	movs	r2, #2
 80064ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064b0:	e00b      	b.n	80064ca <HAL_TIM_PWM_Start+0xaa>
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	2b08      	cmp	r3, #8
 80064b6:	d104      	bne.n	80064c2 <HAL_TIM_PWM_Start+0xa2>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2202      	movs	r2, #2
 80064bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064c0:	e003      	b.n	80064ca <HAL_TIM_PWM_Start+0xaa>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2202      	movs	r2, #2
 80064c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	2201      	movs	r2, #1
 80064d0:	6839      	ldr	r1, [r7, #0]
 80064d2:	4618      	mov	r0, r3
 80064d4:	f000 fb2e 	bl	8006b34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a1e      	ldr	r2, [pc, #120]	; (8006558 <HAL_TIM_PWM_Start+0x138>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d107      	bne.n	80064f2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80064f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a18      	ldr	r2, [pc, #96]	; (8006558 <HAL_TIM_PWM_Start+0x138>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d00e      	beq.n	800651a <HAL_TIM_PWM_Start+0xfa>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006504:	d009      	beq.n	800651a <HAL_TIM_PWM_Start+0xfa>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a14      	ldr	r2, [pc, #80]	; (800655c <HAL_TIM_PWM_Start+0x13c>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d004      	beq.n	800651a <HAL_TIM_PWM_Start+0xfa>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a12      	ldr	r2, [pc, #72]	; (8006560 <HAL_TIM_PWM_Start+0x140>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d111      	bne.n	800653e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	f003 0307 	and.w	r3, r3, #7
 8006524:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2b06      	cmp	r3, #6
 800652a:	d010      	beq.n	800654e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f042 0201 	orr.w	r2, r2, #1
 800653a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800653c:	e007      	b.n	800654e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f042 0201 	orr.w	r2, r2, #1
 800654c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800654e:	2300      	movs	r3, #0
}
 8006550:	4618      	mov	r0, r3
 8006552:	3710      	adds	r7, #16
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}
 8006558:	40012c00 	.word	0x40012c00
 800655c:	40000400 	.word	0x40000400
 8006560:	40000800 	.word	0x40000800

08006564 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b082      	sub	sp, #8
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	691b      	ldr	r3, [r3, #16]
 8006572:	f003 0302 	and.w	r3, r3, #2
 8006576:	2b02      	cmp	r3, #2
 8006578:	d122      	bne.n	80065c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	68db      	ldr	r3, [r3, #12]
 8006580:	f003 0302 	and.w	r3, r3, #2
 8006584:	2b02      	cmp	r3, #2
 8006586:	d11b      	bne.n	80065c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f06f 0202 	mvn.w	r2, #2
 8006590:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2201      	movs	r2, #1
 8006596:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	699b      	ldr	r3, [r3, #24]
 800659e:	f003 0303 	and.w	r3, r3, #3
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d003      	beq.n	80065ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f000 f9b1 	bl	800690e <HAL_TIM_IC_CaptureCallback>
 80065ac:	e005      	b.n	80065ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 f9a4 	bl	80068fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f000 f9b3 	bl	8006920 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2200      	movs	r2, #0
 80065be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	691b      	ldr	r3, [r3, #16]
 80065c6:	f003 0304 	and.w	r3, r3, #4
 80065ca:	2b04      	cmp	r3, #4
 80065cc:	d122      	bne.n	8006614 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	f003 0304 	and.w	r3, r3, #4
 80065d8:	2b04      	cmp	r3, #4
 80065da:	d11b      	bne.n	8006614 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f06f 0204 	mvn.w	r2, #4
 80065e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2202      	movs	r2, #2
 80065ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	699b      	ldr	r3, [r3, #24]
 80065f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d003      	beq.n	8006602 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 f987 	bl	800690e <HAL_TIM_IC_CaptureCallback>
 8006600:	e005      	b.n	800660e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f000 f97a 	bl	80068fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f000 f989 	bl	8006920 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2200      	movs	r2, #0
 8006612:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	691b      	ldr	r3, [r3, #16]
 800661a:	f003 0308 	and.w	r3, r3, #8
 800661e:	2b08      	cmp	r3, #8
 8006620:	d122      	bne.n	8006668 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	68db      	ldr	r3, [r3, #12]
 8006628:	f003 0308 	and.w	r3, r3, #8
 800662c:	2b08      	cmp	r3, #8
 800662e:	d11b      	bne.n	8006668 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f06f 0208 	mvn.w	r2, #8
 8006638:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2204      	movs	r2, #4
 800663e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	69db      	ldr	r3, [r3, #28]
 8006646:	f003 0303 	and.w	r3, r3, #3
 800664a:	2b00      	cmp	r3, #0
 800664c:	d003      	beq.n	8006656 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 f95d 	bl	800690e <HAL_TIM_IC_CaptureCallback>
 8006654:	e005      	b.n	8006662 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 f950 	bl	80068fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f000 f95f 	bl	8006920 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	691b      	ldr	r3, [r3, #16]
 800666e:	f003 0310 	and.w	r3, r3, #16
 8006672:	2b10      	cmp	r3, #16
 8006674:	d122      	bne.n	80066bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	68db      	ldr	r3, [r3, #12]
 800667c:	f003 0310 	and.w	r3, r3, #16
 8006680:	2b10      	cmp	r3, #16
 8006682:	d11b      	bne.n	80066bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f06f 0210 	mvn.w	r2, #16
 800668c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2208      	movs	r2, #8
 8006692:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	69db      	ldr	r3, [r3, #28]
 800669a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d003      	beq.n	80066aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 f933 	bl	800690e <HAL_TIM_IC_CaptureCallback>
 80066a8:	e005      	b.n	80066b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f000 f926 	bl	80068fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f000 f935 	bl	8006920 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2200      	movs	r2, #0
 80066ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	691b      	ldr	r3, [r3, #16]
 80066c2:	f003 0301 	and.w	r3, r3, #1
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d10e      	bne.n	80066e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	68db      	ldr	r3, [r3, #12]
 80066d0:	f003 0301 	and.w	r3, r3, #1
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d107      	bne.n	80066e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f06f 0201 	mvn.w	r2, #1
 80066e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f7fc f8b0 	bl	8002848 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	691b      	ldr	r3, [r3, #16]
 80066ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066f2:	2b80      	cmp	r3, #128	; 0x80
 80066f4:	d10e      	bne.n	8006714 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006700:	2b80      	cmp	r3, #128	; 0x80
 8006702:	d107      	bne.n	8006714 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800670c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f000 fa9b 	bl	8006c4a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	691b      	ldr	r3, [r3, #16]
 800671a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800671e:	2b40      	cmp	r3, #64	; 0x40
 8006720:	d10e      	bne.n	8006740 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	68db      	ldr	r3, [r3, #12]
 8006728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800672c:	2b40      	cmp	r3, #64	; 0x40
 800672e:	d107      	bne.n	8006740 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006738:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 f8f9 	bl	8006932 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	691b      	ldr	r3, [r3, #16]
 8006746:	f003 0320 	and.w	r3, r3, #32
 800674a:	2b20      	cmp	r3, #32
 800674c:	d10e      	bne.n	800676c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	68db      	ldr	r3, [r3, #12]
 8006754:	f003 0320 	and.w	r3, r3, #32
 8006758:	2b20      	cmp	r3, #32
 800675a:	d107      	bne.n	800676c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f06f 0220 	mvn.w	r2, #32
 8006764:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f000 fa66 	bl	8006c38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800676c:	bf00      	nop
 800676e:	3708      	adds	r7, #8
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}

08006774 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b084      	sub	sp, #16
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006784:	2b01      	cmp	r3, #1
 8006786:	d101      	bne.n	800678c <HAL_TIM_ConfigClockSource+0x18>
 8006788:	2302      	movs	r3, #2
 800678a:	e0b3      	b.n	80068f4 <HAL_TIM_ConfigClockSource+0x180>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2201      	movs	r2, #1
 8006790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2202      	movs	r2, #2
 8006798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80067aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80067b2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	68fa      	ldr	r2, [r7, #12]
 80067ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067c4:	d03e      	beq.n	8006844 <HAL_TIM_ConfigClockSource+0xd0>
 80067c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067ca:	f200 8087 	bhi.w	80068dc <HAL_TIM_ConfigClockSource+0x168>
 80067ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067d2:	f000 8085 	beq.w	80068e0 <HAL_TIM_ConfigClockSource+0x16c>
 80067d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067da:	d87f      	bhi.n	80068dc <HAL_TIM_ConfigClockSource+0x168>
 80067dc:	2b70      	cmp	r3, #112	; 0x70
 80067de:	d01a      	beq.n	8006816 <HAL_TIM_ConfigClockSource+0xa2>
 80067e0:	2b70      	cmp	r3, #112	; 0x70
 80067e2:	d87b      	bhi.n	80068dc <HAL_TIM_ConfigClockSource+0x168>
 80067e4:	2b60      	cmp	r3, #96	; 0x60
 80067e6:	d050      	beq.n	800688a <HAL_TIM_ConfigClockSource+0x116>
 80067e8:	2b60      	cmp	r3, #96	; 0x60
 80067ea:	d877      	bhi.n	80068dc <HAL_TIM_ConfigClockSource+0x168>
 80067ec:	2b50      	cmp	r3, #80	; 0x50
 80067ee:	d03c      	beq.n	800686a <HAL_TIM_ConfigClockSource+0xf6>
 80067f0:	2b50      	cmp	r3, #80	; 0x50
 80067f2:	d873      	bhi.n	80068dc <HAL_TIM_ConfigClockSource+0x168>
 80067f4:	2b40      	cmp	r3, #64	; 0x40
 80067f6:	d058      	beq.n	80068aa <HAL_TIM_ConfigClockSource+0x136>
 80067f8:	2b40      	cmp	r3, #64	; 0x40
 80067fa:	d86f      	bhi.n	80068dc <HAL_TIM_ConfigClockSource+0x168>
 80067fc:	2b30      	cmp	r3, #48	; 0x30
 80067fe:	d064      	beq.n	80068ca <HAL_TIM_ConfigClockSource+0x156>
 8006800:	2b30      	cmp	r3, #48	; 0x30
 8006802:	d86b      	bhi.n	80068dc <HAL_TIM_ConfigClockSource+0x168>
 8006804:	2b20      	cmp	r3, #32
 8006806:	d060      	beq.n	80068ca <HAL_TIM_ConfigClockSource+0x156>
 8006808:	2b20      	cmp	r3, #32
 800680a:	d867      	bhi.n	80068dc <HAL_TIM_ConfigClockSource+0x168>
 800680c:	2b00      	cmp	r3, #0
 800680e:	d05c      	beq.n	80068ca <HAL_TIM_ConfigClockSource+0x156>
 8006810:	2b10      	cmp	r3, #16
 8006812:	d05a      	beq.n	80068ca <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006814:	e062      	b.n	80068dc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6818      	ldr	r0, [r3, #0]
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	6899      	ldr	r1, [r3, #8]
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	685a      	ldr	r2, [r3, #4]
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	68db      	ldr	r3, [r3, #12]
 8006826:	f000 f966 	bl	8006af6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	689b      	ldr	r3, [r3, #8]
 8006830:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006838:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	68fa      	ldr	r2, [r7, #12]
 8006840:	609a      	str	r2, [r3, #8]
      break;
 8006842:	e04e      	b.n	80068e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6818      	ldr	r0, [r3, #0]
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	6899      	ldr	r1, [r3, #8]
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	685a      	ldr	r2, [r3, #4]
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	68db      	ldr	r3, [r3, #12]
 8006854:	f000 f94f 	bl	8006af6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	689a      	ldr	r2, [r3, #8]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006866:	609a      	str	r2, [r3, #8]
      break;
 8006868:	e03b      	b.n	80068e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6818      	ldr	r0, [r3, #0]
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	6859      	ldr	r1, [r3, #4]
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	68db      	ldr	r3, [r3, #12]
 8006876:	461a      	mov	r2, r3
 8006878:	f000 f8c6 	bl	8006a08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	2150      	movs	r1, #80	; 0x50
 8006882:	4618      	mov	r0, r3
 8006884:	f000 f91d 	bl	8006ac2 <TIM_ITRx_SetConfig>
      break;
 8006888:	e02b      	b.n	80068e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6818      	ldr	r0, [r3, #0]
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	6859      	ldr	r1, [r3, #4]
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	68db      	ldr	r3, [r3, #12]
 8006896:	461a      	mov	r2, r3
 8006898:	f000 f8e4 	bl	8006a64 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	2160      	movs	r1, #96	; 0x60
 80068a2:	4618      	mov	r0, r3
 80068a4:	f000 f90d 	bl	8006ac2 <TIM_ITRx_SetConfig>
      break;
 80068a8:	e01b      	b.n	80068e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6818      	ldr	r0, [r3, #0]
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	6859      	ldr	r1, [r3, #4]
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	68db      	ldr	r3, [r3, #12]
 80068b6:	461a      	mov	r2, r3
 80068b8:	f000 f8a6 	bl	8006a08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	2140      	movs	r1, #64	; 0x40
 80068c2:	4618      	mov	r0, r3
 80068c4:	f000 f8fd 	bl	8006ac2 <TIM_ITRx_SetConfig>
      break;
 80068c8:	e00b      	b.n	80068e2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4619      	mov	r1, r3
 80068d4:	4610      	mov	r0, r2
 80068d6:	f000 f8f4 	bl	8006ac2 <TIM_ITRx_SetConfig>
        break;
 80068da:	e002      	b.n	80068e2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80068dc:	bf00      	nop
 80068de:	e000      	b.n	80068e2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80068e0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2201      	movs	r2, #1
 80068e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2200      	movs	r2, #0
 80068ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068f2:	2300      	movs	r3, #0
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3710      	adds	r7, #16
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}

080068fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b083      	sub	sp, #12
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006904:	bf00      	nop
 8006906:	370c      	adds	r7, #12
 8006908:	46bd      	mov	sp, r7
 800690a:	bc80      	pop	{r7}
 800690c:	4770      	bx	lr

0800690e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800690e:	b480      	push	{r7}
 8006910:	b083      	sub	sp, #12
 8006912:	af00      	add	r7, sp, #0
 8006914:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006916:	bf00      	nop
 8006918:	370c      	adds	r7, #12
 800691a:	46bd      	mov	sp, r7
 800691c:	bc80      	pop	{r7}
 800691e:	4770      	bx	lr

08006920 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006920:	b480      	push	{r7}
 8006922:	b083      	sub	sp, #12
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006928:	bf00      	nop
 800692a:	370c      	adds	r7, #12
 800692c:	46bd      	mov	sp, r7
 800692e:	bc80      	pop	{r7}
 8006930:	4770      	bx	lr

08006932 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006932:	b480      	push	{r7}
 8006934:	b083      	sub	sp, #12
 8006936:	af00      	add	r7, sp, #0
 8006938:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800693a:	bf00      	nop
 800693c:	370c      	adds	r7, #12
 800693e:	46bd      	mov	sp, r7
 8006940:	bc80      	pop	{r7}
 8006942:	4770      	bx	lr

08006944 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006944:	b480      	push	{r7}
 8006946:	b085      	sub	sp, #20
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	4a29      	ldr	r2, [pc, #164]	; (80069fc <TIM_Base_SetConfig+0xb8>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d00b      	beq.n	8006974 <TIM_Base_SetConfig+0x30>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006962:	d007      	beq.n	8006974 <TIM_Base_SetConfig+0x30>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	4a26      	ldr	r2, [pc, #152]	; (8006a00 <TIM_Base_SetConfig+0xbc>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d003      	beq.n	8006974 <TIM_Base_SetConfig+0x30>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	4a25      	ldr	r2, [pc, #148]	; (8006a04 <TIM_Base_SetConfig+0xc0>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d108      	bne.n	8006986 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800697a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	68fa      	ldr	r2, [r7, #12]
 8006982:	4313      	orrs	r3, r2
 8006984:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	4a1c      	ldr	r2, [pc, #112]	; (80069fc <TIM_Base_SetConfig+0xb8>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d00b      	beq.n	80069a6 <TIM_Base_SetConfig+0x62>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006994:	d007      	beq.n	80069a6 <TIM_Base_SetConfig+0x62>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	4a19      	ldr	r2, [pc, #100]	; (8006a00 <TIM_Base_SetConfig+0xbc>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d003      	beq.n	80069a6 <TIM_Base_SetConfig+0x62>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	4a18      	ldr	r2, [pc, #96]	; (8006a04 <TIM_Base_SetConfig+0xc0>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d108      	bne.n	80069b8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	68db      	ldr	r3, [r3, #12]
 80069b2:	68fa      	ldr	r2, [r7, #12]
 80069b4:	4313      	orrs	r3, r2
 80069b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	695b      	ldr	r3, [r3, #20]
 80069c2:	4313      	orrs	r3, r2
 80069c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	68fa      	ldr	r2, [r7, #12]
 80069ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	689a      	ldr	r2, [r3, #8]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	681a      	ldr	r2, [r3, #0]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	4a07      	ldr	r2, [pc, #28]	; (80069fc <TIM_Base_SetConfig+0xb8>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d103      	bne.n	80069ec <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	691a      	ldr	r2, [r3, #16]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2201      	movs	r2, #1
 80069f0:	615a      	str	r2, [r3, #20]
}
 80069f2:	bf00      	nop
 80069f4:	3714      	adds	r7, #20
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bc80      	pop	{r7}
 80069fa:	4770      	bx	lr
 80069fc:	40012c00 	.word	0x40012c00
 8006a00:	40000400 	.word	0x40000400
 8006a04:	40000800 	.word	0x40000800

08006a08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b087      	sub	sp, #28
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	60f8      	str	r0, [r7, #12]
 8006a10:	60b9      	str	r1, [r7, #8]
 8006a12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	6a1b      	ldr	r3, [r3, #32]
 8006a18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	6a1b      	ldr	r3, [r3, #32]
 8006a1e:	f023 0201 	bic.w	r2, r3, #1
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	699b      	ldr	r3, [r3, #24]
 8006a2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	011b      	lsls	r3, r3, #4
 8006a38:	693a      	ldr	r2, [r7, #16]
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	f023 030a 	bic.w	r3, r3, #10
 8006a44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a46:	697a      	ldr	r2, [r7, #20]
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	693a      	ldr	r2, [r7, #16]
 8006a52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	697a      	ldr	r2, [r7, #20]
 8006a58:	621a      	str	r2, [r3, #32]
}
 8006a5a:	bf00      	nop
 8006a5c:	371c      	adds	r7, #28
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bc80      	pop	{r7}
 8006a62:	4770      	bx	lr

08006a64 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b087      	sub	sp, #28
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	60f8      	str	r0, [r7, #12]
 8006a6c:	60b9      	str	r1, [r7, #8]
 8006a6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	6a1b      	ldr	r3, [r3, #32]
 8006a74:	f023 0210 	bic.w	r2, r3, #16
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	699b      	ldr	r3, [r3, #24]
 8006a80:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	6a1b      	ldr	r3, [r3, #32]
 8006a86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a8e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	031b      	lsls	r3, r3, #12
 8006a94:	697a      	ldr	r2, [r7, #20]
 8006a96:	4313      	orrs	r3, r2
 8006a98:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006aa0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	011b      	lsls	r3, r3, #4
 8006aa6:	693a      	ldr	r2, [r7, #16]
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	697a      	ldr	r2, [r7, #20]
 8006ab0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	693a      	ldr	r2, [r7, #16]
 8006ab6:	621a      	str	r2, [r3, #32]
}
 8006ab8:	bf00      	nop
 8006aba:	371c      	adds	r7, #28
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bc80      	pop	{r7}
 8006ac0:	4770      	bx	lr

08006ac2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ac2:	b480      	push	{r7}
 8006ac4:	b085      	sub	sp, #20
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	6078      	str	r0, [r7, #4]
 8006aca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ad8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ada:	683a      	ldr	r2, [r7, #0]
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	f043 0307 	orr.w	r3, r3, #7
 8006ae4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	68fa      	ldr	r2, [r7, #12]
 8006aea:	609a      	str	r2, [r3, #8]
}
 8006aec:	bf00      	nop
 8006aee:	3714      	adds	r7, #20
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bc80      	pop	{r7}
 8006af4:	4770      	bx	lr

08006af6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006af6:	b480      	push	{r7}
 8006af8:	b087      	sub	sp, #28
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	60f8      	str	r0, [r7, #12]
 8006afe:	60b9      	str	r1, [r7, #8]
 8006b00:	607a      	str	r2, [r7, #4]
 8006b02:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b10:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	021a      	lsls	r2, r3, #8
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	431a      	orrs	r2, r3
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	697a      	ldr	r2, [r7, #20]
 8006b20:	4313      	orrs	r3, r2
 8006b22:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	697a      	ldr	r2, [r7, #20]
 8006b28:	609a      	str	r2, [r3, #8]
}
 8006b2a:	bf00      	nop
 8006b2c:	371c      	adds	r7, #28
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bc80      	pop	{r7}
 8006b32:	4770      	bx	lr

08006b34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b087      	sub	sp, #28
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	60f8      	str	r0, [r7, #12]
 8006b3c:	60b9      	str	r1, [r7, #8]
 8006b3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	f003 031f 	and.w	r3, r3, #31
 8006b46:	2201      	movs	r2, #1
 8006b48:	fa02 f303 	lsl.w	r3, r2, r3
 8006b4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	6a1a      	ldr	r2, [r3, #32]
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	43db      	mvns	r3, r3
 8006b56:	401a      	ands	r2, r3
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	6a1a      	ldr	r2, [r3, #32]
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	f003 031f 	and.w	r3, r3, #31
 8006b66:	6879      	ldr	r1, [r7, #4]
 8006b68:	fa01 f303 	lsl.w	r3, r1, r3
 8006b6c:	431a      	orrs	r2, r3
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	621a      	str	r2, [r3, #32]
}
 8006b72:	bf00      	nop
 8006b74:	371c      	adds	r7, #28
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bc80      	pop	{r7}
 8006b7a:	4770      	bx	lr

08006b7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b085      	sub	sp, #20
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d101      	bne.n	8006b94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b90:	2302      	movs	r3, #2
 8006b92:	e046      	b.n	8006c22 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2202      	movs	r2, #2
 8006ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	68fa      	ldr	r2, [r7, #12]
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	68fa      	ldr	r2, [r7, #12]
 8006bcc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a16      	ldr	r2, [pc, #88]	; (8006c2c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d00e      	beq.n	8006bf6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006be0:	d009      	beq.n	8006bf6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a12      	ldr	r2, [pc, #72]	; (8006c30 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d004      	beq.n	8006bf6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a10      	ldr	r2, [pc, #64]	; (8006c34 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d10c      	bne.n	8006c10 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006bfc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	68ba      	ldr	r2, [r7, #8]
 8006c04:	4313      	orrs	r3, r2
 8006c06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	68ba      	ldr	r2, [r7, #8]
 8006c0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2201      	movs	r2, #1
 8006c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c20:	2300      	movs	r3, #0
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3714      	adds	r7, #20
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bc80      	pop	{r7}
 8006c2a:	4770      	bx	lr
 8006c2c:	40012c00 	.word	0x40012c00
 8006c30:	40000400 	.word	0x40000400
 8006c34:	40000800 	.word	0x40000800

08006c38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b083      	sub	sp, #12
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c40:	bf00      	nop
 8006c42:	370c      	adds	r7, #12
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bc80      	pop	{r7}
 8006c48:	4770      	bx	lr

08006c4a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c4a:	b480      	push	{r7}
 8006c4c:	b083      	sub	sp, #12
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c52:	bf00      	nop
 8006c54:	370c      	adds	r7, #12
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bc80      	pop	{r7}
 8006c5a:	4770      	bx	lr

08006c5c <__errno>:
 8006c5c:	4b01      	ldr	r3, [pc, #4]	; (8006c64 <__errno+0x8>)
 8006c5e:	6818      	ldr	r0, [r3, #0]
 8006c60:	4770      	bx	lr
 8006c62:	bf00      	nop
 8006c64:	2000005c 	.word	0x2000005c

08006c68 <__libc_init_array>:
 8006c68:	b570      	push	{r4, r5, r6, lr}
 8006c6a:	2600      	movs	r6, #0
 8006c6c:	4d0c      	ldr	r5, [pc, #48]	; (8006ca0 <__libc_init_array+0x38>)
 8006c6e:	4c0d      	ldr	r4, [pc, #52]	; (8006ca4 <__libc_init_array+0x3c>)
 8006c70:	1b64      	subs	r4, r4, r5
 8006c72:	10a4      	asrs	r4, r4, #2
 8006c74:	42a6      	cmp	r6, r4
 8006c76:	d109      	bne.n	8006c8c <__libc_init_array+0x24>
 8006c78:	f000 f92c 	bl	8006ed4 <_init>
 8006c7c:	2600      	movs	r6, #0
 8006c7e:	4d0a      	ldr	r5, [pc, #40]	; (8006ca8 <__libc_init_array+0x40>)
 8006c80:	4c0a      	ldr	r4, [pc, #40]	; (8006cac <__libc_init_array+0x44>)
 8006c82:	1b64      	subs	r4, r4, r5
 8006c84:	10a4      	asrs	r4, r4, #2
 8006c86:	42a6      	cmp	r6, r4
 8006c88:	d105      	bne.n	8006c96 <__libc_init_array+0x2e>
 8006c8a:	bd70      	pop	{r4, r5, r6, pc}
 8006c8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c90:	4798      	blx	r3
 8006c92:	3601      	adds	r6, #1
 8006c94:	e7ee      	b.n	8006c74 <__libc_init_array+0xc>
 8006c96:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c9a:	4798      	blx	r3
 8006c9c:	3601      	adds	r6, #1
 8006c9e:	e7f2      	b.n	8006c86 <__libc_init_array+0x1e>
 8006ca0:	08006ff8 	.word	0x08006ff8
 8006ca4:	08006ff8 	.word	0x08006ff8
 8006ca8:	08006ff8 	.word	0x08006ff8
 8006cac:	08006ffc 	.word	0x08006ffc

08006cb0 <malloc>:
 8006cb0:	4b02      	ldr	r3, [pc, #8]	; (8006cbc <malloc+0xc>)
 8006cb2:	4601      	mov	r1, r0
 8006cb4:	6818      	ldr	r0, [r3, #0]
 8006cb6:	f000 b87b 	b.w	8006db0 <_malloc_r>
 8006cba:	bf00      	nop
 8006cbc:	2000005c 	.word	0x2000005c

08006cc0 <free>:
 8006cc0:	4b02      	ldr	r3, [pc, #8]	; (8006ccc <free+0xc>)
 8006cc2:	4601      	mov	r1, r0
 8006cc4:	6818      	ldr	r0, [r3, #0]
 8006cc6:	f000 b80b 	b.w	8006ce0 <_free_r>
 8006cca:	bf00      	nop
 8006ccc:	2000005c 	.word	0x2000005c

08006cd0 <memset>:
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	4402      	add	r2, r0
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d100      	bne.n	8006cda <memset+0xa>
 8006cd8:	4770      	bx	lr
 8006cda:	f803 1b01 	strb.w	r1, [r3], #1
 8006cde:	e7f9      	b.n	8006cd4 <memset+0x4>

08006ce0 <_free_r>:
 8006ce0:	b538      	push	{r3, r4, r5, lr}
 8006ce2:	4605      	mov	r5, r0
 8006ce4:	2900      	cmp	r1, #0
 8006ce6:	d040      	beq.n	8006d6a <_free_r+0x8a>
 8006ce8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006cec:	1f0c      	subs	r4, r1, #4
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	bfb8      	it	lt
 8006cf2:	18e4      	addlt	r4, r4, r3
 8006cf4:	f000 f8e0 	bl	8006eb8 <__malloc_lock>
 8006cf8:	4a1c      	ldr	r2, [pc, #112]	; (8006d6c <_free_r+0x8c>)
 8006cfa:	6813      	ldr	r3, [r2, #0]
 8006cfc:	b933      	cbnz	r3, 8006d0c <_free_r+0x2c>
 8006cfe:	6063      	str	r3, [r4, #4]
 8006d00:	6014      	str	r4, [r2, #0]
 8006d02:	4628      	mov	r0, r5
 8006d04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d08:	f000 b8dc 	b.w	8006ec4 <__malloc_unlock>
 8006d0c:	42a3      	cmp	r3, r4
 8006d0e:	d908      	bls.n	8006d22 <_free_r+0x42>
 8006d10:	6820      	ldr	r0, [r4, #0]
 8006d12:	1821      	adds	r1, r4, r0
 8006d14:	428b      	cmp	r3, r1
 8006d16:	bf01      	itttt	eq
 8006d18:	6819      	ldreq	r1, [r3, #0]
 8006d1a:	685b      	ldreq	r3, [r3, #4]
 8006d1c:	1809      	addeq	r1, r1, r0
 8006d1e:	6021      	streq	r1, [r4, #0]
 8006d20:	e7ed      	b.n	8006cfe <_free_r+0x1e>
 8006d22:	461a      	mov	r2, r3
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	b10b      	cbz	r3, 8006d2c <_free_r+0x4c>
 8006d28:	42a3      	cmp	r3, r4
 8006d2a:	d9fa      	bls.n	8006d22 <_free_r+0x42>
 8006d2c:	6811      	ldr	r1, [r2, #0]
 8006d2e:	1850      	adds	r0, r2, r1
 8006d30:	42a0      	cmp	r0, r4
 8006d32:	d10b      	bne.n	8006d4c <_free_r+0x6c>
 8006d34:	6820      	ldr	r0, [r4, #0]
 8006d36:	4401      	add	r1, r0
 8006d38:	1850      	adds	r0, r2, r1
 8006d3a:	4283      	cmp	r3, r0
 8006d3c:	6011      	str	r1, [r2, #0]
 8006d3e:	d1e0      	bne.n	8006d02 <_free_r+0x22>
 8006d40:	6818      	ldr	r0, [r3, #0]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	4401      	add	r1, r0
 8006d46:	6011      	str	r1, [r2, #0]
 8006d48:	6053      	str	r3, [r2, #4]
 8006d4a:	e7da      	b.n	8006d02 <_free_r+0x22>
 8006d4c:	d902      	bls.n	8006d54 <_free_r+0x74>
 8006d4e:	230c      	movs	r3, #12
 8006d50:	602b      	str	r3, [r5, #0]
 8006d52:	e7d6      	b.n	8006d02 <_free_r+0x22>
 8006d54:	6820      	ldr	r0, [r4, #0]
 8006d56:	1821      	adds	r1, r4, r0
 8006d58:	428b      	cmp	r3, r1
 8006d5a:	bf01      	itttt	eq
 8006d5c:	6819      	ldreq	r1, [r3, #0]
 8006d5e:	685b      	ldreq	r3, [r3, #4]
 8006d60:	1809      	addeq	r1, r1, r0
 8006d62:	6021      	streq	r1, [r4, #0]
 8006d64:	6063      	str	r3, [r4, #4]
 8006d66:	6054      	str	r4, [r2, #4]
 8006d68:	e7cb      	b.n	8006d02 <_free_r+0x22>
 8006d6a:	bd38      	pop	{r3, r4, r5, pc}
 8006d6c:	20000228 	.word	0x20000228

08006d70 <sbrk_aligned>:
 8006d70:	b570      	push	{r4, r5, r6, lr}
 8006d72:	4e0e      	ldr	r6, [pc, #56]	; (8006dac <sbrk_aligned+0x3c>)
 8006d74:	460c      	mov	r4, r1
 8006d76:	6831      	ldr	r1, [r6, #0]
 8006d78:	4605      	mov	r5, r0
 8006d7a:	b911      	cbnz	r1, 8006d82 <sbrk_aligned+0x12>
 8006d7c:	f000 f88c 	bl	8006e98 <_sbrk_r>
 8006d80:	6030      	str	r0, [r6, #0]
 8006d82:	4621      	mov	r1, r4
 8006d84:	4628      	mov	r0, r5
 8006d86:	f000 f887 	bl	8006e98 <_sbrk_r>
 8006d8a:	1c43      	adds	r3, r0, #1
 8006d8c:	d00a      	beq.n	8006da4 <sbrk_aligned+0x34>
 8006d8e:	1cc4      	adds	r4, r0, #3
 8006d90:	f024 0403 	bic.w	r4, r4, #3
 8006d94:	42a0      	cmp	r0, r4
 8006d96:	d007      	beq.n	8006da8 <sbrk_aligned+0x38>
 8006d98:	1a21      	subs	r1, r4, r0
 8006d9a:	4628      	mov	r0, r5
 8006d9c:	f000 f87c 	bl	8006e98 <_sbrk_r>
 8006da0:	3001      	adds	r0, #1
 8006da2:	d101      	bne.n	8006da8 <sbrk_aligned+0x38>
 8006da4:	f04f 34ff 	mov.w	r4, #4294967295
 8006da8:	4620      	mov	r0, r4
 8006daa:	bd70      	pop	{r4, r5, r6, pc}
 8006dac:	2000022c 	.word	0x2000022c

08006db0 <_malloc_r>:
 8006db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006db4:	1ccd      	adds	r5, r1, #3
 8006db6:	f025 0503 	bic.w	r5, r5, #3
 8006dba:	3508      	adds	r5, #8
 8006dbc:	2d0c      	cmp	r5, #12
 8006dbe:	bf38      	it	cc
 8006dc0:	250c      	movcc	r5, #12
 8006dc2:	2d00      	cmp	r5, #0
 8006dc4:	4607      	mov	r7, r0
 8006dc6:	db01      	blt.n	8006dcc <_malloc_r+0x1c>
 8006dc8:	42a9      	cmp	r1, r5
 8006dca:	d905      	bls.n	8006dd8 <_malloc_r+0x28>
 8006dcc:	230c      	movs	r3, #12
 8006dce:	2600      	movs	r6, #0
 8006dd0:	603b      	str	r3, [r7, #0]
 8006dd2:	4630      	mov	r0, r6
 8006dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006dd8:	4e2e      	ldr	r6, [pc, #184]	; (8006e94 <_malloc_r+0xe4>)
 8006dda:	f000 f86d 	bl	8006eb8 <__malloc_lock>
 8006dde:	6833      	ldr	r3, [r6, #0]
 8006de0:	461c      	mov	r4, r3
 8006de2:	bb34      	cbnz	r4, 8006e32 <_malloc_r+0x82>
 8006de4:	4629      	mov	r1, r5
 8006de6:	4638      	mov	r0, r7
 8006de8:	f7ff ffc2 	bl	8006d70 <sbrk_aligned>
 8006dec:	1c43      	adds	r3, r0, #1
 8006dee:	4604      	mov	r4, r0
 8006df0:	d14d      	bne.n	8006e8e <_malloc_r+0xde>
 8006df2:	6834      	ldr	r4, [r6, #0]
 8006df4:	4626      	mov	r6, r4
 8006df6:	2e00      	cmp	r6, #0
 8006df8:	d140      	bne.n	8006e7c <_malloc_r+0xcc>
 8006dfa:	6823      	ldr	r3, [r4, #0]
 8006dfc:	4631      	mov	r1, r6
 8006dfe:	4638      	mov	r0, r7
 8006e00:	eb04 0803 	add.w	r8, r4, r3
 8006e04:	f000 f848 	bl	8006e98 <_sbrk_r>
 8006e08:	4580      	cmp	r8, r0
 8006e0a:	d13a      	bne.n	8006e82 <_malloc_r+0xd2>
 8006e0c:	6821      	ldr	r1, [r4, #0]
 8006e0e:	3503      	adds	r5, #3
 8006e10:	1a6d      	subs	r5, r5, r1
 8006e12:	f025 0503 	bic.w	r5, r5, #3
 8006e16:	3508      	adds	r5, #8
 8006e18:	2d0c      	cmp	r5, #12
 8006e1a:	bf38      	it	cc
 8006e1c:	250c      	movcc	r5, #12
 8006e1e:	4638      	mov	r0, r7
 8006e20:	4629      	mov	r1, r5
 8006e22:	f7ff ffa5 	bl	8006d70 <sbrk_aligned>
 8006e26:	3001      	adds	r0, #1
 8006e28:	d02b      	beq.n	8006e82 <_malloc_r+0xd2>
 8006e2a:	6823      	ldr	r3, [r4, #0]
 8006e2c:	442b      	add	r3, r5
 8006e2e:	6023      	str	r3, [r4, #0]
 8006e30:	e00e      	b.n	8006e50 <_malloc_r+0xa0>
 8006e32:	6822      	ldr	r2, [r4, #0]
 8006e34:	1b52      	subs	r2, r2, r5
 8006e36:	d41e      	bmi.n	8006e76 <_malloc_r+0xc6>
 8006e38:	2a0b      	cmp	r2, #11
 8006e3a:	d916      	bls.n	8006e6a <_malloc_r+0xba>
 8006e3c:	1961      	adds	r1, r4, r5
 8006e3e:	42a3      	cmp	r3, r4
 8006e40:	6025      	str	r5, [r4, #0]
 8006e42:	bf18      	it	ne
 8006e44:	6059      	strne	r1, [r3, #4]
 8006e46:	6863      	ldr	r3, [r4, #4]
 8006e48:	bf08      	it	eq
 8006e4a:	6031      	streq	r1, [r6, #0]
 8006e4c:	5162      	str	r2, [r4, r5]
 8006e4e:	604b      	str	r3, [r1, #4]
 8006e50:	4638      	mov	r0, r7
 8006e52:	f104 060b 	add.w	r6, r4, #11
 8006e56:	f000 f835 	bl	8006ec4 <__malloc_unlock>
 8006e5a:	f026 0607 	bic.w	r6, r6, #7
 8006e5e:	1d23      	adds	r3, r4, #4
 8006e60:	1af2      	subs	r2, r6, r3
 8006e62:	d0b6      	beq.n	8006dd2 <_malloc_r+0x22>
 8006e64:	1b9b      	subs	r3, r3, r6
 8006e66:	50a3      	str	r3, [r4, r2]
 8006e68:	e7b3      	b.n	8006dd2 <_malloc_r+0x22>
 8006e6a:	6862      	ldr	r2, [r4, #4]
 8006e6c:	42a3      	cmp	r3, r4
 8006e6e:	bf0c      	ite	eq
 8006e70:	6032      	streq	r2, [r6, #0]
 8006e72:	605a      	strne	r2, [r3, #4]
 8006e74:	e7ec      	b.n	8006e50 <_malloc_r+0xa0>
 8006e76:	4623      	mov	r3, r4
 8006e78:	6864      	ldr	r4, [r4, #4]
 8006e7a:	e7b2      	b.n	8006de2 <_malloc_r+0x32>
 8006e7c:	4634      	mov	r4, r6
 8006e7e:	6876      	ldr	r6, [r6, #4]
 8006e80:	e7b9      	b.n	8006df6 <_malloc_r+0x46>
 8006e82:	230c      	movs	r3, #12
 8006e84:	4638      	mov	r0, r7
 8006e86:	603b      	str	r3, [r7, #0]
 8006e88:	f000 f81c 	bl	8006ec4 <__malloc_unlock>
 8006e8c:	e7a1      	b.n	8006dd2 <_malloc_r+0x22>
 8006e8e:	6025      	str	r5, [r4, #0]
 8006e90:	e7de      	b.n	8006e50 <_malloc_r+0xa0>
 8006e92:	bf00      	nop
 8006e94:	20000228 	.word	0x20000228

08006e98 <_sbrk_r>:
 8006e98:	b538      	push	{r3, r4, r5, lr}
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	4d05      	ldr	r5, [pc, #20]	; (8006eb4 <_sbrk_r+0x1c>)
 8006e9e:	4604      	mov	r4, r0
 8006ea0:	4608      	mov	r0, r1
 8006ea2:	602b      	str	r3, [r5, #0]
 8006ea4:	f7fb fc72 	bl	800278c <_sbrk>
 8006ea8:	1c43      	adds	r3, r0, #1
 8006eaa:	d102      	bne.n	8006eb2 <_sbrk_r+0x1a>
 8006eac:	682b      	ldr	r3, [r5, #0]
 8006eae:	b103      	cbz	r3, 8006eb2 <_sbrk_r+0x1a>
 8006eb0:	6023      	str	r3, [r4, #0]
 8006eb2:	bd38      	pop	{r3, r4, r5, pc}
 8006eb4:	20000230 	.word	0x20000230

08006eb8 <__malloc_lock>:
 8006eb8:	4801      	ldr	r0, [pc, #4]	; (8006ec0 <__malloc_lock+0x8>)
 8006eba:	f000 b809 	b.w	8006ed0 <__retarget_lock_acquire_recursive>
 8006ebe:	bf00      	nop
 8006ec0:	20000234 	.word	0x20000234

08006ec4 <__malloc_unlock>:
 8006ec4:	4801      	ldr	r0, [pc, #4]	; (8006ecc <__malloc_unlock+0x8>)
 8006ec6:	f000 b804 	b.w	8006ed2 <__retarget_lock_release_recursive>
 8006eca:	bf00      	nop
 8006ecc:	20000234 	.word	0x20000234

08006ed0 <__retarget_lock_acquire_recursive>:
 8006ed0:	4770      	bx	lr

08006ed2 <__retarget_lock_release_recursive>:
 8006ed2:	4770      	bx	lr

08006ed4 <_init>:
 8006ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ed6:	bf00      	nop
 8006ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006eda:	bc08      	pop	{r3}
 8006edc:	469e      	mov	lr, r3
 8006ede:	4770      	bx	lr

08006ee0 <_fini>:
 8006ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ee2:	bf00      	nop
 8006ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ee6:	bc08      	pop	{r3}
 8006ee8:	469e      	mov	lr, r3
 8006eea:	4770      	bx	lr
